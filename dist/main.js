!function(t){var r={};function n(e){if(r[e])return r[e].exports;var o=r[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=r,n.d=function(t,r,e){n.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:e})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,r){if(1&r&&(t=n(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(n.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var o in t)n.d(e,o,function(r){return t[r]}.bind(null,o));return e},n.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(r,"a",r),r},n.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},n.p="",n(n.s=3)}([function(t,r,n){"use strict";n.d(r,"d",(function(){return o})),n.d(r,"c",(function(){return u})),n.d(r,"h",(function(){return i})),n.d(r,"a",(function(){return c})),n.d(r,"g",(function(){return a})),n.d(r,"b",(function(){return s})),n.d(r,"e",(function(){return l})),n.d(r,"f",(function(){return d}));var e=function(){for(var t=0,r=0,n=arguments.length;r<n;r++)t+=arguments[r].length;var e=Array(t),o=0;for(r=0;r<n;r++)for(var u=arguments[r],i=0,c=u.length;i<c;i++,o++)e[o]=u[i];return e};function o(t){for(var r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];for(var e="number"==typeof r[0]?r[0]:0,o="function"==typeof r[0]?r[0]:r[1],u=t<e?[t,e]:[e,t],i=u[0],c=u[1]-i,a=Array(c),f=0;f<c;f++)a[f]=o?o(f+i):f+i;return a}var u=function(t,r,n){void 0===r&&(r=0),void 0===n&&(n=!1);var e=t<r?[t,r]:[r,t],o=e[0],u=e[1],i=Math.random()*(u-o);return o+(n?Math.floor(i):i)},i=function(t){return t[Math.floor(Math.random()*t.length)]},c=function(t,r){var n=r.x-t.x,e=r.y-t.y;return Math.sqrt(Math.pow(n,2)+Math.pow(e,2))},a=function(t,r,n){var e=t.x-r.x,o=t.y-r.y,u=Math.cos(n),i=Math.sin(n),c=e*i+o*u;return{x:e*u-o*i+r.x,y:c+r.y}};function f(t){return void 0===t||"[object Null]"===Object.prototype.toString.call(t)}var s=function(t,r){var n;return t.find((function(t,e,o){return!f(n=r(t,e,o))})),n},l=function(t,r){void 0===r&&(r=1);var n=r%4;switch(n<0?4-n:n){case 1:return t.reduce((function(r,n,e){return n.forEach((function(n,o){var u=o,i=t.length-e-1;r[u]=r[u]||[],r[u][i]=n})),r}),[]);case 2:return e(t).reverse().map((function(t){return e(t).reverse()}));case 3:return t.reduce((function(t,r,n){return r.forEach((function(e,o){var u=r.length-o-1,i=n;t[u]=t[u]||[],t[u][i]=e})),t}),[]);default:return t.map((function(t){return e(t)}))}},d=function(t,r,n,e){var o=t.row,u=t.col,i=e%4;switch(i<0?4-i:i){case 1:return{row:u,col:r-o-1};case 2:return{row:r-o-1,col:n-u-1};case 3:return{row:n-u-1,col:o};default:return{row:o,col:u}}}},function(t,r,n){"use strict";var e="mundane",o=function(){function t(t){var r=t.type,n=t.value,o=t.variant;this.explode=!1,this.type=r,this.value=n||1,this._variant=o||e}return Object.defineProperty(t.prototype,"variant",{get:function(){return this._variant||e},set:function(t){this._variant=t||e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isMundane",{get:function(){return this.variant===e},enumerable:!0,configurable:!0}),t}();r.a=o},function(t,r,n){"use strict";var e=n(1),o=n(0),u=function(){for(var t=0,r=0,n=arguments.length;r<n;r++)t+=arguments[r].length;var e=Array(t),o=0;for(r=0;r<n;r++)for(var u=arguments[r],i=0,c=u.length;i<c;i++,o++)e[o]=u[i];return e},i=function(){function t(t){this.rowCount=9,this.colCount=9,this.tileClass=e.a,Object.assign(this,t),this.tileDefs=t.tileDefs}return Object.defineProperty(t.prototype,"rows",{get:function(){return this._rows=this._rows||this.newRows(),this._rows},set:function(t){this._rows=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"tiles",{get:function(){return this.rows.reduce((function(t,r){return u(t,r)}),[])},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"tileTypes",{get:function(){return Object.keys(this.tileDefs)},enumerable:!0,configurable:!0}),t.prototype.newMundaneTile=function(){var t=Object(o.h)(this.tileTypes);return this.tileDefs[t].generator({variant:"mundane"})},t.prototype.newRows=function(){var t=this;return Object(o.d)(this.rowCount,(function(){return Object(o.d)(t.colCount,(function(){return t.newMundaneTile()}))}))},t}();r.a=i},function(t,r,n){"use strict";n.r(r);var e=n(2),o=n(0);window.Board=e.a,window.rand=o.c}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,