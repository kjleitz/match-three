!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=4)}([function(t,e,r){"use strict";r.d(e,"d",(function(){return i})),r.d(e,"c",(function(){return o})),r.d(e,"h",(function(){return a})),r.d(e,"a",(function(){return l})),r.d(e,"g",(function(){return c})),r.d(e,"b",(function(){return u})),r.d(e,"e",(function(){return h})),r.d(e,"f",(function(){return p}));var n=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],a=0,l=o.length;a<l;a++,i++)n[i]=o[a];return n};function i(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];for(var n="number"==typeof e[0]?e[0]:0,i="function"==typeof e[0]?e[0]:e[1],o=t<n?[t,n]:[n,t],a=o[0],l=o[1]-a,c=Array(l),s=0;s<l;s++)c[s]=i?i(s+a):s+a;return c}var o=function(t,e,r){void 0===e&&(e=0),void 0===r&&(r=!1);var n=t<e?[t,e]:[e,t],i=n[0],o=n[1],a=Math.random()*(o-i);return i+(r?Math.floor(a):a)},a=function(t){return t[Math.floor(Math.random()*t.length)]},l=function(t,e){var r=e.x-t.x,n=e.y-t.y;return Math.sqrt(Math.pow(r,2)+Math.pow(n,2))},c=function(t,e,r){var n=t.x-e.x,i=t.y-e.y,o=Math.cos(r),a=Math.sin(r),l=n*a+i*o;return{x:n*o-i*a+e.x,y:l+e.y}};function s(t){return void 0===t||"[object Null]"===Object.prototype.toString.call(t)}var u=function(t,e){var r;return t.find((function(t,n,i){return!s(r=e(t,n,i))})),r},h=function(t,e){void 0===e&&(e=1);var r=e%4;switch(r<0?4-r:r){case 1:return t.reduce((function(e,r,n){return r.forEach((function(r,i){var o=i,a=t.length-n-1;e[o]=e[o]||[],e[o][a]=r})),e}),[]);case 2:return n(t).reverse().map((function(t){return n(t).reverse()}));case 3:return t.reduce((function(t,e,r){return e.forEach((function(n,i){var o=e.length-i-1,a=r;t[o]=t[o]||[],t[o][a]=n})),t}),[]);default:return t.map((function(t){return n(t)}))}},p=function(t,e,r,n){var i=t.row,o=t.col,a=n%4;switch(a<0?4-a:a){case 1:return{row:o,col:e-i-1};case 2:return{row:e-i-1,col:r-o-1};case 3:return{row:r-o-1,col:i};default:return{row:i,col:o}}}},function(t,e,r){"use strict";var n="mundane",i=function(){function t(t){var e=t.type,r=t.value,i=t.variant;this.explode=!1,this.type=e,this.value=r||1,this._variant=i||n}return Object.defineProperty(t.prototype,"variant",{get:function(){return this._variant||n},set:function(t){this._variant=t||n},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isMundane",{get:function(){return this.variant===n},enumerable:!0,configurable:!0}),t}();e.a=i},function(t,e,r){"use strict";var n=r(1),i=r(0),o=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],a=0,l=o.length;a<l;a++,i++)n[i]=o[a];return n},a=function(){function t(t){this.rowCount=9,this.colCount=9,this.tileClass=n.a,Object.assign(this,t),this.tileDefs=t.tileDefs}return Object.defineProperty(t.prototype,"rows",{get:function(){return this._rows=this._rows||this.newRows(),this._rows},set:function(t){this._rows=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"tiles",{get:function(){return this.rows.reduce((function(t,e){return o(t,e)}),[])},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"tileTypes",{get:function(){return Object.keys(this.tileDefs)},enumerable:!0,configurable:!0}),t.prototype.newMundaneTile=function(){var t=Object(i.h)(this.tileTypes);return this.tileDefs[t].generator({variant:"mundane"})},t.prototype.newRows=function(){var t=this;return Object(i.d)(this.rowCount,(function(){return Object(i.d)(t.colCount,(function(){return t.newMundaneTile()}))}))},t}();e.a=a},,function(t,e,r){"use strict";r.r(e);var n=function(t,e,r){void 0===r&&(r=0),requestAnimationFrame((function(){return n(t,e,r+1)})),t.clearRect(0,0,window.innerWidth,window.innerHeight),e(r)},i=n,o=document.createElement("canvas"),a=function(){o.width=window.innerWidth,o.height=window.innerHeight};a(),window.addEventListener("resize",a),document.body.appendChild(o);var l=o.getContext("2d");l||console.error("Canvas '2d' context is not supported.");var c,s=r(2),u=r(1),h=r(0),p=function(t,e,r,n,i,o,a){var l=2*o,c=.75*l,s=o,u=a-2*c,p=i.y+u/2,f=p-u,d=i.x-s/2,y=i.x+s/2,g=i.x-l/2,v=i.x+l/2,w=f,m=w-c,b=p,x=b+c,S={vertical:0,horizontal:.5*Math.PI}[e],T=[{x:d,y:f},{x:d,y:p},{x:g,y:b},{x:i.x,y:x},{x:v,y:b},{x:y,y:p},{x:y,y:f},{x:v,y:w},{x:i.x,y:m},{x:g,y:w}],O=S?T.map((function(t){return Object(h.g)(t,i,S)})):T;t.fillStyle=r,t.strokeStyle=n,t.beginPath();var C=O[0];t.moveTo(C.x,C.y),O.forEach((function(e){var r=e.x,n=e.y;return t.lineTo(r,n)})),t.lineTo(C.x,C.y),t.closePath(),t.fill(),n&&t.stroke()},f=(c=function(t,e){return(c=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}c(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),d=parseInt("FFFFFF",16),y=function(t){function e(e){var r=t.call(this,e)||this;return r.width=50,r.height=50,r.color="white",r.selected=!1,r.targeted=!1,r.matchedAt=null,r.blank=!1,r.matchAnimationMs=250,r._imgUrl="",r.width=e.width||r.width,r.height=e.height||r.height,r.color=e.color||r.color,r.blank=e.blank||r.blank,r.matchAnimationMs=e.matchAnimationMs||r.matchAnimationMs,r._imgUrl=e.imgUrl||r._imgUrl,r.applyNormalStyle=e.applyNormalStyle||r.defaultApplyNormalStyle,r.applySelectedStyle=e.applySelectedStyle||r.defaultApplySelectedStyle,r.applyTargetedStyle=e.applyTargetedStyle||r.defaultApplyTargetedStyle,r.applyMatchedStyle=e.applyMatchedStyle||r.defaultApplyMatchedStyle,r}return f(e,t),Object.defineProperty(e.prototype,"matched",{get:function(){return!!this.matchedAt},set:function(t){var e=this;t&&this.matchedAt||(clearTimeout(this.blankTimeout),t?(this.matchedAt=new Date,this.blankTimeout=window.setTimeout((function(){return e.blank=!0}),this.matchAnimationMs)):this.matchedAt=null)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"imgUrl",{get:function(){return this._imgUrl},set:function(t){this._imgUrl=t,delete this._image},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"image",{get:function(){if(this._image)return this.image;if(!this.imgUrl)return null;var t=document.createElement("img");return t.src=this.imgUrl,t.width=this.width,t.height=this.height,this._image=t,this._image},enumerable:!0,configurable:!0}),e.prototype.draw=function(t,e,r){this.blank||(this.applyNormalStyle(t,this,{x:e,y:r}),this.matched?this.applyMatchedStyle(t,this,{x:e,y:r}):this.selected?this.applySelectedStyle(t,this,{x:e,y:r}):this.targeted&&this.applyTargetedStyle(t,this,{x:e,y:r}))},e.prototype.defaultApplyNormalStyle=function(t,e,r){var n=r.x,i=r.y,o=e.width,a=e.height,l=e.image,c=e.color,s=e.variant;l?t.drawImage(l,n,i):(t.fillStyle=c,t.fillRect(n,i,o,a));var u={x:n+a/2,y:i+o/2},h=o/8,f=.6*a;switch(s){case"horizontalClear":p(t,"horizontal","white","white",u,h,f);break;case"verticalClear":p(t,"vertical","white","white",u,h,f);break;case"crossClear":!function(t,e,r,n,i,o){var a=2*i,l=.75*a,c=i,s=c,u=o-2*l-c,h=n.y-s/2,p=h-u,f=n.y+s/2,d=f+u,y=n.x-c/2,g=y-u,v=n.x+c/2,w=v+u,m=p,b=m-l,x=d,S=x+l,T=g,O=T-l,C=w,k=C+l,j=h,E=f,M=y,_=v,D=n.y-a/2,A=n.y+a/2,P=n.x-a/2,F=n.x+a/2,N=[{x:M,y:p},{x:M,y:h},{x:g,y:j},{x:T,y:D},{x:O,y:n.y},{x:T,y:A},{x:g,y:E},{x:y,y:E},{x:M,y:d},{x:P,y:x},{x:n.x,y:S},{x:F,y:x},{x:_,y:d},{x:_,y:f},{x:w,y:E},{x:C,y:A},{x:k,y:n.y},{x:C,y:D},{x:w,y:j},{x:v,y:j},{x:_,y:p},{x:F,y:m},{x:n.x,y:b},{x:P,y:m}];t.fillStyle=e,t.strokeStyle=r,t.beginPath();var L=N[0];t.moveTo(L.x,L.y),N.forEach((function(e){var r=e.x,n=e.y;return t.lineTo(r,n)})),t.lineTo(L.x,L.y),t.closePath(),t.fill(),r&&t.stroke()}(t,"white","white",u,h,f);break;case"typeClear":t.fillStyle="#"+((new Date).getTime()/10%d).toString(16),t.fillRect(n,i,o,a);break;case"bombClear":t.fillStyle="black";var y=o/2,g=a/2;t.fillRect(n+y/2,i+g/2,y,g)}},e.prototype.defaultApplySelectedStyle=function(t,e,r){var n=r.x,i=r.y,o=e.width,a=e.height;t.fillStyle="rgba(255, 255, 255, 0.5)",t.fillRect(n,i,o,a)},e.prototype.defaultApplyTargetedStyle=function(t,e,r){var n=r.x,i=r.y,o=e.width,a=e.height,l=(new Date).getTime(),c=this.matchAnimationMs,s=2+3*Math.sin(l/c%Math.PI);t.fillStyle="rgba(255, 255, 255, 0.9)",t.fillRect(n,i,o,a),t.fillStyle=e.color,t.fillRect(n+s,i+s,o-2*s,a-2*s)},e.prototype.defaultApplyMatchedStyle=function(t,e,r){var n=r.x,i=r.y,o=e.width,a=e.height,l=e.color,c=e.matchAnimationMs;if(e.matchedAt){var s=(new Date).getTime()-e.matchedAt.getTime(),u=s>c?1:s/c,h=u*(o/2),p=u*(a/2);t.fillStyle="#FFF",t.fillRect(n,i,o,a),t.fillStyle=l,t.fillRect(n+h,i+p,o-2*h,a-2*p)}},e}(u.a),g=new(function(){function t(){var t=this;this.x=0,this.y=0,this.pressed=!1,this.pressCallbacks=[],this.depressCallbacks=[],this.moveCallbacks=[],this.pressedStartPos={x:this.x,y:this.y},window.addEventListener("mousedown",(function(e){t.populateFromMouseEvent(e),t.pressCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("mousemove",(function(e){t.populateFromMouseEvent(e),t.moveCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("mouseup",(function(e){t.depressCallbacks.forEach((function(e){return e(t)})),t.populateFromMouseEvent(e)})),window.addEventListener("touchstart",(function(e){t.populateFromTouchEvent(e),t.pressCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("touchmove",(function(e){t.populateFromTouchEvent(e),t.moveCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("touchend",(function(e){t.depressCallbacks.forEach((function(e){return e(t)})),t.populateFromTouchEvent(e)}))}return Object.defineProperty(t.prototype,"dragVector",{get:function(){var t=this.pressedStartPos,e=t.x,r=t.y;return this.pressed?{x:this.x-e,y:this.y-r}:{x:0,y:0}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"dragDirection",{get:function(){var t=this.dragVector,e=t.x,r=t.y;return 0===e&&0===r?"none":Math.abs(e)>=Math.abs(r)?e<0?"left":"right":r<0?"up":"down"},enumerable:!0,configurable:!0}),t.prototype.onPress=function(t){this.pressCallbacks.push(t)},t.prototype.onDepress=function(t){this.depressCallbacks.push(t)},t.prototype.onMove=function(t){this.moveCallbacks.push(t)},t.prototype.populateFromMouseEvent=function(t){this.x=t.x,this.y=t.y;var e=this.pressed;this.pressed=1===t.buttons,this.pressed&&!e&&(this.pressedStartPos={x:this.x,y:this.y})},t.prototype.populateFromTouchEvent=function(t){var e=t.touches,r=this.pressed;if(0===e.length)this.pressed=!1;else{var n=e[0];this.x=n.clientX,this.y=n.clientY,this.pressed=!0,r||(this.pressedStartPos={x:this.x,y:this.y})}},t}()),v=function(){return(v=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},w=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],a=0,l=o.length;a<l;a++,i++)n[i]=o[a];return n},m=function(){function t(t){void 0===t&&(t={}),this.value=t.value||1,this.extend=t.extend||!1,this.map=t.map||[[]]}return t.fromLength=function(e,r){var n=void 0===r?{}:r,i=n.value;return new t({value:void 0===i?1:i,extend:!!n.orMore,map:[Object(h.d)(e,(function(){return!0}))]})},t.rotated=function(e,r){return void 0===r&&(r=1),new t(v(v({},e),{map:Object(h.e)(e.map,r)}))},Object.defineProperty(t.prototype,"extend",{get:function(){return this._extend&&this.linear},set:function(t){this._extend=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"map",{get:function(){return this._map},set:function(t){delete this._linear;var e=t.reduce((function(t,e){var r=e.length;return r>t?r:t}),0);this._map=t.map((function(t){return Object(h.d)(e,(function(e){return t[e]||!1}))}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"linear",{get:function(){return void 0!==this._linear?this._linear:(this._linear=1===this.map.length&&this.map[0].every((function(t){return t}))||this.map.every((function(t){return 1===t.length&&t[0]})),this._linear)},enumerable:!0,configurable:!0}),t.prototype.match=function(t,e,r){void 0===r&&(r=0);var n=[];if(r>3)return{rotation:r,matched:n,center:null};var i,o=!1;if(Object(h.e)(this.map,r).every((function(r,a){var l=t[a];return!!l&&r.every((function(t,r){if(!t)return!0;var a=l[r];if(!a)return!1;var c=a[e];return o||(i=c,o=!0),c===i&&(n.push(a),!0)}))}))){var a=this.centerPosition(r),l=a.row,c=a.col,s=t[l][c];return{rotation:r,matched:n,center:s}}return this.match(t,e,r+1)},t.prototype.screen=function(t,e){return void 0===e&&(e={row:0,col:0}),(e.row<0?this.map.slice(-1*e.row):w(Object(h.d)(e.row,(function(){return[]})),this.map)).map((function(t){return e.col<0?t.slice(-1*e.col):w(Object(h.d)(e.col,(function(){return!1})),t)})).reduce((function(e,r,n){var i=t[n];return w(e,r.reduce((function(t,e,r){var n=i&&i[r];return n&&e?w(t,[n]):t}),[]))}),[])},Object.defineProperty(t.prototype,"center",{get:function(){var t=Math.floor(this.map.length/2),e=this.map[t],r=Math.floor(e.length/2);return{mustMatch:e[r],row:t,col:r}},enumerable:!0,configurable:!0}),t.prototype.centerPosition=function(t){if(void 0===t&&(t=0),void 0===this._centerPosition){var e=this.map.reduce((function(t,e){return t+e.reduce((function(t,e){return e?t+1:t}),0)}),0),r=Math.floor(e/2),n=0;this._centerPosition=Object(h.b)(this.map,(function(t,e){return Object(h.b)(t,(function(t,i){if(t)return n===r?{row:e,col:i}:void(n+=1)}))}))}var i=this.map.length,o=this.map[0].length;return Object(h.f)(this._centerPosition,i,o,t)},t}(),b=m,x=function(){return[m.fromLength(3,{value:1}),m.fromLength(4,{value:2}),m.fromLength(5,{value:3}),m.fromLength(6,{value:4,orMore:!0}),new m({value:5,map:[[!0,!0,!0],[!0],[!0]]}),new m({value:6,map:[[!0,!0,!0],[!1,!0],[!1,!0]]}),new m({value:7,map:[[!0,!0],[!0,!0]]})]},S=function(){var t=function(e,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(e,r)};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),T=function(){return(T=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},O=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],a=0,l=o.length;a<l;a++,i++)n[i]=o[a];return n},C=function(){return{row:-1,col:-1,tile:null}},k=function(t){function e(e){var r=t.call(this,T(T({},e),{tileDefs:{red:{generator:function(t){var e=t.variant;return r.defaultNewTileOfType("red",e)}},orange:{generator:function(t){var e=t.variant;return r.defaultNewTileOfType("orange",e)}},purple:{generator:function(t){var e=t.variant;return r.defaultNewTileOfType("purple",e)}},green:{generator:function(t){var e=t.variant;return r.defaultNewTileOfType("green",e)}},blue:{generator:function(t){var e=t.variant;return r.defaultNewTileOfType("blue",e)}}}}))||this;r.dragStartCallbacks=[],r.dragEndCallbacks=[],r.dragCallbacks=[],r.dragOrigin=C(),r.swapOrigin=C(),r.swapTarget=C(),r.x=e.x||0,r.y=e.y||0;var n=e.width||50*r.colCount;return r.width=n-n%r.colCount,r.height=e.height||r.width,r.sensitivity=e.sensitivity||25,r.shapes=e.shapes||x(),r.applyNormalStyle=e.applyNormalStyle,r.applySelectedStyle=e.applySelectedStyle,r.applyTargetedStyle=e.applyTargetedStyle,r.applyMatchedStyle=e.applyMatchedStyle,r.matchAnimationMs=e.matchAnimationMs||250,g.onPress(r.runDragStartCallbacks.bind(r)),g.onDepress(r.runDragEndCallbacks.bind(r)),g.onMove(r.runDragCallbacks.bind(r)),r}return S(e,t),Object.defineProperty(e.prototype,"tileWidth",{get:function(){return this.width/this.colCount},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tileHeight",{get:function(){return this.height/this.rowCount},enumerable:!0,configurable:!0}),e.prototype.draw=function(t){var e=this,r=this.checkSettle(),n=this.startedSettlingAt?(new Date).getTime()-this.startedSettlingAt.getTime():0,i=n/100*this.tileHeight,o=n>100;o&&delete this.startedSettlingAt;var a=[];this.rows.forEach((function(n,l){n.forEach((function(n,c){var s=e.x+c*n.width,u=e.y+l*n.height;if(r&&!n.blank){var h={row:l,col:c},p=e.adjacentTile(h,"down");p.tile&&p.tile.blank&&(u+=i,o&&a.push([h,p]))}n.draw(t,s,u)}))})),a.forEach((function(t){var r=t[0],n=t[1];return e.swapTile(r,n)}))},e.prototype.update=function(){var t=this;if(this.spawnNewTiles(),!this.tilesWillDrop()){var e=this.matchShapes();if(e.length){var r=this.swapOrigin.tile,n=this.swapTarget.tile,i=O(e).sort((function(t,e){return t.shape.value>e.shape.value?-1:e.shape.value>t.shape.value?1:t.tiles.some((function(t){return t===n||t===r}))?-1:e.tiles.some((function(t){return t===n||t===r}))?1:0})),o=new Map;i.forEach((function(e){var i=e.tiles,a=e.shape,l=e.rotation;i.forEach((function(e){return t.explodeTile(e)}));var c=t.variantForShape(a,l);if(c){var s=i.find((function(t){return t===n||t===r}))||t.centerTile(i),u=o.get(s);o.set(s,O(u||[],[c]))}})),o.forEach((function(t,e){e.variant=t[0],e.matched=!1}))}}},e.prototype.centerTile=function(t){return t[Math.floor(t.length/2)]},e.prototype.spawnNewTiles=function(){var t=this;this.rows[0]=this.rows[0].map((function(e){return e.blank?t.newMundaneTile():e}))},e.prototype.tilesWillDrop=function(){return this.rows.slice(1).some((function(t){return t.some((function(t){return t.matched||t.blank}))}))},e.prototype.explodeTile=function(t){if(t.isMundane&&(t.matched=!0),!t.matched)switch(t.matched=!0,t.variant){case"horizontalClear":this.clearRow(this.findTile(t));break;case"verticalClear":this.clearCol(this.findTile(t));break;case"crossClear":this.clearCross(this.findTile(t));break;case"typeClear":this.clearType(t.type);break;case"bombClear":this.clearBomb(this.findTile(t))}},e.prototype.clearRow=function(t){var e=this,r=t.row;this.rows[r].forEach((function(t){return e.explodeTile(t)}))},e.prototype.clearCol=function(t){var e=this,r=t.col;this.rows.forEach((function(t){return e.explodeTile(t[r])}))},e.prototype.clearCross=function(t){var e=t.row,r=t.col;this.clearRow({row:e}),this.clearCol({col:r})},e.prototype.clearType=function(t){var e=this;this.tiles.forEach((function(r){r.type===t&&e.explodeTile(r)}))},e.prototype.clearBomb=function(t){var e=this,r=t.row,n=t.col,i=new b({map:[[!1,!1,!0],[!1,!0,!0,!0],[!0,!0,!0,!0,!0],[!1,!0,!0,!0],[!1,!1,!0]]}),o=i.center,a=r-o.row,l=n-o.col;i.screen(this.rows,{row:a,col:l}).forEach((function(t){return e.explodeTile(t)}))},e.prototype.checkSettle=function(){return this.tiles.some((function(t){return t.blank}))?(this.startedSettlingAt||(this.startedSettlingAt=new Date),!0):(delete this.startedSettlingAt,!1)},e.prototype.tileAt=function(t){if("row"in t){var e=t.row,r=t.col,n=this.rows[e][r];return n?{row:e,col:r,tile:n}:C()}var i=t.x-this.x,o=t.y-this.y;if(i>this.width||o>this.height)return C();var a=i/this.width,l=o/this.height,c=Math.floor(l*this.rowCount),s=Math.floor(a*this.colCount);return{row:c,col:s,tile:this.rows[c][s]}},e.prototype.findTile=function(t){return Object(h.b)(this.rows,(function(e,r){return Object(h.b)(e,(function(e,n){if(t===e)return{row:r,col:n,tile:e}}))}))||C()},e.prototype.tileCenter=function(t){var e=t.row,r=t.col,n=t.tile;return n?{x:this.x+r*n.height+n.height/2,y:this.y+e*n.width+n.width/2}:{x:-1,y:-1}},e.prototype.swapTile=function(t,e){"string"==typeof e?this.swapTileInDirection(t,e):this.swapTileWithTile(t,e)},e.prototype.onDragStart=function(t){var e=this.dragStartCallbacks.length;return this.dragStartCallbacks.push(t),e},e.prototype.removeDragStartListener=function(t){delete this.dragStartCallbacks[t]},e.prototype.onDragEnd=function(t){var e=this.dragEndCallbacks.length;return this.dragEndCallbacks.push(t),e},e.prototype.removeDragEndListener=function(t){delete this.dragEndCallbacks[t]},e.prototype.onDrag=function(t){var e=this.dragCallbacks.length;return this.dragCallbacks.push(t),e},e.prototype.removeDragListener=function(t){delete this.dragCallbacks[t]},e.prototype.adjacentSpace=function(t,e){var r="row"in t?t:this.tileAt(t),n=r.row,i=r.col;switch(e){case"up":return{row:n-1,col:i};case"down":return{row:n+1,col:i};case"left":return{row:n,col:i-1};case"right":return{row:n,col:i+1};default:return{row:n,col:i}}},e.prototype.adjacentTile=function(t,e){var r=this.adjacentSpace(t,e),n=r.row,i=r.col,o=this.rows[n]&&this.rows[n][i];return o?{row:n,col:i,tile:o}:C()},e.prototype.removeTile=function(t){t.blank=!0},e.prototype.matchShapes=function(){var t=this;return Object(h.d)(this.colCount).reduce((function(e,r){return t.shapes.forEach((function(n){t.rows.forEach((function(i,o){var a=t.rows.slice(o).map((function(t){return t.slice(r)})),l=n.match(a,"type"),c=l.rotation,s=l.matched,u=l.center;s.length>0&&e.push({shape:n,rotation:c,tiles:s,centerTile:u})}))})),e}),[])},e.prototype.defaultNewTileOfType=function(t,e){return new y({type:t,variant:e,color:{red:"red",orange:"orange",purple:"purple",green:"green",blue:"blue"}[t],width:this.tileWidth,height:this.tileHeight,applyNormalStyle:this.applyNormalStyle,applySelectedStyle:this.applySelectedStyle,applyTargetedStyle:this.applyTargetedStyle,applyMatchedStyle:this.applyMatchedStyle})},e.prototype.variantForShape=function(t,e){switch(t.value){case 2:return e%2==0?"verticalClear":"horizontalClear";case 3:case 4:return"typeClear";case 5:case 6:return"crossClear";case 7:return"bombClear";default:return""}},e.prototype.swapTileWithTile=function(t,e){var r=this.tileAt(t);if(r.tile){this.swapOrigin=r;var n=this.tileAt(e);n.tile&&(this.swapTarget=n,this.rows[n.row][n.col]=r.tile,this.rows[r.row][r.col]=n.tile)}},e.prototype.swapTileInDirection=function(t,e){var r=this.tileAt(t);if(r.tile){this.swapOrigin=r;var n=this.adjacentTile(r,e);n.tile&&(this.swapTarget=n,this.rows[n.row][n.col]=r.tile,this.rows[r.row][r.col]=n.tile)}},e.prototype.clearExistingDragFlags=function(){this.tiles.forEach((function(t){t.selected=!1,t.targeted=!1}))},e.prototype.setDragStartFlags=function(t){this.clearExistingDragFlags(),t.tile.selected=!0,t.tile.targeted=!0},e.prototype.setDragEndFlags=function(){this.clearExistingDragFlags()},e.prototype.setDragFlags=function(t,e){this.clearExistingDragFlags(),t.tile.selected=!0,e.tile.targeted=!0},e.prototype.runDragStartCallbacks=function(t){if(!this.checkSettle()){var e=t.x,r=t.y,n=this.tileAt({x:e,y:r});if(n.tile){this.dragOrigin=n,this.setDragStartFlags(this.dragOrigin);var i=Object(h.a)(t,this.tileCenter(n)),o=t.dragDirection,a=n;this.dragStartCallbacks.forEach((function(l){l({x:e,y:r,distance:i,direction:o,origin:n,destination:a,mouse:t})}))}}},e.prototype.runDragEndCallbacks=function(t){if(!this.checkSettle()){var e=this.dragOrigin;if(e.tile){var r=t.x,n=t.y,i=Object(h.a)(t,this.tileCenter(e)),o=i>this.sensitivity?this.adjacentTile(e,t.dragDirection):e,a=o.tile?o:e,l=t.dragDirection;this.setDragEndFlags(),this.dragEndCallbacks.forEach((function(o){o({x:r,y:n,distance:i,direction:l,origin:e,destination:a,mouse:t})})),this.dragOrigin=C()}}},e.prototype.runDragCallbacks=function(t){if(!this.checkSettle()){var e=this.dragOrigin;if(e.tile){var r=t.x,n=t.y;if(t.pressed){var i=Object(h.a)(t,this.tileCenter(e)),o=i>this.sensitivity?this.adjacentTile(e,t.dragDirection):e,a=o.tile?o:e,l=t.dragDirection;this.setDragFlags(e,a),this.dragCallbacks.forEach((function(o){o({x:r,y:n,distance:i,direction:l,origin:e,destination:a,mouse:t})}))}}}},e}(s.a);window.defaultShapes=x,window.addEventListener("DOMContentLoaded",(function(){var t=new k({width:Math.min(window.innerWidth,window.innerHeight,500),rowCount:9,colCount:9});t.onDragEnd((function(e){t.swapTile(e.origin,e.destination),t.matchShapes().length||t.swapTile(e.origin,e.destination)})),i(l,(function(e){t.draw(l),t.update()})),window.board=t}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmNlcm5zL3V0aWxpdGllcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVGlsZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQm9hcmQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWUvZ2FtZUxvb3AudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWUvY2FudmFzLnRzIiwid2VicGFjazovLy8uL3NyYy9jb25jZXJucy9kcmF3aW5nLnRzIiwid2VicGFjazovLy8uL3NyYy9nYW1lL0NhbnZhc1RpbGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWUvbW91c2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NoYXBlLnRzIiwid2VicGFjazovLy8uL3NyYy9nYW1lL0NhbnZhc0JvYXJkLnRzIiwid2VicGFjazovLy8uL3NyYy9nYW1lLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwicmFuZ2UiLCJtaW4iLCJtYXgiLCJtYXhBbmRPck1hcHBlciIsIm1hcHBlciIsInJlYWxNaW4iLCJkaWZmIiwibGlzdCIsIkFycmF5IiwicmFuZCIsImludCIsInJlYWxNYXgiLCJyYW5kb21EaWZmIiwiTWF0aCIsInJhbmRvbSIsImZsb29yIiwic2FtcGxlIiwibGVuZ3RoIiwiZGlzdGFuY2VCZXR3ZWVuIiwib3JpZ2luIiwiZGVzdGluYXRpb24iLCJkeCIsIngiLCJkeSIsInkiLCJzcXJ0Iiwicm90YXRlUG9pbnQiLCJjb29yZHMiLCJhcm91bmQiLCJyYWRpYW5zIiwicmVsYXRpdmUiLCJjb3NpbmUiLCJjb3MiLCJzaW5lIiwic2luIiwibmV3WSIsImlzTnVsbGlzaCIsInRvU3RyaW5nIiwiZmluZE1hcCIsInJlc3VsdCIsImZpbmQiLCJpdGVtIiwiaW5kZXgiLCJvcmlnaW5hbCIsInJvdGF0ZSIsImdyaWQiLCJyb3RhdGlvbnMiLCJxdWFkcmFudHMiLCJyZWR1Y2UiLCJtZW1vIiwicm93Iiwicm93SW5kZXgiLCJmb3JFYWNoIiwiY29sSW5kZXgiLCJuZXdSb3dJbmRleCIsIm5ld0NvbEluZGV4IiwicmV2ZXJzZSIsIm1hcCIsInJvdGF0ZUdyaWRQb3NpdGlvbiIsInJvd3MiLCJjb2xzIiwiY29sIiwiTVVOREFORV9WQVJJQU5UIiwidHlwZSIsInZhcmlhbnQiLCJleHBsb2RlIiwidGhpcyIsIl92YXJpYW50Iiwib3B0cyIsInJvd0NvdW50IiwiY29sQ291bnQiLCJ0aWxlQ2xhc3MiLCJhc3NpZ24iLCJ0aWxlRGVmcyIsIl9yb3dzIiwibmV3Um93cyIsInRpbGVzIiwia2V5cyIsIm5ld011bmRhbmVUaWxlIiwidGlsZVR5cGUiLCJ0aWxlVHlwZXMiLCJnZW5lcmF0b3IiLCJnYW1lTG9vcCIsImRyYXciLCJsb29wQ291bnQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjbGVhclJlY3QiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJjYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzdHJldGNoQ2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJhZGRFdmVudExpc3RlbmVyIiwiYm9keSIsImFwcGVuZENoaWxkIiwiZ2V0Q29udGV4dCIsImNvbnNvbGUiLCJlcnJvciIsImRyYXdEb3VibGVBcnJvdyIsImN0eCIsImRpciIsImZpbGxTdHlsZSIsInN0cm9rZVN0eWxlIiwiY2VudGVyIiwiaGVhZFdpZHRoIiwiaGVhZExlbmd0aCIsInRhaWxXaWR0aCIsInRhaWxMZW5ndGgiLCJ0YWlsQm90dG9tIiwidGFpbFRvcCIsInRhaWxMZWZ0IiwidGFpbFJpZ2h0IiwiaGVhZExlZnQiLCJoZWFkUmlnaHQiLCJ0b3BIZWFkQmFzZSIsInRvcEhlYWRUaXAiLCJib3R0b21IZWFkQmFzZSIsImJvdHRvbUhlYWRUaXAiLCJhbmdsZSIsInZlcnRpY2FsIiwiaG9yaXpvbnRhbCIsIlBJIiwicG9pbnRzIiwicm90YXRlZFBvaW50cyIsInB0IiwiYmVnaW5QYXRoIiwic3RhcnRQb2ludCIsIm1vdmVUbyIsImxpbmVUbyIsImNsb3NlUGF0aCIsImZpbGwiLCJzdHJva2UiLCJNQVhfQ09MT1JfSU5UIiwicGFyc2VJbnQiLCJjb2xvciIsInNlbGVjdGVkIiwidGFyZ2V0ZWQiLCJtYXRjaGVkQXQiLCJibGFuayIsIm1hdGNoQW5pbWF0aW9uTXMiLCJfaW1nVXJsIiwiaW1nVXJsIiwiYXBwbHlOb3JtYWxTdHlsZSIsImRlZmF1bHRBcHBseU5vcm1hbFN0eWxlIiwiYXBwbHlTZWxlY3RlZFN0eWxlIiwiZGVmYXVsdEFwcGx5U2VsZWN0ZWRTdHlsZSIsImFwcGx5VGFyZ2V0ZWRTdHlsZSIsImRlZmF1bHRBcHBseVRhcmdldGVkU3R5bGUiLCJhcHBseU1hdGNoZWRTdHlsZSIsImRlZmF1bHRBcHBseU1hdGNoZWRTdHlsZSIsIm1hdGNoZWQiLCJjbGVhclRpbWVvdXQiLCJibGFua1RpbWVvdXQiLCJEYXRlIiwic2V0VGltZW91dCIsIl9pbWFnZSIsImltYWdlIiwic3JjIiwidGlsZSIsImRyYXdJbWFnZSIsImZpbGxSZWN0IiwiYXJyb3dXaWR0aCIsImFycm93TGVuZ3RoIiwidGFpbEludGVyc2VjdGlvbldpZHRoIiwidGFpbEludGVyc2VjdGlvbkhlaWdodCIsIm5vcnRoVGFpbEJhc2UiLCJub3J0aFRhaWxUaXAiLCJzb3V0aFRhaWxCYXNlIiwic291dGhUYWlsVGlwIiwid2VzdFRhaWxCYXNlIiwid2VzdFRhaWxUaXAiLCJlYXN0VGFpbEJhc2UiLCJlYXN0VGFpbFRpcCIsIm5vcnRoSGVhZEJhc2UiLCJub3J0aEhlYWRUaXAiLCJzb3V0aEhlYWRCYXNlIiwic291dGhIZWFkVGlwIiwid2VzdEhlYWRCYXNlIiwid2VzdEhlYWRUaXAiLCJlYXN0SGVhZEJhc2UiLCJlYXN0SGVhZFRpcCIsImhvcml6b250YWxUYWlsVG9wIiwiaG9yaXpvbnRhbFRhaWxCb3R0b20iLCJ2ZXJ0aWNhbFRhaWxMZWZ0IiwidmVydGljYWxUYWlsUmlnaHQiLCJob3Jpem9udGFsSGVhZFRvcCIsImhvcml6b250YWxIZWFkQm90dG9tIiwidmVydGljYWxIZWFkTGVmdCIsInZlcnRpY2FsSGVhZFJpZ2h0IiwiZHJhd0Nyb3NzQXJyb3ciLCJnZXRUaW1lIiwiYm94V2lkdGgiLCJib3hIZWlnaHQiLCJtaWxsaXMiLCJwdWxzZU1zIiwic3Ryb2tlV2lkdGgiLCJtc1NpbmNlTWF0Y2giLCJwZXJjZW50RG9uZSIsIlRpbGUiLCJwcmVzc2VkIiwicHJlc3NDYWxsYmFja3MiLCJkZXByZXNzQ2FsbGJhY2tzIiwibW92ZUNhbGxiYWNrcyIsInByZXNzZWRTdGFydFBvcyIsImV2ZW50IiwicG9wdWxhdGVGcm9tTW91c2VFdmVudCIsImNhbGxiYWNrIiwicG9wdWxhdGVGcm9tVG91Y2hFdmVudCIsImFicyIsIm9uUHJlc3MiLCJwdXNoIiwib25EZXByZXNzIiwib25Nb3ZlIiwiYWxyZWFkeVByZXNzZWQiLCJidXR0b25zIiwidG91Y2hlcyIsInRvdWNoIiwiY2xpZW50WCIsImNsaWVudFkiLCJleHRlbmQiLCJmcm9tTGVuZ3RoIiwiU2hhcGUiLCJvck1vcmUiLCJyb3RhdGVkIiwic2hhcGUiLCJfZXh0ZW5kIiwibGluZWFyIiwiX21hcCIsIl9saW5lYXIiLCJyb3dMZW5ndGgiLCJldmVyeSIsInNwYWNlIiwibWF0Y2giLCJmaWVsZCIsInJvdGF0aW9uIiwibWF0Y2hWYWx1ZSIsIm1hdGNoVmFsdWVTZXQiLCJtYXRjaGVyUm93IiwiZ3JpZFJvdyIsIm11c3RNYXRjaCIsImdyaWRJdGVtIiwiZ3JpZFZhbHVlIiwic2NyZWVuIiwib2Zmc2V0Iiwic2xpY2UiLCJhbGxNYXRjaGVkVGlsZXMiLCJtYXRjaGVkUm93VGlsZXMiLCJtYXBSb3ciLCJjZW50ZXJQb3NpdGlvbiIsIl9jZW50ZXJQb3NpdGlvbiIsIm11c3RNYXRjaENvdW50IiwidG90YWwiLCJzdW0iLCJkZWZhdWx0U2hhcGVzIiwiYmxhbmtDYW52YXNUaWxlSW5mbyIsInJlZCIsImRlZmF1bHROZXdUaWxlT2ZUeXBlIiwib3JhbmdlIiwicHVycGxlIiwiZ3JlZW4iLCJibHVlIiwiZHJhZ1N0YXJ0Q2FsbGJhY2tzIiwiZHJhZ0VuZENhbGxiYWNrcyIsImRyYWdDYWxsYmFja3MiLCJkcmFnT3JpZ2luIiwic3dhcE9yaWdpbiIsInN3YXBUYXJnZXQiLCJyYXdXaWR0aCIsInNlbnNpdGl2aXR5Iiwic2hhcGVzIiwicnVuRHJhZ1N0YXJ0Q2FsbGJhY2tzIiwicnVuRHJhZ0VuZENhbGxiYWNrcyIsInJ1bkRyYWdDYWxsYmFja3MiLCJzZXR0bGluZyIsImNoZWNrU2V0dGxlIiwibXNTaW5jZVNldHRsZSIsInN0YXJ0ZWRTZXR0bGluZ0F0IiwidGlsZUhlaWdodCIsIml0c1N3YXBUaW1lQnJ1aCIsInRpbGVzVG9Td2FwIiwidGlsZUluZGV4IiwicG9zaXRpb24iLCJiZWxvdyIsImFkamFjZW50VGlsZSIsInN3YXBUaWxlIiwidXBkYXRlIiwic3Bhd25OZXdUaWxlcyIsInRpbGVzV2lsbERyb3AiLCJtYXRjaGVkU2hhcGVzIiwibWF0Y2hTaGFwZXMiLCJvcmlnaW5UaWxlIiwidGFyZ2V0VGlsZSIsInNvcnRlZE1hdGNoZWRTaGFwZXMiLCJzb3J0IiwiYSIsImIiLCJzb21lIiwidHJhbnNjZW5kZW50VGlsZXMiLCJNYXAiLCJleHBsb2RlVGlsZSIsInZhcmlhbnRGb3JTaGFwZSIsInRyYW5zY2VuZGVudCIsImNlbnRlclRpbGUiLCJleGlzdGluZyIsInNldCIsInZhcmlhbnRzIiwiaXNNdW5kYW5lIiwiY2xlYXJSb3ciLCJmaW5kVGlsZSIsImNsZWFyQ29sIiwiY2xlYXJDcm9zcyIsImNsZWFyVHlwZSIsImNsZWFyQm9tYiIsImJvbWJTaGFwZSIsImJvbWJUb3AiLCJib21iTGVmdCIsInRpbGVBdCIsInBvcyIsImZyYWN0aW9uWCIsImZyYWN0aW9uWSIsInRhcmdldCIsInJvd1RpbGVzIiwidGlsZUNlbnRlciIsInRpbGVJbmZvIiwiZnJvbSIsInRvIiwic3dhcFRpbGVJbkRpcmVjdGlvbiIsInN3YXBUaWxlV2l0aFRpbGUiLCJvbkRyYWdTdGFydCIsInJlbW92ZURyYWdTdGFydExpc3RlbmVyIiwiaWQiLCJvbkRyYWdFbmQiLCJyZW1vdmVEcmFnRW5kTGlzdGVuZXIiLCJvbkRyYWciLCJyZW1vdmVEcmFnTGlzdGVuZXIiLCJhZGphY2VudFNwYWNlIiwiZGlyZWN0aW9uIiwicmVtb3ZlVGlsZSIsIl9yb3ciLCJuZXdHcmlkIiwidGlsZVdpZHRoIiwiY2xlYXJFeGlzdGluZ0RyYWdGbGFncyIsInNldERyYWdTdGFydEZsYWdzIiwic2V0RHJhZ0VuZEZsYWdzIiwic2V0RHJhZ0ZsYWdzIiwibW91c2UiLCJkaXN0YW5jZSIsImRyYWdEaXJlY3Rpb24iLCJCb2FyZCIsImJvYXJkIiwiX2xvb3BDb3VudCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPckIsRUFBb0JVLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ6QixFQUFvQjZCLEVBQUksU0FBUzFCLEdBQ2hDLElBQUlTLEVBQVNULEdBQVVBLEVBQU9xQixXQUM3QixXQUF3QixPQUFPckIsRUFBZ0IsU0FDL0MsV0FBOEIsT0FBT0EsR0FFdEMsT0FEQUgsRUFBb0JVLEVBQUVFLEVBQVEsSUFBS0EsR0FDNUJBLEdBSVJaLEVBQW9CYSxFQUFJLFNBQVNpQixFQUFRQyxHQUFZLE9BQU9qQixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUt1QixFQUFRQyxJQUd6Ry9CLEVBQW9Ca0MsRUFBSSxHQUlqQmxDLEVBQW9CQSxFQUFvQm1DLEVBQUksRywyZUM1RTlDLFNBQVNDLEVBQVNDLEcsSUFBYSx3REFNcEMsSUFMQSxJQUFNQyxFQUFtQyxpQkFBdEJDLEVBQWUsR0FBa0JBLEVBQWUsR0FBSyxFQUNsRUMsRUFBc0MsbUJBQXRCRCxFQUFlLEdBQW9CQSxFQUFlLEdBQUtBLEVBQWUsR0FDdEYsa0JBQUNFLEVBQUEsS0FDREMsRUFEVSxLQUNPRCxFQUNqQkUsRUFBT0MsTUFBTUYsR0FDVnRDLEVBQUksRUFBR0EsRUFBSXNDLEVBQU10QyxJQUFLdUMsRUFBS3ZDLEdBQUtvQyxFQUFTQSxFQUFPcEMsRUFBSXFDLEdBQVdyQyxFQUFJcUMsRUFDNUUsT0FBT0UsRUFHRixJQUFNRSxFQUFPLFNBQUNSLEVBQWFDLEVBQVNRLFFBQVQsSUFBQVIsTUFBQSxRQUFTLElBQUFRLE9BQUEsR0FDbkMsc0JBQUNMLEVBQUEsS0FBU00sRUFBQSxLQUNWQyxFQUFhQyxLQUFLQyxVQUFZSCxFQUFVTixHQUM5QyxPQUFPQSxHQUFXSyxFQUFNRyxLQUFLRSxNQUFNSCxHQUFjQSxJQWdDdENJLEVBQVMsU0FBZ0JULEdBQ3BDLE9BQU9BLEVBQUtNLEtBQUtFLE1BQU1GLEtBQUtDLFNBQVdQLEVBQUtVLFVBR2pDQyxFQUFrQixTQUFDQyxFQUF1QkMsR0FDckQsSUFBTUMsRUFBS0QsRUFBWUUsRUFBSUgsRUFBT0csRUFDNUJDLEVBQUtILEVBQVlJLEVBQUlMLEVBQU9LLEVBQ2xDLE9BQU9YLEtBQUtZLEtBQU0sU0FBQUosRUFBTSxHQUFNLFNBQUFFLEVBQU0sS0FHekJHLEVBQWMsU0FBQ0MsRUFBdUJDLEVBQXVCQyxHQUN4RSxJQUFNQyxFQUFnQkgsRUFBT0wsRUFBSU0sRUFBT04sRUFBbENRLEVBQXdDSCxFQUFPSCxFQUFJSSxFQUFPSixFQUMxRE8sRUFBU2xCLEtBQUttQixJQUFJSCxHQUNsQkksRUFBT3BCLEtBQUtxQixJQUFJTCxHQUVoQk0sRUFBUUwsRUFBYUcsRUFBU0gsRUFBYUMsRUFDakQsTUFBTyxDQUFFVCxFQUZLUSxFQUFhQyxFQUFXRCxFQUFhRyxFQUVoQ0wsRUFBT04sRUFBR0UsRUFBR1csRUFBT1AsRUFBT0osSUFHekMsU0FBU1ksRUFBVW5ELEdBQ3hCLFlBQXdCLElBQVZBLEdBQW1FLGtCQUExQ1AsT0FBT2tCLFVBQVV5QyxTQUFTbEUsS0FBS2MsR0FHakUsSUFPTXFELEVBQVUsU0FBTy9CLEVBQVdILEdBQ3ZDLElBQUltQyxFQUtKLE9BSkFoQyxFQUFLaUMsTUFBSyxTQUFDQyxFQUFNQyxFQUFPQyxHQUV0QixPQUFRUCxFQURSRyxFQUFTbkMsRUFBT3FDLEVBQU1DLEVBQU9DLE9BR3hCSixHQXdCSUssRUFBUyxTQUFJQyxFQUFhQyxRQUFBLElBQUFBLE1BQUEsR0FDckMsSUFBTUMsRUFBWUQsRUFBWSxFQUM5QixPQUFRQyxFQUFZLEVBQUksRUFBSUEsRUFBWUEsR0FDdEMsS0FBSyxFQUNILE9BQU9GLEVBQUtHLFFBQU8sU0FBQ0MsRUFBTUMsRUFBS0MsR0FPN0IsT0FOQUQsRUFBSUUsU0FBUSxTQUFDWCxFQUFNWSxHQUNqQixJQUFNQyxFQUFjRCxFQUNkRSxFQUFjVixFQUFLNUIsT0FBU2tDLEVBQVcsRUFDN0NGLEVBQUtLLEdBQWVMLEVBQUtLLElBQWdCLEdBQ3pDTCxFQUFLSyxHQUFhQyxHQUFlZCxLQUU1QlEsSUFDTixJQUVMLEtBQUssRUFBRyxPQUFPLEVBQUlKLEdBQU1XLFVBQVVDLEtBQUksU0FBQVAsR0FBTyxTQUFJQSxHQUFLTSxhQUN2RCxLQUFLLEVBQ0gsT0FBT1gsRUFBS0csUUFBTyxTQUFDQyxFQUFNQyxFQUFLQyxHQU83QixPQU5BRCxFQUFJRSxTQUFRLFNBQUNYLEVBQU1ZLEdBQ2pCLElBQU1DLEVBQWNKLEVBQUlqQyxPQUFTb0MsRUFBVyxFQUN0Q0UsRUFBY0osRUFDcEJGLEVBQUtLLEdBQWVMLEVBQUtLLElBQWdCLEdBQ3pDTCxFQUFLSyxHQUFhQyxHQUFlZCxLQUU1QlEsSUFDTixJQUVMLFFBQVMsT0FBT0osRUFBS1ksS0FBSSxTQUFBUCxHQUFPLFNBQUlBLFFBSTNCUSxFQUFxQixTQUFDLEVBQTRCQyxFQUFjQyxFQUFjZCxHLElBQXRESSxFQUFBLEVBQUFBLElBQUtXLEVBQUEsRUFBQUEsSUFDbENkLEVBQVlELEVBQVksRUFDOUIsT0FBUUMsRUFBWSxFQUFJLEVBQUlBLEVBQVlBLEdBQ3RDLEtBQUssRUFBRyxNQUFPLENBQUVHLElBQUtXLEVBQUtBLElBQUtGLEVBQU9ULEVBQU0sR0FDN0MsS0FBSyxFQUFHLE1BQU8sQ0FBRUEsSUFBS1MsRUFBT1QsRUFBTSxFQUFHVyxJQUFLRCxFQUFPQyxFQUFNLEdBQ3hELEtBQUssRUFBRyxNQUFPLENBQUVYLElBQUtVLEVBQU9DLEVBQU0sRUFBR0EsSUFBS1gsR0FDM0MsUUFBUyxNQUFPLENBQUVBLElBQUcsRUFBRVcsSUFBRyxNLDZCQ2pKOUIsSUFBTUMsRUFBa0IsVUFFeEIsYUFNRSxXQUFZLEcsSUFBRUMsRUFBQSxFQUFBQSxLQUFNOUUsRUFBQSxFQUFBQSxNQUFPK0UsRUFBQSxFQUFBQSxRQUhwQixLQUFBQyxTQUFVLEVBSWZDLEtBQUtILEtBQU9BLEVBQ1pHLEtBQUtqRixNQUFRQSxHQUFTLEVBQ3RCaUYsS0FBS0MsU0FBV0gsR0FBV0YsRUFPL0IsT0FKRSxzQkFBSSxzQkFBTyxDLElBQ1gsV0FBd0IsT0FBT0ksS0FBS0MsVUFBWUwsRyxJQURoRCxTQUFZRSxHQUFtQkUsS0FBS0MsU0FBV0gsR0FBV0YsRyxnQ0FHMUQsc0JBQUksd0JBQVMsQyxJQUFiLFdBQTJCLE9BQU9JLEtBQUtGLFVBQVlGLEcsZ0NBQ3JELEVBaEJBLEcsOE9DaURBLGFBT0UsV0FBWU0sR0FOTCxLQUFBQyxTQUFXLEVBQ1gsS0FBQUMsU0FBVyxFQUNYLEtBQUFDLFVBQVksSUFLakI3RixPQUFPOEYsT0FBT04sS0FBTUUsR0FDcEJGLEtBQUtPLFNBQVdMLEVBQUtLLFNBd0V6QixPQXJFRSxzQkFBSSxtQkFBSSxDLElBQVIsV0FFRSxPQURBUCxLQUFLUSxNQUFRUixLQUFLUSxPQUFTUixLQUFLUyxVQUN6QlQsS0FBS1EsTyxJQUdkLFNBQVNmLEdBQ1BPLEtBQUtRLE1BQVFmLEcsZ0NBR2Ysc0JBQUksb0JBQUssQyxJQUFULFdBQ0UsT0FBT08sS0FBS1AsS0FBS1gsUUFBTyxTQUFDNEIsRUFBTzFCLEdBQVEsU0FBSTBCLEVBQVUxQixLQUFNLEssZ0NBRzlELHNCQUFJLHdCQUFTLEMsSUFBYixXQUNFLE9BQU94RSxPQUFPbUcsS0FBS1gsS0FBS08sVyxnQ0F1QzFCLFlBQUFLLGVBQUEsV0FDRSxJQUFNQyxFQUFXLFlBQU9iLEtBQUtjLFdBRTdCLE9BRGdCZCxLQUFLTyxTQUFTTSxHQUNmRSxVQUFVLENBQUVqQixRQUFTLGFBR3RDLFlBQUFXLFFBQUEsc0JBQ0UsT0FBTyxZQUFNVCxLQUFLRyxVQUFVLFdBQU0sT0FBQyxXQUFELENBQU8sRUFBS0MsVUFBVSxXQUFNLFNBQUtRLHdCQVN2RSxFQWpGQSxHLDRDQ3JEQSxJQUFNSSxFQUFXLFNBQUM3RyxFQUE2QjhHLEVBQW1DQyxRQUFBLElBQUFBLE1BQUEsR0FDaEZDLHVCQUFzQixXQUFNLE9BQUFILEVBQVM3RyxFQUFHOEcsRUFBTUMsRUFBWSxNQUMxRC9HLEVBQUVpSCxVQUFVLEVBQUcsRUFBR0MsT0FBT0MsV0FBWUQsT0FBT0UsYUFDNUNOLEVBQUtDLElBR1EsSUNOVE0sRUFBU0MsU0FBU0MsY0FBYyxVQUVoQ0MsRUFBZ0IsV0FDcEJILEVBQU9JLE1BQVFQLE9BQU9DLFdBQ3RCRSxFQUFPSyxPQUFTUixPQUFPRSxhQUd6QkksSUFDQU4sT0FBT1MsaUJBQWlCLFNBQVVILEdBQ2xDRixTQUFTTSxLQUFLQyxZQUFZUixHQUUxQixJQUFNLEVBQU1BLEVBQU9TLFdBQVcsTUFDekIsR0FBS0MsUUFBUUMsTUFBTSx5Q0FHVCxJLHVCQzBDRkMsRUFBa0IsU0FDN0JDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FiLEVBQ0E3RSxHQUVBLElBQU0yRixFQUFvQixFQUFSZCxFQUNaZSxFQUFhLElBQU9ELEVBQ3BCRSxFQUFZaEIsRUFDWmlCLEVBQWE5RixFQUF1QixFQUFiNEYsRUFDdkJHLEVBQWFMLEVBQU9uRixFQUFLdUYsRUFBYSxFQUN0Q0UsRUFBVUQsRUFBYUQsRUFDdkJHLEVBQVdQLEVBQU9yRixFQUFLd0YsRUFBWSxFQUNuQ0ssRUFBWVIsRUFBT3JGLEVBQUt3RixFQUFZLEVBQ3BDTSxFQUFXVCxFQUFPckYsRUFBS3NGLEVBQVksRUFDbkNTLEVBQVlWLEVBQU9yRixFQUFLc0YsRUFBWSxFQUNwQ1UsRUFBY0wsRUFDZE0sRUFBYUQsRUFBY1QsRUFDM0JXLEVBQWlCUixFQUNqQlMsRUFBZ0JELEVBQWlCWCxFQUVqQ2EsRUFBUSxDQUNaQyxTQUFVLEVBQ1ZDLFdBQVksR0FBTS9HLEtBQUtnSCxJQUN2QnJCLEdBRUlzQixFQUFTLENBQ2IsQ0FBRXhHLEVBQUc0RixFQUFVMUYsRUFBR3lGLEdBQ2xCLENBQUUzRixFQUFHNEYsRUFBVTFGLEVBQUd3RixHQUNsQixDQUFFMUYsRUFBRzhGLEVBQVU1RixFQUFHZ0csR0FDbEIsQ0FBRWxHLEVBQUdxRixFQUFPckYsRUFBR0UsRUFBR2lHLEdBQ2xCLENBQUVuRyxFQUFHK0YsRUFBVzdGLEVBQUdnRyxHQUNuQixDQUFFbEcsRUFBRzZGLEVBQVczRixFQUFHd0YsR0FDbkIsQ0FBRTFGLEVBQUc2RixFQUFXM0YsRUFBR3lGLEdBQ25CLENBQUUzRixFQUFHK0YsRUFBVzdGLEVBQUc4RixHQUNuQixDQUFFaEcsRUFBR3FGLEVBQU9yRixFQUFHRSxFQUFHK0YsR0FDbEIsQ0FBRWpHLEVBQUc4RixFQUFVNUYsRUFBRzhGLElBR2RTLEVBQWdCTCxFQUFRSSxFQUFPckUsS0FBSSxTQUFBdUUsR0FBTSxtQkFBWUEsRUFBSXJCLEVBQVFlLE1BQVVJLEVBRWpGdkIsRUFBSUUsVUFBWUEsRUFDaEJGLEVBQUlHLFlBQWNBLEVBQ2xCSCxFQUFJMEIsWUFDSixJQUFNQyxFQUFhSCxFQUFjLEdBQ2pDeEIsRUFBSTRCLE9BQU9ELEVBQVc1RyxFQUFHNEcsRUFBVzFHLEdBQ3BDdUcsRUFBYzNFLFNBQVEsU0FBQyxHLElBQUU5QixFQUFBLEVBQUFBLEVBQUdFLEVBQUEsRUFBQUEsRUFBUSxPQUFBK0UsRUFBSTZCLE9BQU85RyxFQUFHRSxNQUNsRCtFLEVBQUk2QixPQUFPRixFQUFXNUcsRUFBRzRHLEVBQVcxRyxHQUNwQytFLEVBQUk4QixZQUNKOUIsRUFBSStCLE9BQ0E1QixHQUFhSCxFQUFJZ0MsVSxvVEMxR2pCQyxFQUFnQkMsU0FBUyxTQUFVLEksRUFFekMsWUFpQkUsV0FBWXJFLEdBQVosTUFDRSxZQUFNQSxJQUFLLEssT0FqQk4sRUFBQTBCLE1BQVEsR0FDUixFQUFBQyxPQUFTLEdBQ1QsRUFBQTJDLE1BQVEsUUFDUixFQUFBQyxVQUFXLEVBQ1gsRUFBQUMsVUFBVyxFQUNYLEVBQUFDLFVBQVksS0FDWixFQUFBQyxPQUFRLEVBQ1IsRUFBQUMsaUJBQW1CLElBS2xCLEVBQUFDLFFBQVUsR0FPaEIsRUFBS2xELE1BQVExQixFQUFLMEIsT0FBUyxFQUFLQSxNQUNoQyxFQUFLQyxPQUFTM0IsRUFBSzJCLFFBQVUsRUFBS0EsT0FDbEMsRUFBSzJDLE1BQVF0RSxFQUFLc0UsT0FBUyxFQUFLQSxNQUNoQyxFQUFLSSxNQUFRMUUsRUFBSzBFLE9BQVMsRUFBS0EsTUFDaEMsRUFBS0MsaUJBQW1CM0UsRUFBSzJFLGtCQUFvQixFQUFLQSxpQkFDdEQsRUFBS0MsUUFBVTVFLEVBQUs2RSxRQUFVLEVBQUtELFFBQ25DLEVBQUtFLGlCQUFtQjlFLEVBQUs4RSxrQkFBb0IsRUFBS0Msd0JBQ3RELEVBQUtDLG1CQUFxQmhGLEVBQUtnRixvQkFBc0IsRUFBS0MsMEJBQzFELEVBQUtDLG1CQUFxQmxGLEVBQUtrRixvQkFBc0IsRUFBS0MsMEJBQzFELEVBQUtDLGtCQUFvQnBGLEVBQUtvRixtQkFBcUIsRUFBS0MseUIsRUFzSDVELE9Bbkp3QyxPQWdDdEMsc0JBQUksc0JBQU8sQyxJQUFYLFdBQ0UsUUFBU3ZGLEtBQUsyRSxXLElBR2hCLFNBQVlhLEdBQVosV0FDTUEsR0FBV3hGLEtBQUsyRSxZQUVwQmMsYUFBYXpGLEtBQUswRixjQUNkRixHQUNGeEYsS0FBSzJFLFVBQVksSUFBSWdCLEtBQ3JCM0YsS0FBSzBGLGFBQWVyRSxPQUFPdUUsWUFBVyxXQUFNLFNBQUtoQixPQUFRLElBQU01RSxLQUFLNkUsbUJBRXBFN0UsS0FBSzJFLFVBQVksTyxnQ0FJckIsc0JBQUkscUJBQU0sQyxJQUFWLFdBQ0UsT0FBTzNFLEtBQUs4RSxTLElBR2QsU0FBV0MsR0FDVC9FLEtBQUs4RSxRQUFVQyxTQUNSL0UsS0FBSzZGLFEsZ0NBR2Qsc0JBQUksb0JBQUssQyxJQUFULFdBQ0UsR0FBSTdGLEtBQUs2RixPQUFRLE9BQU83RixLQUFLOEYsTUFDN0IsSUFBSzlGLEtBQUsrRSxPQUFRLE9BQU8sS0FFekIsSUFBTWUsRUFBUXJFLFNBQVNDLGNBQWMsT0FNckMsT0FMQW9FLEVBQU1DLElBQU0vRixLQUFLK0UsT0FDakJlLEVBQU1sRSxNQUFRNUIsS0FBSzRCLE1BQ25Ca0UsRUFBTWpFLE9BQVM3QixLQUFLNkIsT0FDcEI3QixLQUFLNkYsT0FBU0MsRUFFUDlGLEtBQUs2RixRLGdDQUdkLFlBQUE1RSxLQUFBLFNBQUtvQixFQUErQmpGLEVBQVdFLEdBQ3pDMEMsS0FBSzRFLFFBRVQ1RSxLQUFLZ0YsaUJBQWlCM0MsRUFBS3JDLEtBQU0sQ0FBRTVDLEVBQUMsRUFBRUUsRUFBQyxJQUNuQzBDLEtBQUt3RixRQUNQeEYsS0FBS3NGLGtCQUFrQmpELEVBQUtyQyxLQUFNLENBQUU1QyxFQUFDLEVBQUVFLEVBQUMsSUFDL0IwQyxLQUFLeUUsU0FDZHpFLEtBQUtrRixtQkFBbUI3QyxFQUFLckMsS0FBTSxDQUFFNUMsRUFBQyxFQUFFRSxFQUFDLElBQ2hDMEMsS0FBSzBFLFVBQ2QxRSxLQUFLb0YsbUJBQW1CL0MsRUFBS3JDLEtBQU0sQ0FBRTVDLEVBQUMsRUFBRUUsRUFBQyxNQUlyQyxZQUFBMkgsd0JBQVIsU0FBZ0M1QyxFQUErQjJELEVBQWtCLEcsSUFBRTVJLEVBQUEsRUFBQUEsRUFBR0UsRUFBQSxFQUFBQSxFQUM1RXNFLEVBQUEsRUFBQUEsTUFBT0MsRUFBQSxFQUFBQSxPQUFRaUUsRUFBQSxFQUFBQSxNQUFPdEIsRUFBQSxFQUFBQSxNQUFPMUUsRUFBQSxFQUFBQSxRQUVqQ2dHLEVBQ0Z6RCxFQUFJNEQsVUFBVUgsRUFBTzFJLEVBQUdFLElBRXhCK0UsRUFBSUUsVUFBWWlDLEVBQ2hCbkMsRUFBSTZELFNBQVM5SSxFQUFHRSxFQUFHc0UsRUFBT0MsSUFHNUIsSUFBTVksRUFBUyxDQUFFckYsRUFBR0EsRUFBS3lFLEVBQVMsRUFBSXZFLEVBQUdBLEVBQUtzRSxFQUFRLEdBQ2hEdUUsRUFBYXZFLEVBQVEsRUFDckJ3RSxFQUFjLEdBQU12RSxFQUMxQixPQUFRL0IsR0FDTixJQUFLLGtCQUFtQnNDLEVBQWdCQyxFQUFLLGFBQWMsUUFBUyxRQUFTSSxFQUFRMEQsRUFBWUMsR0FBYyxNQUMvRyxJQUFLLGdCQUFpQmhFLEVBQWdCQyxFQUFLLFdBQVksUUFBUyxRQUFTSSxFQUFRMEQsRUFBWUMsR0FBYyxNQUMzRyxJQUFLLGNEUW1CLFNBQzVCL0QsRUFDQUUsRUFDQUMsRUFDQUMsRUFDQWIsRUFDQTdFLEdBRUEsSUFBTTJGLEVBQW9CLEVBQVJkLEVBQ1plLEVBQWEsSUFBT0QsRUFFcEIyRCxFQURZekUsRUFFWjBFLEVBQXlCRCxFQUN6QnhELEVBQWE5RixFQUF1QixFQUFiNEYsRUFBa0IwRCxFQUV6Q0UsRUFBZ0I5RCxFQUFPbkYsRUFBS2dKLEVBQXlCLEVBQ3JERSxFQUFlRCxFQUFnQjFELEVBQy9CNEQsRUFBZ0JoRSxFQUFPbkYsRUFBS2dKLEVBQXlCLEVBQ3JESSxFQUFlRCxFQUFnQjVELEVBQy9COEQsRUFBZWxFLEVBQU9yRixFQUFLaUosRUFBd0IsRUFDbkRPLEVBQWNELEVBQWU5RCxFQUM3QmdFLEVBQWVwRSxFQUFPckYsRUFBS2lKLEVBQXdCLEVBQ25EUyxFQUFjRCxFQUFlaEUsRUFFN0JrRSxFQUFnQlAsRUFDaEJRLEVBQWVELEVBQWdCcEUsRUFDL0JzRSxFQUFnQlAsRUFDaEJRLEVBQWVELEVBQWdCdEUsRUFDL0J3RSxFQUFlUCxFQUNmUSxFQUFjRCxFQUFleEUsRUFDN0IwRSxFQUFlUCxFQUNmUSxFQUFjRCxFQUFlMUUsRUFFN0I0RSxFQUFvQmhCLEVBQ3BCaUIsRUFBdUJmLEVBQ3ZCZ0IsRUFBbUJkLEVBQ25CZSxFQUFvQmIsRUFDcEJjLEVBQW9CbEYsRUFBT25GLEVBQUtvRixFQUFZLEVBQzVDa0YsRUFBdUJuRixFQUFPbkYsRUFBS29GLEVBQVksRUFDL0NtRixFQUFtQnBGLEVBQU9yRixFQUFLc0YsRUFBWSxFQUMzQ29GLEVBQW9CckYsRUFBT3JGLEVBQUtzRixFQUFZLEVBRTVDa0IsRUFBUyxDQUNiLENBQUV4RyxFQUFHcUssRUFBa0JuSyxFQUFHa0osR0FDMUIsQ0FBRXBKLEVBQUdxSyxFQUFrQm5LLEVBQUdpSixHQUMxQixDQUFFbkosRUFBR3dKLEVBQWF0SixFQUFHaUssR0FFckIsQ0FBRW5LLEVBQUcrSixFQUFjN0osRUFBR3FLLEdBQ3RCLENBQUV2SyxFQUFHZ0ssRUFBYTlKLEVBQUdtRixFQUFPbkYsR0FDNUIsQ0FBRUYsRUFBRytKLEVBQWM3SixFQUFHc0ssR0FFdEIsQ0FBRXhLLEVBQUd3SixFQUFhdEosRUFBR2tLLEdBQ3JCLENBQUVwSyxFQUFHdUosRUFBY3JKLEVBQUdrSyxHQUN0QixDQUFFcEssRUFBR3FLLEVBQWtCbkssRUFBR29KLEdBRTFCLENBQUV0SixFQUFHeUssRUFBa0J2SyxFQUFHMkosR0FDMUIsQ0FBRTdKLEVBQUdxRixFQUFPckYsRUFBR0UsRUFBRzRKLEdBQ2xCLENBQUU5SixFQUFHMEssRUFBbUJ4SyxFQUFHMkosR0FFM0IsQ0FBRTdKLEVBQUdzSyxFQUFtQnBLLEVBQUdvSixHQUMzQixDQUFFdEosRUFBR3NLLEVBQW1CcEssRUFBR21KLEdBQzNCLENBQUVySixFQUFHMEosRUFBYXhKLEVBQUdrSyxHQUVyQixDQUFFcEssRUFBR2lLLEVBQWMvSixFQUFHc0ssR0FDdEIsQ0FBRXhLLEVBQUdrSyxFQUFhaEssRUFBR21GLEVBQU9uRixHQUM1QixDQUFFRixFQUFHaUssRUFBYy9KLEVBQUdxSyxHQUV0QixDQUFFdkssRUFBRzBKLEVBQWF4SixFQUFHaUssR0FDckIsQ0FBRW5LLEVBQUd5SixFQUFjdkosRUFBR2lLLEdBQ3RCLENBQUVuSyxFQUFHc0ssRUFBbUJwSyxFQUFHa0osR0FFM0IsQ0FBRXBKLEVBQUcwSyxFQUFtQnhLLEVBQUd5SixHQUMzQixDQUFFM0osRUFBR3FGLEVBQU9yRixFQUFHRSxFQUFHMEosR0FDbEIsQ0FBRTVKLEVBQUd5SyxFQUFrQnZLLEVBQUd5SixJQUc1QjFFLEVBQUlFLFVBQVlBLEVBQ2hCRixFQUFJRyxZQUFjQSxFQUNsQkgsRUFBSTBCLFlBQ0osSUFBTUMsRUFBYUosRUFBTyxHQUMxQnZCLEVBQUk0QixPQUFPRCxFQUFXNUcsRUFBRzRHLEVBQVcxRyxHQUNwQ3NHLEVBQU8xRSxTQUFRLFNBQUMsRyxJQUFFOUIsRUFBQSxFQUFBQSxFQUFHRSxFQUFBLEVBQUFBLEVBQVEsT0FBQStFLEVBQUk2QixPQUFPOUcsRUFBR0UsTUFDM0MrRSxFQUFJNkIsT0FBT0YsRUFBVzVHLEVBQUc0RyxFQUFXMUcsR0FDcEMrRSxFQUFJOEIsWUFDSjlCLEVBQUkrQixPQUNBNUIsR0FBYUgsRUFBSWdDLFNDN0ZFMEQsQ0FBZTFGLEVBQUssUUFBUyxRQUFTSSxFQUFRMEQsRUFBWUMsR0FBYyxNQUMzRixJQUFLLFlBQ0gvRCxFQUFJRSxVQUFZLE1BQU0sSUFBSW9ELE1BQU9xQyxVQUFZLEdBQU0xRCxHQUFlbkcsU0FBUyxJQUMzRWtFLEVBQUk2RCxTQUFTOUksRUFBR0UsRUFBR3NFLEVBQU9DLEdBQzFCLE1BRUYsSUFBSyxZQUNIUSxFQUFJRSxVQUFZLFFBQ2hCLElBQU0wRixFQUFXckcsRUFBUSxFQUNuQnNHLEVBQVlyRyxFQUFTLEVBQzNCUSxFQUFJNkQsU0FBUzlJLEVBQUs2SyxFQUFXLEVBQUkzSyxFQUFLNEssRUFBWSxFQUFJRCxFQUFVQyxLQU05RCxZQUFBL0MsMEJBQVIsU0FBa0M5QyxFQUErQjJELEVBQWtCLEcsSUFBRTVJLEVBQUEsRUFBQUEsRUFBR0UsRUFBQSxFQUFBQSxFQUM5RXNFLEVBQUEsRUFBQUEsTUFBT0MsRUFBQSxFQUFBQSxPQUNmUSxFQUFJRSxVQUFZLDJCQUNoQkYsRUFBSTZELFNBQVM5SSxFQUFHRSxFQUFHc0UsRUFBT0MsSUFHcEIsWUFBQXdELDBCQUFSLFNBQWtDaEQsRUFBK0IyRCxFQUFrQixHLElBQUU1SSxFQUFBLEVBQUFBLEVBQUdFLEVBQUEsRUFBQUEsRUFDOUVzRSxFQUFBLEVBQUFBLE1BQU9DLEVBQUEsRUFBQUEsT0FDVHNHLEdBQVMsSUFBSXhDLE1BQU9xQyxVQUNwQkksRUFBVXBJLEtBQUs2RSxpQkFHZndELEVBRlksRUFFd0QsRUFBekMxTCxLQUFLcUIsSUFBS21LLEVBQVNDLEVBQVd6TCxLQUFLZ0gsSUFDcEV0QixFQUFJRSxVQUFZLDJCQUNoQkYsRUFBSTZELFNBQVM5SSxFQUFHRSxFQUFHc0UsRUFBT0MsR0FDMUJRLEVBQUlFLFVBQVl5RCxFQUFLeEIsTUFDckJuQyxFQUFJNkQsU0FBUzlJLEVBQUlpTCxFQUFhL0ssRUFBSStLLEVBQWF6RyxFQUF1QixFQUFkeUcsRUFBa0J4RyxFQUF3QixFQUFkd0csSUFHOUUsWUFBQTlDLHlCQUFSLFNBQWlDbEQsRUFBK0IyRCxFQUFrQixHLElBQUU1SSxFQUFBLEVBQUFBLEVBQUdFLEVBQUEsRUFBQUEsRUFDN0VzRSxFQUFBLEVBQUFBLE1BQU9DLEVBQUEsRUFBQUEsT0FBUTJDLEVBQUEsRUFBQUEsTUFBT0ssRUFBQSxFQUFBQSxpQkFDOUIsR0FBS21CLEVBQUtyQixVQUFWLENBRUEsSUFBTTJELEdBQWUsSUFBSTNDLE1BQU9xQyxVQUFZaEMsRUFBS3JCLFVBQVVxRCxVQUNyRE8sRUFBY0QsRUFBZXpELEVBQW1CLEVBQUl5RCxFQUFlekQsRUFDbkVuQixFQUFhNkUsR0FBZTNHLEVBQVEsR0FDcEM2QixFQUFXOEUsR0FBZTFHLEVBQVMsR0FDekNRLEVBQUlFLFVBQVksT0FDaEJGLEVBQUk2RCxTQUFTOUksRUFBR0UsRUFBR3NFLEVBQU9DLEdBQzFCUSxFQUFJRSxVQUFZaUMsRUFDaEJuQyxFQUFJNkQsU0FBUzlJLEVBQUlzRyxFQUFZcEcsRUFBSW1HLEVBQVU3QixFQUFzQixFQUFiOEIsRUFBaUI3QixFQUFxQixFQUFYNEIsS0FFbkYsRUFuSkEsQ0FBd0MrRSxFQUFBLEdDd0Z6QixFQUZELElBNUZkLFdBU0Usd0JBUk8sS0FBQXBMLEVBQUksRUFDSixLQUFBRSxFQUFJLEVBQ0osS0FBQW1MLFNBQVUsRUFFVixLQUFBQyxlQUE2QyxHQUM3QyxLQUFBQyxpQkFBK0MsR0FDL0MsS0FBQUMsY0FBNEMsR0FHakQ1SSxLQUFLNkksZ0JBQWtCLENBQUV6TCxFQUFHNEMsS0FBSzVDLEVBQUdFLEVBQUcwQyxLQUFLMUMsR0FFNUMrRCxPQUFPUyxpQkFBaUIsYUFBYSxTQUFDZ0gsR0FDcEMsRUFBS0MsdUJBQXVCRCxHQUM1QixFQUFLSixlQUFleEosU0FBUSxTQUFBOEosR0FBWSxPQUFBQSxFQUFTLFNBRW5EM0gsT0FBT1MsaUJBQWlCLGFBQWEsU0FBQ2dILEdBQ3BDLEVBQUtDLHVCQUF1QkQsR0FDNUIsRUFBS0YsY0FBYzFKLFNBQVEsU0FBQThKLEdBQVksT0FBQUEsRUFBUyxTQUVsRDNILE9BQU9TLGlCQUFpQixXQUFXLFNBQUNnSCxHQUNsQyxFQUFLSCxpQkFBaUJ6SixTQUFRLFNBQUE4SixHQUFZLE9BQUFBLEVBQVMsTUFDbkQsRUFBS0QsdUJBQXVCRCxNQUc5QnpILE9BQU9TLGlCQUFpQixjQUFjLFNBQUNnSCxHQUNyQyxFQUFLRyx1QkFBdUJILEdBQzVCLEVBQUtKLGVBQWV4SixTQUFRLFNBQUE4SixHQUFZLE9BQUFBLEVBQVMsU0FFbkQzSCxPQUFPUyxpQkFBaUIsYUFBYSxTQUFDZ0gsR0FDcEMsRUFBS0csdUJBQXVCSCxHQUM1QixFQUFLRixjQUFjMUosU0FBUSxTQUFBOEosR0FBWSxPQUFBQSxFQUFTLFNBRWxEM0gsT0FBT1MsaUJBQWlCLFlBQVksU0FBQ2dILEdBQ25DLEVBQUtILGlCQUFpQnpKLFNBQVEsU0FBQThKLEdBQVksT0FBQUEsRUFBUyxNQUNuRCxFQUFLQyx1QkFBdUJILE1BdURsQyxPQW5ERSxzQkFBSSx5QkFBVSxDLElBQWQsV0FDUSwyQkFBRTFMLEVBQUEsRUFBQUEsRUFBR0UsRUFBQSxFQUFBQSxFQUNYLE9BQU8wQyxLQUFLeUksUUFBVSxDQUFFckwsRUFBRzRDLEtBQUs1QyxFQUFJQSxFQUFHRSxFQUFHMEMsS0FBSzFDLEVBQUlBLEdBQU0sQ0FBRUYsRUFBRyxFQUFHRSxFQUFHLEksZ0NBR3RFLHNCQUFJLDRCQUFhLEMsSUFBakIsV0FDUSxzQkFBRUYsRUFBQSxFQUFBQSxFQUFHRSxFQUFBLEVBQUFBLEVBQ1gsT0FBVSxJQUFORixHQUFpQixJQUFORSxFQUFnQixPQUUzQlgsS0FBS3VNLElBQUk5TCxJQUFNVCxLQUFLdU0sSUFBSTVMLEdBQ25CRixFQUFJLEVBQUksT0FBUyxRQUVqQkUsRUFBSSxFQUFJLEtBQU8sUSxnQ0FJMUIsWUFBQTZMLFFBQUEsU0FBUUgsR0FDTmhKLEtBQUswSSxlQUFlVSxLQUFLSixJQUczQixZQUFBSyxVQUFBLFNBQVVMLEdBQ1JoSixLQUFLMkksaUJBQWlCUyxLQUFLSixJQUc3QixZQUFBTSxPQUFBLFNBQU9OLEdBQ0xoSixLQUFLNEksY0FBY1EsS0FBS0osSUFHMUIsWUFBQUQsdUJBQUEsU0FBdUJELEdBQ3JCOUksS0FBSzVDLEVBQUkwTCxFQUFNMUwsRUFDZjRDLEtBQUsxQyxFQUFJd0wsRUFBTXhMLEVBQ2YsSUFBTWlNLEVBQWlCdkosS0FBS3lJLFFBQzVCekksS0FBS3lJLFFBQTRCLElBQWxCSyxFQUFNVSxRQUNqQnhKLEtBQUt5SSxVQUFZYyxJQUNuQnZKLEtBQUs2SSxnQkFBa0IsQ0FBRXpMLEVBQUc0QyxLQUFLNUMsRUFBR0UsRUFBRzBDLEtBQUsxQyxLQUloRCxZQUFBMkwsdUJBQUEsU0FBdUJILEdBQ2IsSUFBQVcsRUFBQSxFQUFBQSxRQUNGRixFQUFpQnZKLEtBQUt5SSxRQUM1QixHQUF1QixJQUFuQmdCLEVBQVExTSxPQUNWaUQsS0FBS3lJLFNBQVUsTUFDVixDQUNMLElBQU1pQixFQUFRRCxFQUFRLEdBQ3RCekosS0FBSzVDLEVBQUlzTSxFQUFNQyxRQUNmM0osS0FBSzFDLEVBQUlvTSxFQUFNRSxRQUNmNUosS0FBS3lJLFNBQVUsRUFDVmMsSUFBZ0J2SixLQUFLNkksZ0JBQWtCLENBQUV6TCxFQUFHNEMsS0FBSzVDLEVBQUdFLEVBQUcwQyxLQUFLMUMsTUFHdkUsRUExRkEsSSx1WUNLQSxhQU9FLFdBQVk0QyxRQUFBLElBQUFBLE1BQUEsSUFDVkYsS0FBS2pGLE1BQVFtRixFQUFLbkYsT0FBUyxFQUMzQmlGLEtBQUs2SixPQUFTM0osRUFBSzJKLFNBQVUsRUFDN0I3SixLQUFLVCxJQUFNVyxFQUFLWCxLQUFPLENBQUMsSUFrSTVCLE9BL0hTLEVBQUF1SyxXQUFQLFNBQWtCL00sRUFBZ0IsRyxJQUFBLGtCQUFFLElBQUFoQyxNQUNsQyxPQUFPLElBQUlnUCxFQUFNLENBQ2ZoUCxXQUZnQyxJQUFRLEVBQVIsSUFHaEM4TyxTQUgyQyxFQUFBRyxPQUkzQ3pLLElBQUssQ0FBQyxZQUFNeEMsR0FBUSxXQUFNLGdCQUl2QixFQUFBa04sUUFBUCxTQUFlQyxFQUFjdEwsR0FDM0IsWUFEMkIsSUFBQUEsTUFBQSxHQUNwQixJQUFJbUwsRUFBTSxFQUFELEtBQU1HLEdBQUssQ0FBRTNLLElBQUssWUFBTzJLLEVBQU0zSyxJQUFLWCxPQUd0RCxzQkFBSSxxQkFBTSxDLElBQVYsV0FBd0IsT0FBT29CLEtBQUttSyxTQUFXbkssS0FBS29LLFEsSUFDcEQsU0FBV1AsR0FBbUI3SixLQUFLbUssUUFBVU4sRyxnQ0FFN0Msc0JBQUksa0JBQUcsQyxJQUFQLFdBQXNCLE9BQU83SixLQUFLcUssTSxJQUNsQyxTQUFROUssVUFDQ1MsS0FBS3NLLFFBQ1osSUFBTUMsRUFBWWhMLEVBQUlULFFBQU8sU0FBQzlDLEVBQUssRyxJQUFFZSxFQUFBLEVBQUFBLE9BQWEsT0FBQ0EsRUFBU2YsRUFBTWUsRUFBU2YsSUFBTSxHQUNqRmdFLEtBQUtxSyxLQUFPOUssRUFBSUEsS0FBSSxTQUFBUCxHQUFPLG1CQUFNdUwsR0FBVyxTQUFBelEsR0FBSyxPQUFDa0YsRUFBSWxGLEtBQU0sUyxnQ0FHOUQsc0JBQUkscUJBQU0sQyxJQUFWLFdBQ0UsWUFBNEIsSUFBakJrRyxLQUFLc0ssUUFBZ0N0SyxLQUFLc0ssU0FFckR0SyxLQUFLc0ssUUFBK0IsSUFBcEJ0SyxLQUFLVCxJQUFJeEMsUUFBZ0JpRCxLQUFLVCxJQUFJLEdBQUdpTCxPQUFNLFNBQUFDLEdBQVMsT0FBQUEsTUFDL0R6SyxLQUFLVCxJQUFJaUwsT0FBTSxTQUFBeEwsR0FBTyxPQUFnQixJQUFmQSxFQUFJakMsUUFBZ0JpQyxFQUFJLE1BRTdDZ0IsS0FBS3NLLFUsZ0NBR2QsWUFBQUksTUFBQSxTQUFTL0wsRUFBYWdNLEVBQWdCQyxRQUFBLElBQUFBLE1BQUEsR0FDcEMsSUFBTXBGLEVBQVUsR0FDaEIsR0FBSW9GLEVBQVcsRUFBRyxNQUFPLENBQUVBLFNBQVEsRUFBRXBGLFFBQU8sRUFBRS9DLE9BQVEsTUFFdEQsSUFDSW9JLEVBREFDLEdBQWdCLEVBMkJwQixHQXpCbUIsWUFBTzlLLEtBQUtULElBQUtxTCxHQUVOSixPQUFNLFNBQUNPLEVBQVk5TCxHQUMvQyxJQUFNK0wsRUFBVXJNLEVBQUtNLEdBQ3JCLFFBQUsrTCxHQUVFRCxFQUFXUCxPQUFNLFNBQUNTLEVBQVc5TCxHQUNsQyxJQUFLOEwsRUFBVyxPQUFPLEVBRXZCLElBQU1DLEVBQVdGLEVBQVE3TCxHQUN6QixJQUFLK0wsRUFBVSxPQUFPLEVBRXRCLElBQU1DLEVBQVlELEVBQVNQLEdBTTNCLE9BTEtHLElBQ0hELEVBQWFNLEVBQ2JMLEdBQWdCLEdBR2RLLElBQWNOLElBRWxCckYsRUFBUTRELEtBQUs4QixJQUNOLFNBSUssQ0FDUiw2QkFBRWxNLEVBQUEsRUFBQUEsSUFBS1csRUFBQSxFQUFBQSxJQUNQOEMsRUFBUzlELEVBQUtLLEdBQUtXLEdBQ3pCLE1BQU8sQ0FBRWlMLFNBQVEsRUFBRXBGLFFBQU8sRUFBRS9DLE9BQU0sR0FHcEMsT0FBT3pDLEtBQUswSyxNQUFNL0wsRUFBTWdNLEVBQU9DLEVBQVcsSUFHNUMsWUFBQVEsT0FBQSxTQUFzQ3pNLEVBQWEwTSxHQWFqRCxZQWJpRCxJQUFBQSxNQUFBLENBQXlCck0sSUFBSyxFQUFHVyxJQUFLLEtBQ2pFMEwsRUFBT3JNLElBQU0sRUFDL0JnQixLQUFLVCxJQUFJK0wsT0FBTyxFQUFJRCxFQUFPck0sS0FDM0IsRUFBSSxZQUFNcU0sRUFBT3JNLEtBQUssV0FBTSxZQUFRZ0IsS0FBS1QsTUFFYkEsS0FBSSxTQUFDUCxHQUNuQyxPQUFPcU0sRUFBTzFMLElBQU0sRUFDaEJYLEVBQUlzTSxPQUFPLEVBQUlELEVBQU8xTCxLQUN0QixFQUFJLFlBQU0wTCxFQUFPMUwsS0FBSyxXQUFNLFlBQVdYLE1BSzVCRixRQUFPLFNBQUN5TSxFQUFpQlIsRUFBWTlMLEdBQ3BELElBQU0rTCxFQUFVck0sRUFBS00sR0FFckIsT0FBTyxFQUNGc00sRUFDQVIsRUFBV2pNLFFBQU8sU0FBQzBNLEVBQWlCUCxFQUFXOUwsR0FDaEQsSUFBTTZHLEVBQU9nRixHQUFXQSxFQUFRN0wsR0FDaEMsT0FBTzZHLEdBQVFpRixFQUFZLEVBQUlPLEVBQWlCLENBQUF4RixJQUFRd0YsSUFDdkQsT0FFSixLQUdMLHNCQUFJLHFCQUFNLEMsSUFBVixXQUNFLElBQU12TSxFQUFXdEMsS0FBS0UsTUFBTW1ELEtBQUtULElBQUl4QyxPQUFTLEdBQ3hDME8sRUFBU3pMLEtBQUtULElBQUlOLEdBQ2xCRSxFQUFXeEMsS0FBS0UsTUFBTTRPLEVBQU8xTyxPQUFTLEdBRTVDLE1BQU8sQ0FBRWtPLFVBRFNRLEVBQU90TSxHQUNMSCxJQUFLQyxFQUFVVSxJQUFLUixJLGdDQUcxQyxZQUFBdU0sZUFBQSxTQUFlOU0sR0FDYixRQURhLElBQUFBLE1BQUEsUUFDdUIsSUFBekJvQixLQUFLMkwsZ0JBQWlDLENBQy9DLElBQU1DLEVBQWlCNUwsS0FBS1QsSUFBSVQsUUFBTyxTQUFDK00sRUFBT2QsR0FDN0MsT0FBT2MsRUFBUWQsRUFBV2pNLFFBQU8sU0FBQ2dOLEVBQUtiLEdBQWMsT0FBQ0EsRUFBWWEsRUFBTSxFQUFJQSxJQUFNLEtBQ2pGLEdBRUcsRUFBY25QLEtBQUtFLE1BQU0rTyxFQUFpQixHQUU1QyxFQUFTLEVBQ2I1TCxLQUFLMkwsZ0JBQWtCLFlBQVEzTCxLQUFLVCxLQUFLLFNBQUNQLEVBQUtDLEdBQzdDLE9BQU8sWUFBUUQsR0FBSyxTQUFDaU0sRUFBV3pNLEdBQzlCLEdBQUt5TSxFQUNMLE9BQUksSUFBVyxFQUFvQixDQUFFak0sSUFBS0MsRUFBVVUsSUFBS25CLFFBQ3pELEdBQVUsU0FLaEIsSUFBTTJCLEVBQVdILEtBQUtULElBQUl4QyxPQUNwQnFELEVBQVdKLEtBQUtULElBQUksR0FBR3hDLE9BQzdCLE9BQU8sWUFBbUJpRCxLQUFLMkwsZ0JBQWtCeEwsRUFBVUMsRUFBVXhCLElBRXpFLEVBNUlBLEcsSUE4SWFtTixFQUFnQixXQUFlLE9BQzFDLEVBQU1qQyxXQUFXLEVBQUcsQ0FBRS9PLE1BQU8sSUFDN0IsRUFBTStPLFdBQVcsRUFBRyxDQUFFL08sTUFBTyxJQUM3QixFQUFNK08sV0FBVyxFQUFHLENBQUUvTyxNQUFPLElBQzdCLEVBQU0rTyxXQUFXLEVBQUcsQ0FBRS9PLE1BQU8sRUFBR2lQLFFBQVEsSUFDeEMsSUFBSSxFQUFNLENBQ1JqUCxNQUFPLEVBQ1B3RSxJQUFLLENBQ0gsRUFBQyxHQUFNLEdBQU0sR0FDYixFQUFDLEdBQ0QsRUFBQyxNQUdMLElBQUksRUFBTSxDQUNSeEUsTUFBTyxFQUNQd0UsSUFBSyxDQUNILEVBQUMsR0FBTSxHQUFNLEdBQ2IsRUFBQyxHQUFPLEdBQ1IsRUFBQyxHQUFPLE1BR1osSUFBSSxFQUFNLENBQ1J4RSxNQUFPLEVBQ1B3RSxJQUFLLENBQ0gsRUFBQyxHQUFNLEdBQ1AsRUFBQyxHQUFNLFEsa3RCQ3pJUHlNLEVBQXNCLFdBQTJCLE9BQUdoTixLQUFNLEVBQUdXLEtBQU0sRUFBR3FHLEtBQU0sTyxFQUVsRixZQW9CRSxXQUFZOUYsR0FBWixNQUNFLG1CQUNLQSxHQUFJLENBQ1BLLFNBQVUsQ0FDUjBMLElBQUssQ0FBRWxMLFVBQVcsU0FBQyxHLElBQUVqQixFQUFBLEVBQUFBLFFBQWMsU0FBS29NLHFCQUFxQixNQUFPcE0sS0FDcEVxTSxPQUFRLENBQUVwTCxVQUFXLFNBQUMsRyxJQUFFakIsRUFBQSxFQUFBQSxRQUFjLFNBQUtvTSxxQkFBcUIsU0FBVXBNLEtBQzFFc00sT0FBUSxDQUFFckwsVUFBVyxTQUFDLEcsSUFBRWpCLEVBQUEsRUFBQUEsUUFBYyxTQUFLb00scUJBQXFCLFNBQVVwTSxLQUMxRXVNLE1BQU8sQ0FBRXRMLFVBQVcsU0FBQyxHLElBQUVqQixFQUFBLEVBQUFBLFFBQWMsU0FBS29NLHFCQUFxQixRQUFTcE0sS0FDeEV3TSxLQUFNLENBQUV2TCxVQUFXLFNBQUMsRyxJQUFFakIsRUFBQSxFQUFBQSxRQUFjLFNBQUtvTSxxQkFBcUIsT0FBUXBNLFVBRXhFLEtBeEJHLEVBQUF5TSxtQkFBK0MsR0FDL0MsRUFBQUMsaUJBQTZDLEdBQzdDLEVBQUFDLGNBQTBDLEdBT3pDLEVBQUFDLFdBQTZCVixJQUM3QixFQUFBVyxXQUE2QlgsSUFDN0IsRUFBQVksV0FBNkJaLElBZW5DLEVBQUs1TyxFQUFJOEMsRUFBSzlDLEdBQUssRUFDbkIsRUFBS0UsRUFBSTRDLEVBQUs1QyxHQUFLLEVBQ25CLElBQU11UCxFQUFXM00sRUFBSzBCLE9BQXlCLEdBQWhCLEVBQUt4QixTLE9BQ3BDLEVBQUt3QixNQUFRaUwsRUFBWUEsRUFBVyxFQUFLek0sU0FDekMsRUFBS3lCLE9BQVMzQixFQUFLMkIsUUFBVSxFQUFLRCxNQUNsQyxFQUFLa0wsWUFBYzVNLEVBQUs0TSxhQUFlLEdBQ3ZDLEVBQUtDLE9BQVM3TSxFQUFLNk0sUUFBVWhCLElBQzdCLEVBQUsvRyxpQkFBbUI5RSxFQUFLOEUsaUJBQzdCLEVBQUtFLG1CQUFxQmhGLEVBQUtnRixtQkFDL0IsRUFBS0UsbUJBQXFCbEYsRUFBS2tGLG1CQUMvQixFQUFLRSxrQkFBb0JwRixFQUFLb0Ysa0JBQzlCLEVBQUtULGlCQUFtQjNFLEVBQUsyRSxrQkFBb0IsSUFFakQsRUFBTXNFLFFBQVEsRUFBSzZELHNCQUFzQjFSLEtBQUssSUFDOUMsRUFBTStOLFVBQVUsRUFBSzRELG9CQUFvQjNSLEtBQUssSUFDOUMsRUFBTWdPLE9BQU8sRUFBSzRELGlCQUFpQjVSLEtBQUssSSxFQWlaNUMsT0FoY3lDLE9Bb0R2QyxzQkFBSSx3QkFBUyxDLElBQWIsV0FDRSxPQUFPMEUsS0FBSzRCLE1BQVE1QixLQUFLSSxVLGdDQUczQixzQkFBSSx5QkFBVSxDLElBQWQsV0FDRSxPQUFPSixLQUFLNkIsT0FBUzdCLEtBQUtHLFUsZ0NBRzVCLFlBQUFjLEtBQUEsU0FBS29CLEdBQUwsV0FDUThLLEVBQVduTixLQUFLb04sY0FDaEJDLEVBQWdCck4sS0FBS3NOLG1CQUFvQixJQUFJM0gsTUFBT3FDLFVBQVloSSxLQUFLc04sa0JBQWtCdEYsVUFBWSxFQUVuRzNLLEVBQU1nUSxFQURPLElBQ3VCck4sS0FBS3VOLFdBQ3pDQyxFQUFrQkgsRUFGTCxJQUdmRyxVQUF3QnhOLEtBQUtzTixrQkFFakMsSUFBTUcsRUFBYyxHQUNwQnpOLEtBQUtQLEtBQUtQLFNBQVEsU0FBQ0YsRUFBS0MsR0FDdEJELEVBQUlFLFNBQVEsU0FBQzhHLEVBQU0wSCxHQUNqQixJQUFNdFEsRUFBSSxFQUFLQSxFQUFLc1EsRUFBWTFILEVBQUtwRSxNQUNqQ3RFLEVBQUksRUFBS0EsRUFBSzJCLEVBQVcrRyxFQUFLbkUsT0FDbEMsR0FBSXNMLElBQWFuSCxFQUFLcEIsTUFBTyxDQUMzQixJQUFNK0ksRUFBVyxDQUFFM08sSUFBS0MsRUFBVVUsSUFBSytOLEdBQ2pDRSxFQUFRLEVBQUtDLGFBQWFGLEVBQVUsUUFDdENDLEVBQU01SCxNQUFRNEgsRUFBTTVILEtBQUtwQixRQUMzQnRILEdBQUtELEVBQ0RtUSxHQUFpQkMsRUFBWXJFLEtBQUssQ0FBQ3VFLEVBQVVDLEtBR3JENUgsRUFBSy9FLEtBQUtvQixFQUFLakYsRUFBR0UsU0FJdEJtUSxFQUFZdk8sU0FBUSxTQUFDLEcsSUFBQ2pDLEVBQUEsS0FBUTJRLEVBQUEsS0FBVyxTQUFLRSxTQUFTN1EsRUFBUTJRLE9BR2pFLFlBQUFHLE9BQUEsc0JBRUUsR0FEQS9OLEtBQUtnTyxpQkFDRGhPLEtBQUtpTyxnQkFBVCxDQUVBLElBQU1DLEVBQWdCbE8sS0FBS21PLGNBQzNCLEdBQUtELEVBQWNuUixPQUFuQixDQUVBLElBQU1xUixFQUFhcE8sS0FBSzJNLFdBQVczRyxLQUM3QnFJLEVBQWFyTyxLQUFLNE0sV0FBVzVHLEtBRTdCc0ksRUFBc0IsRUFBSUosR0FBZUssTUFBSyxTQUFDQyxFQUFHQyxHQUN0RCxPQUFJRCxFQUFFdEUsTUFBTW5QLE1BQVEwVCxFQUFFdkUsTUFBTW5QLE9BQWUsRUFDdkMwVCxFQUFFdkUsTUFBTW5QLE1BQVF5VCxFQUFFdEUsTUFBTW5QLE1BQWMsRUFDdEN5VCxFQUFFOU4sTUFBTWdPLE1BQUssU0FBQTFJLEdBQVEsT0FBQ0EsSUFBU3FJLEdBQWNySSxJQUFTb0ksTUFBc0IsRUFDNUVLLEVBQUUvTixNQUFNZ08sTUFBSyxTQUFBMUksR0FBUSxPQUFDQSxJQUFTcUksR0FBY3JJLElBQVNvSSxLQUFxQixFQUN4RSxLQUdITyxFQUErQyxJQUFJQyxJQUN6RE4sRUFBb0JwUCxTQUFRLFNBQUMsRyxJQUFFd0IsRUFBQSxFQUFBQSxNQUFPd0osRUFBQSxFQUFBQSxNQUFPVSxFQUFBLEVBQUFBLFNBQzNDbEssRUFBTXhCLFNBQVEsU0FBQThHLEdBQVEsU0FBSzZJLFlBQVk3SSxNQUN2QyxJQUFNbEcsRUFBVSxFQUFLZ1AsZ0JBQWdCNUUsRUFBT1UsR0FDNUMsR0FBSTlLLEVBQVMsQ0FDWCxJQUNNaVAsRUFEWXJPLEVBQU1wQyxNQUFLLFNBQUEwSCxHQUFRLE9BQUNBLElBQVNxSSxHQUFjckksSUFBU29JLE1BQ3BDLEVBQUtZLFdBQVd0TyxHQUM1Q3VPLEVBQVdOLEVBQWtCaFUsSUFBSW9VLEdBQ3ZDSixFQUFrQk8sSUFBSUgsRUFBYyxFQUFLRSxHQUFZLEdBQUssQ0FBQW5QLFNBSTlENk8sRUFBa0J6UCxTQUFRLFNBQUNpUSxFQUFVbkosR0FDbkNBLEVBQUtsRyxRQUFVcVAsRUFBUyxHQUN4Qm5KLEVBQUtSLFNBQVUsUUFJbkIsWUFBQXdKLFdBQUEsU0FBV3RPLEdBQ1QsT0FBT0EsRUFBTS9ELEtBQUtFLE1BQU02RCxFQUFNM0QsT0FBUyxLQUd6QyxZQUFBaVIsY0FBQSxzQkFDRWhPLEtBQUtQLEtBQUssR0FBS08sS0FBS1AsS0FBSyxHQUFHRixLQUFJLFNBQUF5RyxHQUFRLE9BQUNBLEVBQUtwQixNQUFRLEVBQUtoRSxpQkFBbUJvRixNQUdoRixZQUFBaUksY0FBQSxXQUNFLE9BQU9qTyxLQUFLUCxLQUFLNkwsTUFBTSxHQUFHb0QsTUFBSyxTQUFBMVAsR0FBTyxPQUFBQSxFQUFJMFAsTUFBSyxTQUFBMUksR0FBUSxPQUFDQSxFQUFLUixTQUFXUSxFQUFLcEIsYUFHL0UsWUFBQWlLLFlBQUEsU0FBWTdJLEdBRVYsR0FESUEsRUFBS29KLFlBQVdwSixFQUFLUixTQUFVLElBQy9CUSxFQUFLUixRQUdULE9BREFRLEVBQUtSLFNBQVUsRUFDUFEsRUFBS2xHLFNBQ1gsSUFBSyxrQkFBbUJFLEtBQUtxUCxTQUFTclAsS0FBS3NQLFNBQVN0SixJQUFRLE1BQzVELElBQUssZ0JBQWlCaEcsS0FBS3VQLFNBQVN2UCxLQUFLc1AsU0FBU3RKLElBQVEsTUFDMUQsSUFBSyxhQUFjaEcsS0FBS3dQLFdBQVd4UCxLQUFLc1AsU0FBU3RKLElBQVEsTUFDekQsSUFBSyxZQUFhaEcsS0FBS3lQLFVBQVV6SixFQUFLbkcsTUFBTyxNQUM3QyxJQUFLLFlBQWFHLEtBQUswUCxVQUFVMVAsS0FBS3NQLFNBQVN0SixNQUluRCxZQUFBcUosU0FBQSxTQUFTLEdBQVQsV0FBV3JRLEVBQUEsRUFBQUEsSUFDVGdCLEtBQUtQLEtBQUtULEdBQUtFLFNBQVEsU0FBQThHLEdBQVEsU0FBSzZJLFlBQVk3SSxPQUdsRCxZQUFBdUosU0FBQSxTQUFTLEdBQVQsV0FBVzVQLEVBQUEsRUFBQUEsSUFDVEssS0FBS1AsS0FBS1AsU0FBUSxTQUFBRixHQUFPLFNBQUs2UCxZQUFZN1AsRUFBSVcsUUFHaEQsWUFBQTZQLFdBQUEsU0FBVyxHLElBQUV4USxFQUFBLEVBQUFBLElBQUtXLEVBQUEsRUFBQUEsSUFDaEJLLEtBQUtxUCxTQUFTLENBQUVyUSxJQUFHLElBQ25CZ0IsS0FBS3VQLFNBQVMsQ0FBRTVQLElBQUcsS0FHckIsWUFBQThQLFVBQUEsU0FBVTVQLEdBQVYsV0FDRUcsS0FBS1UsTUFBTXhCLFNBQVEsU0FBQThHLEdBQWNBLEVBQUtuRyxPQUFTQSxHQUFNLEVBQUtnUCxZQUFZN0ksT0FHeEUsWUFBQTBKLFVBQUEsU0FBVSxHQUFWLFdBQVkxUSxFQUFBLEVBQUFBLElBQUtXLEVBQUEsRUFBQUEsSUFDVGdRLEVBQVksSUFBSSxFQUFNLENBQzFCcFEsSUFBSyxDQUNILEVBQUMsR0FBTyxHQUFPLEdBQ2YsRUFBQyxHQUFPLEdBQU0sR0FBTSxHQUNwQixFQUFDLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FDekIsRUFBQyxHQUFPLEdBQU0sR0FBTSxHQUNwQixFQUFDLEdBQU8sR0FBTyxNQUdYa0QsRUFBQSxFQUFBQSxPQUNGbU4sRUFBVTVRLEVBQU15RCxFQUFPekQsSUFDdkI2USxFQUFXbFEsRUFBTThDLEVBQU85QyxJQUNWZ1EsRUFBVXZFLE9BQU9wTCxLQUFLUCxLQUFNLENBQUVULElBQUs0USxFQUFTalEsSUFBS2tRLElBQ3pEM1EsU0FBUSxTQUFBOEcsR0FBUSxTQUFLNkksWUFBWTdJLE9BRy9DLFlBQUFvSCxZQUFBLFdBR0UsT0FGaUJwTixLQUFLVSxNQUFNZ08sTUFBSyxTQUFBMUksR0FBUSxPQUFBQSxFQUFLcEIsVUFHdkM1RSxLQUFLc04sb0JBQW1CdE4sS0FBS3NOLGtCQUFvQixJQUFJM0gsT0FDbkQsV0FHRjNGLEtBQUtzTixtQkFDTCxJQUdULFlBQUF3QyxPQUFBLFNBQU9DLEdBQ0wsR0FBSSxRQUFTQSxFQUFLLENBQ1IsUUFBQS9RLElBQUssSUFBQVcsSUFDUCxFQUFPSyxLQUFLUCxLQUFLLEdBQUssR0FDNUIsT0FBTyxFQUFPLENBQUVULElBQUcsRUFBRVcsSUFBRyxFQUFFcUcsS0FBSSxHQUFLZ0csSUFHckMsSUFBTTVPLEVBQUkyUyxFQUFJM1MsRUFBSTRDLEtBQUs1QyxFQUNqQkUsRUFBSXlTLEVBQUl6UyxFQUFJMEMsS0FBSzFDLEVBQ3ZCLEdBQUlGLEVBQUk0QyxLQUFLNEIsT0FBU3RFLEVBQUkwQyxLQUFLNkIsT0FBUSxPQUFPbUssSUFFOUMsSUFBTWdFLEVBQVk1UyxFQUFJNEMsS0FBSzRCLE1BQ3JCcU8sRUFBWTNTLEVBQUkwQyxLQUFLNkIsT0FDckI3QyxFQUFNckMsS0FBS0UsTUFBTW9ULEVBQVlqUSxLQUFLRyxVQUNsQ1IsRUFBTWhELEtBQUtFLE1BQU1tVCxFQUFZaFEsS0FBS0ksVUFFeEMsTUFBTyxDQUFFcEIsSUFBRyxFQUFFVyxJQUFHLEVBQUVxRyxLQUROaEcsS0FBS1AsS0FBS1QsR0FBS1csS0FJOUIsWUFBQTJQLFNBQUEsU0FBU1ksR0FDUCxPQUFPLFlBQVFsUSxLQUFLUCxNQUFNLFNBQUMwUSxFQUFVblIsR0FDbkMsT0FBTyxZQUFRbVIsR0FBVSxTQUFDbkssRUFBTXJHLEdBQzlCLEdBQUl1USxJQUFXbEssRUFBTSxNQUFPLENBQUVoSCxJQUFHLEVBQUVXLElBQUcsRUFBRXFHLEtBQUksVUFFMUNnRyxLQUdSLFlBQUFvRSxXQUFBLFNBQVdDLEdBQ0QsSUFBQXJSLEVBQUEsRUFBQUEsSUFBS1csRUFBQSxFQUFBQSxJQUFLcUcsRUFBQSxFQUFBQSxLQUNsQixPQUFLQSxFQUlFLENBQUU1SSxFQUZDNEMsS0FBSzVDLEVBQUt1QyxFQUFNcUcsRUFBS25FLE9BQVdtRSxFQUFLbkUsT0FBUyxFQUU1Q3ZFLEVBREYwQyxLQUFLMUMsRUFBSzBCLEVBQU1nSCxFQUFLcEUsTUFBVW9FLEVBQUtwRSxNQUFRLEdBSHBDLENBQUV4RSxHQUFJLEVBQUdFLEdBQUksSUFPakMsWUFBQXdRLFNBQUEsU0FBU3dDLEVBQWtDQyxHQUN2QixpQkFBUEEsRUFDVHZRLEtBQUt3USxvQkFBb0JGLEVBQU1DLEdBRS9CdlEsS0FBS3lRLGlCQUFpQkgsRUFBTUMsSUFJaEMsWUFBQUcsWUFBQSxTQUFZMUgsR0FDVixJQUFNeEssRUFBUXdCLEtBQUt1TSxtQkFBbUJ4UCxPQUV0QyxPQURBaUQsS0FBS3VNLG1CQUFtQm5ELEtBQUtKLEdBQ3RCeEssR0FHVCxZQUFBbVMsd0JBQUEsU0FBd0JDLFVBQ2Y1USxLQUFLdU0sbUJBQW1CcUUsSUFHakMsWUFBQUMsVUFBQSxTQUFVN0gsR0FDUixJQUFNeEssRUFBUXdCLEtBQUt3TSxpQkFBaUJ6UCxPQUVwQyxPQURBaUQsS0FBS3dNLGlCQUFpQnBELEtBQUtKLEdBQ3BCeEssR0FHVCxZQUFBc1Msc0JBQUEsU0FBc0JGLFVBQ2I1USxLQUFLd00saUJBQWlCb0UsSUFHL0IsWUFBQUcsT0FBQSxTQUFPL0gsR0FDTCxJQUFNeEssRUFBUXdCLEtBQUt5TSxjQUFjMVAsT0FFakMsT0FEQWlELEtBQUt5TSxjQUFjckQsS0FBS0osR0FDakJ4SyxHQUdULFlBQUF3UyxtQkFBQSxTQUFtQkosVUFDVjVRLEtBQUt5TSxjQUFjbUUsSUFHNUIsWUFBQUssY0FBQSxTQUFjaFUsRUFBb0NpVSxHQUMxQyxpQ0FBRWxTLEVBQUEsRUFBQUEsSUFBS1csRUFBQSxFQUFBQSxJQUNiLE9BQVF1UixHQUNOLElBQUssS0FBTSxNQUFPLENBQUVsUyxJQUFLQSxFQUFNLEVBQUdXLElBQUcsR0FDckMsSUFBSyxPQUFRLE1BQU8sQ0FBRVgsSUFBS0EsRUFBTSxFQUFHVyxJQUFHLEdBQ3ZDLElBQUssT0FBUSxNQUFPLENBQUVYLElBQUcsRUFBRVcsSUFBS0EsRUFBTSxHQUN0QyxJQUFLLFFBQVMsTUFBTyxDQUFFWCxJQUFHLEVBQUVXLElBQUtBLEVBQU0sR0FDdkMsUUFBUyxNQUFPLENBQUVYLElBQUcsRUFBRVcsSUFBRyxLQUk5QixZQUFBa08sYUFBQSxTQUFhNVEsRUFBbURpVSxHQUN4RCw4QkFBRWxTLEVBQUEsRUFBQUEsSUFBS1csRUFBQSxFQUFBQSxJQUNQcUcsRUFBT2hHLEtBQUtQLEtBQUtULElBQVFnQixLQUFLUCxLQUFLVCxHQUFLVyxHQUM5QyxPQUFPcUcsRUFBTyxDQUFFaEgsSUFBRyxFQUFFVyxJQUFHLEVBQUVxRyxLQUFJLEdBQUtnRyxLQUdyQyxZQUFBbUYsV0FBQSxTQUFXbkwsR0FDVEEsRUFBS3BCLE9BQVEsR0FHZixZQUFBdUosWUFBQSxzQkFDRSxPQUFPLFlBQU1uTyxLQUFLSSxVQUFVdEIsUUFBTyxTQUFDQyxFQUFNSSxHQVF4QyxPQVBBLEVBQUs0TixPQUFPN04sU0FBUSxTQUFDZ0wsR0FDbkIsRUFBS3pLLEtBQUtQLFNBQVEsU0FBQ2tTLEVBQU1uUyxHQUN2QixJQUFNb1MsRUFBVSxFQUFLNVIsS0FBSzZMLE1BQU1yTSxHQUFVTSxLQUFJLFNBQUFQLEdBQU8sT0FBQUEsRUFBSXNNLE1BQU1uTSxNQUN6RCxvQkFBRXlMLEVBQUEsRUFBQUEsU0FBVXBGLEVBQUEsRUFBQUEsUUFBUy9DLEVBQUEsRUFBQUEsT0FDdkIrQyxFQUFRekksT0FBUyxHQUFHZ0MsRUFBS3FLLEtBQUssQ0FBRWMsTUFBSyxFQUFFVSxTQUFRLEVBQUVsSyxNQUFPOEUsRUFBU3dKLFdBQVl2TSxVQUc5RTFELElBQ04sS0FHRyxZQUFBbU4scUJBQVIsU0FBNkJyTSxFQUFjQyxHQVV6QyxPQUFPLElBQUksRUFBVyxDQUNwQkQsS0FBSSxFQUNKQyxRQUFPLEVBQ1AwRSxNQVhhLENBQ2J5SCxJQUFLLE1BQ0xFLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxNQUFPLFFBQ1BDLEtBQU0sUUFNUXpNLEdBQ2QrQixNQUFPNUIsS0FBS3NSLFVBQ1p6UCxPQUFRN0IsS0FBS3VOLFdBQ2J2SSxpQkFBa0JoRixLQUFLZ0YsaUJBQ3ZCRSxtQkFBb0JsRixLQUFLa0YsbUJBQ3pCRSxtQkFBb0JwRixLQUFLb0YsbUJBQ3pCRSxrQkFBbUJ0RixLQUFLc0YscUJBSXBCLFlBQUF3SixnQkFBUixTQUF3QjVFLEVBQWNVLEdBQ3BDLE9BQVFWLEVBQU1uUCxPQUNaLEtBQUssRUFBRyxPQUFPNlAsRUFBVyxHQUFNLEVBQUksZ0JBQWtCLGtCQUN0RCxLQUFLLEVBQ0wsS0FBSyxFQUFHLE1BQU8sWUFDZixLQUFLLEVBQ0wsS0FBSyxFQUFHLE1BQU8sYUFDZixLQUFLLEVBQUcsTUFBTyxZQUNmLFFBQVMsTUFBTyxLQUlaLFlBQUE2RixpQkFBUixTQUF5QkgsRUFBa0NDLEdBQ3pELElBQU10VCxFQUFTK0MsS0FBSzhQLE9BQU9RLEdBQzNCLEdBQUtyVCxFQUFPK0ksS0FBWixDQUVBaEcsS0FBSzJNLFdBQWExUCxFQUNsQixJQUFNQyxFQUFjOEMsS0FBSzhQLE9BQU9TLEdBQzNCclQsRUFBWThJLE9BRWpCaEcsS0FBSzRNLFdBQWExUCxFQUNsQjhDLEtBQUtQLEtBQUt2QyxFQUFZOEIsS0FBSzlCLEVBQVl5QyxLQUFPMUMsRUFBTytJLEtBQ3JEaEcsS0FBS1AsS0FBS3hDLEVBQU8rQixLQUFLL0IsRUFBTzBDLEtBQU96QyxFQUFZOEksUUFHMUMsWUFBQXdLLG9CQUFSLFNBQTRCRixFQUFrQ1ksR0FDNUQsSUFBTWpVLEVBQVMrQyxLQUFLOFAsT0FBT1EsR0FDM0IsR0FBS3JULEVBQU8rSSxLQUFaLENBRUFoRyxLQUFLMk0sV0FBYTFQLEVBQ2xCLElBQU1DLEVBQWM4QyxLQUFLNk4sYUFBYTVRLEVBQVFpVSxHQUN6Q2hVLEVBQVk4SSxPQUVqQmhHLEtBQUs0TSxXQUFhMVAsRUFDbEI4QyxLQUFLUCxLQUFLdkMsRUFBWThCLEtBQUs5QixFQUFZeUMsS0FBTzFDLEVBQU8rSSxLQUNyRGhHLEtBQUtQLEtBQUt4QyxFQUFPK0IsS0FBSy9CLEVBQU8wQyxLQUFPekMsRUFBWThJLFFBRzFDLFlBQUF1TCx1QkFBUixXQUNFdlIsS0FBS1UsTUFBTXhCLFNBQVEsU0FBQzhHLEdBQ2xCQSxFQUFLdkIsVUFBVyxFQUNoQnVCLEVBQUt0QixVQUFXLE1BSVosWUFBQThNLGtCQUFSLFNBQTBCbkIsR0FDeEJyUSxLQUFLdVIseUJBQ0xsQixFQUFTckssS0FBS3ZCLFVBQVcsRUFDekI0TCxFQUFTckssS0FBS3RCLFVBQVcsR0FHbkIsWUFBQStNLGdCQUFSLFdBQ0V6UixLQUFLdVIsMEJBR0MsWUFBQUcsYUFBUixTQUFxQnpVLEVBQStCQyxHQUNsRDhDLEtBQUt1Uix5QkFDTHRVLEVBQU8rSSxLQUFLdkIsVUFBVyxFQUN2QnZILEVBQVk4SSxLQUFLdEIsVUFBVyxHQUd0QixZQUFBc0ksc0JBQVIsU0FBOEIyRSxHQUU1QixJQURpQjNSLEtBQUtvTixjQUN0QixDQUVRLElBQUFoUSxFQUFBLEVBQUFBLEVBQUdFLEVBQUEsRUFBQUEsRUFDTEwsRUFBUytDLEtBQUs4UCxPQUFPLENBQUUxUyxFQUFDLEVBQUVFLEVBQUMsSUFDakMsR0FBS0wsRUFBTytJLEtBQVosQ0FFQWhHLEtBQUswTSxXQUFhelAsRUFDbEIrQyxLQUFLd1Isa0JBQWtCeFIsS0FBSzBNLFlBQzVCLElBQU1rRixFQUFXLFlBQWdCRCxFQUFPM1IsS0FBS29RLFdBQVduVCxJQUNsRGlVLEVBQVlTLEVBQU1FLGNBQ2xCM1UsRUFBY0QsRUFFcEIrQyxLQUFLdU0sbUJBQW1Cck4sU0FBUSxTQUFDOEosR0FDL0JBLEVBQVMsQ0FBRTVMLEVBQUMsRUFBRUUsRUFBQyxFQUFFc1UsU0FBUSxFQUFFVixVQUFTLEVBQUVqVSxPQUFNLEVBQUVDLFlBQVcsRUFBRXlVLE1BQUssVUFJNUQsWUFBQTFFLG9CQUFSLFNBQTRCMEUsR0FFMUIsSUFEaUIzUixLQUFLb04sY0FDdEIsQ0FFQSxJQUFNblEsRUFBUytDLEtBQUswTSxXQUNwQixHQUFLelAsRUFBTytJLEtBQVosQ0FFUSxJQUFBNUksRUFBQSxFQUFBQSxFQUFHRSxFQUFBLEVBQUFBLEVBQ0xzVSxFQUFXLFlBQWdCRCxFQUFPM1IsS0FBS29RLFdBQVduVCxJQUNsRGdILEVBQVMyTixFQUFXNVIsS0FBSzhNLFlBQWM5TSxLQUFLNk4sYUFBYTVRLEVBQVEwVSxFQUFNRSxlQUFpQjVVLEVBQ3hGQyxFQUFjK0csRUFBTytCLEtBQU8vQixFQUFTaEgsRUFDckNpVSxFQUFZUyxFQUFNRSxjQUN4QjdSLEtBQUt5UixrQkFFTHpSLEtBQUt3TSxpQkFBaUJ0TixTQUFRLFNBQUM4SixHQUM3QkEsRUFBUyxDQUFFNUwsRUFBQyxFQUFFRSxFQUFDLEVBQUVzVSxTQUFRLEVBQUVWLFVBQVMsRUFBRWpVLE9BQU0sRUFBRUMsWUFBVyxFQUFFeVUsTUFBSyxPQUdsRTNSLEtBQUswTSxXQUFhVixPQUdaLFlBQUFrQixpQkFBUixTQUF5QnlFLEdBRXZCLElBRGlCM1IsS0FBS29OLGNBQ3RCLENBRUEsSUFBTW5RLEVBQVMrQyxLQUFLME0sV0FDcEIsR0FBS3pQLEVBQU8rSSxLQUFaLENBRVEsSUFBQTVJLEVBQUEsRUFBQUEsRUFBR0UsRUFBQSxFQUFBQSxFQUNYLEdBRGMsRUFBQW1MLFFBQ2QsQ0FFQSxJQUFNbUosRUFBVyxZQUFnQkQsRUFBTzNSLEtBQUtvUSxXQUFXblQsSUFDbERnSCxFQUFTMk4sRUFBVzVSLEtBQUs4TSxZQUFjOU0sS0FBSzZOLGFBQWE1USxFQUFRMFUsRUFBTUUsZUFBaUI1VSxFQUN4RkMsRUFBYytHLEVBQU8rQixLQUFPL0IsRUFBU2hILEVBQ3JDaVUsRUFBWVMsRUFBTUUsY0FDeEI3UixLQUFLMFIsYUFBYXpVLEVBQVFDLEdBRTFCOEMsS0FBS3lNLGNBQWN2TixTQUFRLFNBQUM4SixHQUMxQkEsRUFBUyxDQUFFNUwsRUFBQyxFQUFFRSxFQUFDLEVBQUVzVSxTQUFRLEVBQUVWLFVBQVMsRUFBRWpVLE9BQU0sRUFBRUMsWUFBVyxFQUFFeVUsTUFBSyxXQUd0RSxFQWhjQSxDQUF5Q0csRUFBQSxHQWtjeEN6USxPQUFlMEssY0FBZ0JBLEVDbmVoQzFLLE9BQU9TLGlCQUFpQixvQkFBb0IsV0FDMUMsSUFBTWlRLEVBQVEsSUFBSSxFQUFZLENBQzVCblEsTUFBT2pGLEtBQUtaLElBQUlzRixPQUFPQyxXQUFZRCxPQUFPRSxZQUFhLEtBQ3ZEcEIsU0FBVSxFQUNWQyxTQUFVLElBR1oyUixFQUFNbEIsV0FBVSxTQUFDL0gsR0FDZmlKLEVBQU1qRSxTQUFTaEYsRUFBTTdMLE9BQVE2TCxFQUFNNUwsYUFDcEI2VSxFQUFNNUQsY0FDVHBSLFFBQVFnVixFQUFNakUsU0FBU2hGLEVBQU03TCxPQUFRNkwsRUFBTTVMLGdCQUd6RCxFQUFTLEdBQUssU0FBQzhVLEdBQ2JELEVBQU05USxLQUFLLEdBQ1g4USxFQUFNaEUsWUFHUDFNLE9BQWUwUSxNQUFRQSIsImZpbGUiOiJnYW1lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQpO1xuIiwiaW1wb3J0IHsgQ29vcmRQb3NpdGlvbiwgTnVsbGlzaCwgR3JpZFBvc2l0aW9uIH0gZnJvbSBcIi4uL3R5cGVzL2NvbW1vblwiO1xuXG5leHBvcnQgZnVuY3Rpb24gcmFuZ2U8VD4obWluOiBudW1iZXIsIC4uLm1heEFuZE9yTWFwcGVyOiBbXSk6IG51bWJlcltdO1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlPFQ+KG1pbjogbnVtYmVyLCAuLi5tYXhBbmRPck1hcHBlcjogW251bWJlcl0pOiBudW1iZXJbXTtcbmV4cG9ydCBmdW5jdGlvbiByYW5nZTxUPihtaW46IG51bWJlciwgLi4ubWF4QW5kT3JNYXBwZXI6IFsobjogbnVtYmVyKSA9PiBUXSk6IFRbXTtcbmV4cG9ydCBmdW5jdGlvbiByYW5nZTxUPihtaW46IG51bWJlciwgLi4ubWF4QW5kT3JNYXBwZXI6IFtudW1iZXIsIChuOiBudW1iZXIpID0+IFRdKTogVFtdO1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlPFQ+KG1pbjogbnVtYmVyLCAuLi5tYXhBbmRPck1hcHBlcjogW118W251bWJlcnwoKG46IG51bWJlcikgPT4gVCldfFtudW1iZXIsIChuOiBudW1iZXIpID0+IFRdKTogKG51bWJlcnxUKVtdIHtcbiAgY29uc3QgbWF4ID0gdHlwZW9mIG1heEFuZE9yTWFwcGVyWzBdID09PSAnbnVtYmVyJyA/IG1heEFuZE9yTWFwcGVyWzBdIDogMDtcbiAgY29uc3QgbWFwcGVyID0gdHlwZW9mIG1heEFuZE9yTWFwcGVyWzBdID09PSAnZnVuY3Rpb24nID8gbWF4QW5kT3JNYXBwZXJbMF0gOiBtYXhBbmRPck1hcHBlclsxXTtcbiAgY29uc3QgW3JlYWxNaW4sIHJlYWxNYXhdID0gbWluIDwgbWF4ID8gW21pbiwgbWF4XSA6IFttYXgsIG1pbl07XG4gIGNvbnN0IGRpZmYgPSByZWFsTWF4IC0gcmVhbE1pbjtcbiAgY29uc3QgbGlzdCA9IEFycmF5KGRpZmYpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRpZmY7IGkrKykgbGlzdFtpXSA9IG1hcHBlciA/IG1hcHBlcihpICsgcmVhbE1pbikgOiBpICsgcmVhbE1pbjtcbiAgcmV0dXJuIGxpc3Q7XG59XG5cbmV4cG9ydCBjb25zdCByYW5kID0gKG1pbjogbnVtYmVyLCBtYXggPSAwLCBpbnQgPSBmYWxzZSk6IG51bWJlciA9PiB7XG4gIGNvbnN0IFtyZWFsTWluLCByZWFsTWF4XSA9IG1pbiA8IG1heCA/IFttaW4sIG1heF0gOiBbbWF4LCBtaW5dO1xuICBjb25zdCByYW5kb21EaWZmID0gTWF0aC5yYW5kb20oKSAqIChyZWFsTWF4IC0gcmVhbE1pbik7XG4gIHJldHVybiByZWFsTWluICsgKGludCA/IE1hdGguZmxvb3IocmFuZG9tRGlmZikgOiByYW5kb21EaWZmKTtcbn07XG5cbmV4cG9ydCBjb25zdCBkYW1wZW4gPSAobnVtOiBudW1iZXIsIGJ5OiBudW1iZXIsIGNlbnRlciA9IDApOiBudW1iZXIgPT4ge1xuICAvLyBudW1iZXIgaXMgYWxyZWFkeSBhdCB0aGUgY2VudGVyXG4gIGlmIChudW0gPT09IGNlbnRlcikgcmV0dXJuIGNlbnRlcjtcblxuICAvLyBudW1iZXIgaXMgaGlnaGVyIHRoYW4gdGhlIGNlbnRlcjsgc3VidHJhY3QgYW5kIGRvbid0IG92ZXJzaG9vdCB0aGUgY2VudGVyXG4gIGlmIChudW0gPiBjZW50ZXIpIHtcbiAgICBjb25zdCBuZXdOdW0gPSBudW0gLSBieTtcbiAgICByZXR1cm4gbmV3TnVtIDwgY2VudGVyID8gY2VudGVyIDogbmV3TnVtO1xuICB9XG5cbiAgLy8gbnVtYmVyIGlzIGxvd2VyIHRoYW4gdGhlIGNlbnRlcjsgYWRkIGFuZCBkb24ndCBvdmVyc2hvb3QgdGhlIGNlbnRlclxuICBjb25zdCBuZXdOdW0gPSBudW0gKyBieTtcbiAgcmV0dXJuIG5ld051bSA+IGNlbnRlciA/IGNlbnRlciA6IG5ld051bTtcbn07XG5cbmV4cG9ydCBjb25zdCBib3VuZCA9IChudW06IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgY29uc3QgW3JlYWxNaW4sIHJlYWxNYXhdID0gbWluIDwgbWF4ID8gW21pbiwgbWF4XSA6IFttYXgsIG1pbl07XG4gIGlmIChudW0gPCByZWFsTWluKSByZXR1cm4gcmVhbE1pbjtcbiAgaWYgKG51bSA+IHJlYWxNYXgpIHJldHVybiByZWFsTWF4O1xuICByZXR1cm4gbnVtO1xufTtcblxuZXhwb3J0IGNvbnN0IGJldHdlZW4gPSAobnVtOiBudW1iZXIsIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlciwgaW5jbHVzaXZlID0gdHJ1ZSk6IGJvb2xlYW4gPT4ge1xuICBjb25zdCBbcmVhbE1pbiwgcmVhbE1heF0gPSBtaW4gPCBtYXggPyBbbWluLCBtYXhdIDogW21heCwgbWluXTtcbiAgcmV0dXJuIGluY2x1c2l2ZSA/IChudW0gPj0gcmVhbE1pbiAmJiBudW0gPD0gcmVhbE1heCkgOiAobnVtID4gcmVhbE1pbiAmJiBudW0gPCByZWFsTWF4KTtcbn07XG5cbmV4cG9ydCBjb25zdCBkaWZmZXJlbmNlID0gKG46IG51bWJlciwgbTogbnVtYmVyKTogbnVtYmVyID0+IE1hdGguYWJzKG4gLSBtKTtcblxuZXhwb3J0IGNvbnN0IHNhbXBsZSA9IDxUIGV4dGVuZHMgYW55PihsaXN0OiBUW10pOiBUID0+IHtcbiAgcmV0dXJuIGxpc3RbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbGlzdC5sZW5ndGgpXTtcbn07XG5cbmV4cG9ydCBjb25zdCBkaXN0YW5jZUJldHdlZW4gPSAob3JpZ2luOiBDb29yZFBvc2l0aW9uLCBkZXN0aW5hdGlvbjogQ29vcmRQb3NpdGlvbik6IG51bWJlciA9PiB7XG4gIGNvbnN0IGR4ID0gZGVzdGluYXRpb24ueCAtIG9yaWdpbi54O1xuICBjb25zdCBkeSA9IGRlc3RpbmF0aW9uLnkgLSBvcmlnaW4ueTtcbiAgcmV0dXJuIE1hdGguc3FydCgoZHggKiogMikgKyAoZHkgKiogMikpO1xufTtcblxuZXhwb3J0IGNvbnN0IHJvdGF0ZVBvaW50ID0gKGNvb3JkczogQ29vcmRQb3NpdGlvbiwgYXJvdW5kOiBDb29yZFBvc2l0aW9uLCByYWRpYW5zOiBudW1iZXIpOiBDb29yZFBvc2l0aW9uID0+IHtcbiAgY29uc3QgcmVsYXRpdmUgPSB7IHg6IGNvb3Jkcy54IC0gYXJvdW5kLngsIHk6IGNvb3Jkcy55IC0gYXJvdW5kLnkgfTtcbiAgY29uc3QgY29zaW5lID0gTWF0aC5jb3MocmFkaWFucyk7XG4gIGNvbnN0IHNpbmUgPSBNYXRoLnNpbihyYWRpYW5zKTtcbiAgY29uc3QgbmV3WCA9IChyZWxhdGl2ZS54ICogY29zaW5lKSAtIChyZWxhdGl2ZS55ICogc2luZSk7XG4gIGNvbnN0IG5ld1kgPSAocmVsYXRpdmUueCAqIHNpbmUpICsgKHJlbGF0aXZlLnkgKiBjb3NpbmUpO1xuICByZXR1cm4geyB4OiBuZXdYICsgYXJvdW5kLngsIHk6IG5ld1kgKyBhcm91bmQueSB9O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVsbGlzaCh2YWx1ZTogYW55KTogdmFsdWUgaXMgTnVsbGlzaCB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE51bGxdJztcbn1cblxuZXhwb3J0IGNvbnN0IGZpbHRlck1hcCA9IDxULCBLPihsaXN0OiBUW10sIG1hcHBlcjogKGl0ZW06IFQsIGluZGV4OiBudW1iZXIsIG9yaWdpbmFsOiBUW10pID0+IEt8TnVsbGlzaCk6IEtbXSA9PiB7XG4gIHJldHVybiBsaXN0LnJlZHVjZSgobWVtbywgaXRlbSwgaW5kZXgsIG9yaWdpbmFsKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gbWFwcGVyKGl0ZW0sIGluZGV4LCBvcmlnaW5hbCk7XG4gICAgcmV0dXJuIGlzTnVsbGlzaChyZXN1bHQpID8gbWVtbyA6IFsuLi5tZW1vLCByZXN1bHRdO1xuICB9LCBbXSBhcyBLW10pO1xufTtcblxuZXhwb3J0IGNvbnN0IGZpbmRNYXAgPSA8VCwgSz4obGlzdDogVFtdLCBtYXBwZXI6IChpdGVtOiBULCBpbmRleDogbnVtYmVyLCBvcmlnaW5hbDogVFtdKSA9PiBLfE51bGxpc2gpOiBLfHVuZGVmaW5lZCA9PiB7XG4gIGxldCByZXN1bHQ7XG4gIGxpc3QuZmluZCgoaXRlbSwgaW5kZXgsIG9yaWdpbmFsKSA9PiB7XG4gICAgcmVzdWx0ID0gbWFwcGVyKGl0ZW0sIGluZGV4LCBvcmlnaW5hbCk7XG4gICAgcmV0dXJuICFpc051bGxpc2gocmVzdWx0KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgY29uc3QgdW5pcSA9IDxUIGV4dGVuZHMgYW55LCBQIGV4dGVuZHMga2V5b2YgVD4obGlzdDogVFtdLCBtYXBwZXI6IFB8TnVsbGlzaHwoKGl0ZW06IFQsIGluZGV4OiBudW1iZXIsIG9yaWdpbmFsOiBUW10pID0+IGFueSksIHNvcnRlZCA9IGZhbHNlKTogVFtdID0+IHtcbiAgY29uc3QgbWFwcGVyRm4gPSBpc051bGxpc2gobWFwcGVyKSB8fCB0eXBlb2YgbWFwcGVyID09PSAnZnVuY3Rpb24nID8gbWFwcGVyIDogKGl0ZW06IFQpID0+IGl0ZW1bbWFwcGVyXTtcblxuICBpZiAoc29ydGVkICYmICFtYXBwZXJGbikge1xuICAgIGxldCBsYXN0U2VlbjogVDtcbiAgICByZXR1cm4gbGlzdC5yZWR1Y2UoKG1lbW8sIGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICBpZiAoaW5kZXggIT09IDAgJiYgaXRlbSA9PT0gbGFzdFNlZW4pIHJldHVybiBtZW1vO1xuICAgICAgbGFzdFNlZW4gPSBpdGVtO1xuICAgICAgcmV0dXJuIFsuLi5tZW1vLCBpdGVtXTtcbiAgICB9LCBbXSBhcyBUW10pO1xuICB9XG5cbiAgY29uc3Qgc2VlbiA9IG5ldyBTZXQoKTtcbiAgcmV0dXJuIGxpc3QucmVkdWNlKChtZW1vLCBpdGVtLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGtleSA9IG1hcHBlckZuID8gbWFwcGVyRm4oaXRlbSwgaW5kZXgsIGxpc3QpIDogaXRlbTtcbiAgICBpZiAoc2Vlbi5oYXMoa2V5KSkgcmV0dXJuIG1lbW87XG4gICAgc2Vlbi5hZGQoa2V5KTtcbiAgICByZXR1cm4gWy4uLm1lbW8sIGl0ZW1dO1xuICB9LCBbXSBhcyBUW10pO1xufTtcblxuZXhwb3J0IGNvbnN0IHJvdGF0ZSA9IDxUPihncmlkOiBUW11bXSwgcm90YXRpb25zID0gMSk6IFRbXVtdID0+IHtcbiAgY29uc3QgcXVhZHJhbnRzID0gcm90YXRpb25zICUgNDtcbiAgc3dpdGNoIChxdWFkcmFudHMgPCAwID8gNCAtIHF1YWRyYW50cyA6IHF1YWRyYW50cykge1xuICAgIGNhc2UgMToge1xuICAgICAgcmV0dXJuIGdyaWQucmVkdWNlKChtZW1vLCByb3csIHJvd0luZGV4KSA9PiB7XG4gICAgICAgIHJvdy5mb3JFYWNoKChpdGVtLCBjb2xJbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IG5ld1Jvd0luZGV4ID0gY29sSW5kZXg7XG4gICAgICAgICAgY29uc3QgbmV3Q29sSW5kZXggPSBncmlkLmxlbmd0aCAtIHJvd0luZGV4IC0gMTtcbiAgICAgICAgICBtZW1vW25ld1Jvd0luZGV4XSA9IG1lbW9bbmV3Um93SW5kZXhdIHx8IFtdO1xuICAgICAgICAgIG1lbW9bbmV3Um93SW5kZXhdW25ld0NvbEluZGV4XSA9IGl0ZW07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIFtdIGFzIFRbXVtdKTtcbiAgICB9XG4gICAgY2FzZSAyOiByZXR1cm4gWy4uLmdyaWRdLnJldmVyc2UoKS5tYXAocm93ID0+IFsuLi5yb3ddLnJldmVyc2UoKSk7XG4gICAgY2FzZSAzOiB7XG4gICAgICByZXR1cm4gZ3JpZC5yZWR1Y2UoKG1lbW8sIHJvdywgcm93SW5kZXgpID0+IHtcbiAgICAgICAgcm93LmZvckVhY2goKGl0ZW0sIGNvbEluZGV4KSA9PiB7XG4gICAgICAgICAgY29uc3QgbmV3Um93SW5kZXggPSByb3cubGVuZ3RoIC0gY29sSW5kZXggLSAxO1xuICAgICAgICAgIGNvbnN0IG5ld0NvbEluZGV4ID0gcm93SW5kZXg7XG4gICAgICAgICAgbWVtb1tuZXdSb3dJbmRleF0gPSBtZW1vW25ld1Jvd0luZGV4XSB8fCBbXTtcbiAgICAgICAgICBtZW1vW25ld1Jvd0luZGV4XVtuZXdDb2xJbmRleF0gPSBpdGVtO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCBbXSBhcyBUW11bXSk7XG4gICAgfVxuICAgIGRlZmF1bHQ6IHJldHVybiBncmlkLm1hcChyb3cgPT4gWy4uLnJvd10pO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3Qgcm90YXRlR3JpZFBvc2l0aW9uID0gKHsgcm93LCBjb2wgfTogR3JpZFBvc2l0aW9uLCByb3dzOiBudW1iZXIsIGNvbHM6IG51bWJlciwgcm90YXRpb25zOiBudW1iZXIpOiBHcmlkUG9zaXRpb24gPT4ge1xuICBjb25zdCBxdWFkcmFudHMgPSByb3RhdGlvbnMgJSA0O1xuICBzd2l0Y2ggKHF1YWRyYW50cyA8IDAgPyA0IC0gcXVhZHJhbnRzIDogcXVhZHJhbnRzKSB7XG4gICAgY2FzZSAxOiByZXR1cm4geyByb3c6IGNvbCwgY29sOiByb3dzIC0gcm93IC0gMSB9O1xuICAgIGNhc2UgMjogcmV0dXJuIHsgcm93OiByb3dzIC0gcm93IC0gMSwgY29sOiBjb2xzIC0gY29sIC0gMSB9O1xuICAgIGNhc2UgMzogcmV0dXJuIHsgcm93OiBjb2xzIC0gY29sIC0gMSwgY29sOiByb3cgfTtcbiAgICBkZWZhdWx0OiByZXR1cm4geyByb3csIGNvbCB9O1xuICB9XG59O1xuIiwiaW1wb3J0IHsgTmVlZCB9IGZyb20gXCIuL3R5cGVzL2NvbW1vblwiO1xuXG5jb25zdCBNVU5EQU5FX1ZBUklBTlQgPSAnbXVuZGFuZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbGUge1xuICBwdWJsaWMgdHlwZTogc3RyaW5nO1xuICBwdWJsaWMgdmFsdWU6IG51bWJlcjtcbiAgcHVibGljIGV4cGxvZGUgPSBmYWxzZTtcbiAgcHVibGljIF92YXJpYW50ITogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHsgdHlwZSwgdmFsdWUsIHZhcmlhbnQgfTogTmVlZDxUaWxlLCAndHlwZSc+KSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWUgfHwgMTtcbiAgICB0aGlzLl92YXJpYW50ID0gdmFyaWFudCB8fCBNVU5EQU5FX1ZBUklBTlQ7XG4gIH1cblxuICBzZXQgdmFyaWFudCh2YXJpYW50OiBzdHJpbmcpIHsgdGhpcy5fdmFyaWFudCA9IHZhcmlhbnQgfHwgTVVOREFORV9WQVJJQU5UIH1cbiAgZ2V0IHZhcmlhbnQoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuX3ZhcmlhbnQgfHwgTVVOREFORV9WQVJJQU5UIH1cblxuICBnZXQgaXNNdW5kYW5lKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy52YXJpYW50ID09PSBNVU5EQU5FX1ZBUklBTlQgfVxufVxuIiwiaW1wb3J0IFRpbGUgZnJvbSBcIi4vVGlsZVwiO1xuaW1wb3J0IHsgcmFuZ2UsIHNhbXBsZSwgcm90YXRlIH0gZnJvbSBcIi4vY29uY2VybnMvdXRpbGl0aWVzXCI7XG5pbXBvcnQgeyBOZWVkIH0gZnJvbSBcIi4vdHlwZXMvY29tbW9uXCI7XG5cblxuLy8gZXhwb3J0IGludGVyZmFjZSBNdW5kYW5lVGlsZURlZjxUaWxlQ2xhc3MgZXh0ZW5kcyBUaWxlPiB7XG4vLyAgIHNwZWNpYWw6IGZhbHNlO1xuLy8gICBnZW5lcmF0b3I6ICgpID0+IFRpbGVDbGFzcztcbi8vIH1cblxuLy8gZXhwb3J0IGludGVyZmFjZSBTcGVjaWFsVGlsZURlZjxUaWxlQ2xhc3MgZXh0ZW5kcyBUaWxlPiB7XG4vLyAgIHNwZWNpYWw6IHRydWU7XG4vLyAgIGdlbmVyYXRvcjogKCkgPT4gVGlsZUNsYXNzO1xuLy8gfVxuXG4vLyBleHBvcnQgdHlwZSBUaWxlRGVmPFRpbGVDbGFzcyBleHRlbmRzIFRpbGU+ID0gTXVuZGFuZVRpbGVEZWY8VGlsZUNsYXNzPiB8IFNwZWNpYWxUaWxlRGVmPFRpbGVDbGFzcz47XG5cbi8vIGV4cG9ydCBpbnRlcmZhY2UgTXVuZGFuZVRpbGVEZWZzPFRpbGVDbGFzcyBleHRlbmRzIFRpbGU+IHtcbi8vICAgW3R5cGU6IHN0cmluZ106IE11bmRhbmVUaWxlRGVmPFRpbGVDbGFzcz47XG4vLyB9XG5cbi8vIGV4cG9ydCBpbnRlcmZhY2UgU3BlY2lhbFRpbGVEZWZzPFRpbGVDbGFzcyBleHRlbmRzIFRpbGU+IHtcbi8vICAgW3R5cGU6IHN0cmluZ106IE11bmRhbmVUaWxlRGVmPFRpbGVDbGFzcz47XG4vLyB9XG5cbi8vIGV4cG9ydCBpbnRlcmZhY2UgVGlsZURlZnM8VGlsZUNsYXNzIGV4dGVuZHMgVGlsZT4ge1xuLy8gICBbdHlwZTogc3RyaW5nXTogVGlsZURlZjxUaWxlQ2xhc3M+O1xuLy8gfVxuXG5leHBvcnQgdHlwZSBUaWxlR2VuZXJhdG9yPFRpbGVDbGFzcyBleHRlbmRzIFRpbGU+ID0gKG9wdHM6IFBpY2s8VGlsZUNsYXNzLCAndmFyaWFudCc+KSA9PiBUaWxlQ2xhc3M7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTXVuZGFuZVRpbGVEZWY8VGlsZUNsYXNzIGV4dGVuZHMgVGlsZT4ge1xuICBnZW5lcmF0b3I6IFRpbGVHZW5lcmF0b3I8VGlsZUNsYXNzPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTcGVjaWFsVGlsZURlZjxUaWxlQ2xhc3MgZXh0ZW5kcyBUaWxlPiB7XG4gIGdlbmVyYXRvcjogVGlsZUdlbmVyYXRvcjxUaWxlQ2xhc3M+O1xufVxuXG5leHBvcnQgdHlwZSBUaWxlRGVmPFRpbGVDbGFzcyBleHRlbmRzIFRpbGU+ID0gTXVuZGFuZVRpbGVEZWY8VGlsZUNsYXNzPiB8IFNwZWNpYWxUaWxlRGVmPFRpbGVDbGFzcz47XG5cbmV4cG9ydCBpbnRlcmZhY2UgTXVuZGFuZVRpbGVEZWZzPFRpbGVDbGFzcyBleHRlbmRzIFRpbGU+IHtcbiAgW3R5cGU6IHN0cmluZ106IE11bmRhbmVUaWxlRGVmPFRpbGVDbGFzcz47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3BlY2lhbFRpbGVEZWZzPFRpbGVDbGFzcyBleHRlbmRzIFRpbGU+IHtcbiAgW3R5cGU6IHN0cmluZ106IE11bmRhbmVUaWxlRGVmPFRpbGVDbGFzcz47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGlsZURlZnM8VGlsZUNsYXNzIGV4dGVuZHMgVGlsZT4ge1xuICBbdHlwZTogc3RyaW5nXTogVGlsZURlZjxUaWxlQ2xhc3M+O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb2FyZDxUaWxlQ2xhc3MgZXh0ZW5kcyBUaWxlID0gVGlsZT4ge1xuICBwdWJsaWMgcm93Q291bnQgPSA5O1xuICBwdWJsaWMgY29sQ291bnQgPSA5O1xuICBwdWJsaWMgdGlsZUNsYXNzID0gVGlsZTtcbiAgcHVibGljIHRpbGVEZWZzOiBUaWxlRGVmczxUaWxlQ2xhc3M+O1xuICBwcml2YXRlIF9yb3dzPzogVGlsZUNsYXNzW11bXTtcblxuICBjb25zdHJ1Y3RvcihvcHRzOiBOZWVkPEJvYXJkPFRpbGVDbGFzcz4sICd0aWxlRGVmcyc+KSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRzKTtcbiAgICB0aGlzLnRpbGVEZWZzID0gb3B0cy50aWxlRGVmcztcbiAgfVxuXG4gIGdldCByb3dzKCk6IFRpbGVDbGFzc1tdW10ge1xuICAgIHRoaXMuX3Jvd3MgPSB0aGlzLl9yb3dzIHx8IHRoaXMubmV3Um93cygpO1xuICAgIHJldHVybiB0aGlzLl9yb3dzO1xuICB9XG5cbiAgc2V0IHJvd3Mocm93czogVGlsZUNsYXNzW11bXSkge1xuICAgIHRoaXMuX3Jvd3MgPSByb3dzO1xuICB9XG5cbiAgZ2V0IHRpbGVzKCk6IFRpbGVDbGFzc1tdIHtcbiAgICByZXR1cm4gdGhpcy5yb3dzLnJlZHVjZSgodGlsZXMsIHJvdykgPT4gWy4uLnRpbGVzLCAuLi5yb3ddLCBbXSk7XG4gIH1cblxuICBnZXQgdGlsZVR5cGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy50aWxlRGVmcyk7XG4gIH1cblxuICAvLyBnZXQgbXVuZGFuZVRpbGVUeXBlcygpOiBzdHJpbmdbXSB7XG4gIC8vICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMubXVuZGFuZVRpbGVEZWZzKTtcbiAgLy8gfVxuXG4gIC8vIGdldCBzcGVjaWFsVGlsZVR5cGVzKCk6IHN0cmluZ1tdIHtcbiAgLy8gICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5zcGVjaWFsVGlsZURlZnMpO1xuICAvLyB9XG5cbiAgLy8gZ2V0IG11bmRhbmVUaWxlRGVmcygpOiBNdW5kYW5lVGlsZURlZnM8VGlsZUNsYXNzPiB7XG4gIC8vICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMudGlsZURlZnMpLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gIC8vICAgICBjb25zdCBkZWZpbml0aW9uID0gdGhpcy50aWxlRGVmc1trZXldO1xuICAvLyAgICAgcmV0dXJuIGRlZmluaXRpb24uc3BlY2lhbCA/IG1lbW8gOiAoeyAuLi5tZW1vLCBba2V5XTogZGVmaW5pdGlvbiB9IGFzIE11bmRhbmVUaWxlRGVmczxUaWxlQ2xhc3M+KTtcbiAgLy8gICB9LCB7fSk7XG4gIC8vIH1cblxuICAvLyBnZXQgc3BlY2lhbFRpbGVEZWZzKCk6IFNwZWNpYWxUaWxlRGVmczxUaWxlQ2xhc3M+IHtcbiAgLy8gICByZXR1cm4gT2JqZWN0LmtleXModGhpcy50aWxlRGVmcykucmVkdWNlKChtZW1vLCBrZXkpID0+IHtcbiAgLy8gICAgIGNvbnN0IGRlZmluaXRpb24gPSB0aGlzLnRpbGVEZWZzW2tleV07XG4gIC8vICAgICByZXR1cm4gZGVmaW5pdGlvbi5zcGVjaWFsID8gKHsgLi4ubWVtbywgW2tleV06IGRlZmluaXRpb24gfSBhcyBTcGVjaWFsVGlsZURlZnM8VGlsZUNsYXNzPikgOiBtZW1vO1xuICAvLyAgIH0sIHt9KTtcbiAgLy8gfVxuXG4gIC8vIG5ld011bmRhbmVUaWxlKCk6IFRpbGVDbGFzcyB7XG4gIC8vICAgY29uc3QgeyBtdW5kYW5lVGlsZVR5cGVzLCBtdW5kYW5lVGlsZURlZnMgfSA9IHRoaXM7XG4gIC8vICAgY29uc3QgdGlsZVR5cGUgPSBzYW1wbGUobXVuZGFuZVRpbGVUeXBlcyk7XG4gIC8vICAgY29uc3QgdGlsZURlZiA9IG11bmRhbmVUaWxlRGVmc1t0aWxlVHlwZV07XG4gIC8vICAgcmV0dXJuIHRpbGVEZWYuZ2VuZXJhdG9yKCk7XG4gIC8vIH1cblxuICAvLyBuZXdTcGVjaWFsVGlsZSgpOiBUaWxlQ2xhc3Mge1xuICAvLyAgIGNvbnN0IHsgc3BlY2lhbFRpbGVUeXBlcywgc3BlY2lhbFRpbGVEZWZzIH0gPSB0aGlzO1xuICAvLyAgIGNvbnN0IHRpbGVUeXBlID0gc2FtcGxlKHNwZWNpYWxUaWxlVHlwZXMpO1xuICAvLyAgIGNvbnN0IHRpbGVEZWYgPSBzcGVjaWFsVGlsZURlZnNbdGlsZVR5cGVdO1xuICAvLyAgIHJldHVybiB0aWxlRGVmLmdlbmVyYXRvcigpO1xuICAvLyB9XG5cbiAgbmV3TXVuZGFuZVRpbGUoKTogVGlsZUNsYXNzIHtcbiAgICBjb25zdCB0aWxlVHlwZSA9IHNhbXBsZSh0aGlzLnRpbGVUeXBlcyk7XG4gICAgY29uc3QgdGlsZURlZiA9IHRoaXMudGlsZURlZnNbdGlsZVR5cGVdO1xuICAgIHJldHVybiB0aWxlRGVmLmdlbmVyYXRvcih7IHZhcmlhbnQ6ICdtdW5kYW5lJyB9KTtcbiAgfVxuXG4gIG5ld1Jvd3MoKTogVGlsZUNsYXNzW11bXSB7XG4gICAgcmV0dXJuIHJhbmdlKHRoaXMucm93Q291bnQsICgpID0+IChyYW5nZSh0aGlzLmNvbENvdW50LCAoKSA9PiB0aGlzLm5ld011bmRhbmVUaWxlKCkpKSk7XG4gIH1cblxuICAvLyBwcml2YXRlIGRlZmF1bHROZXdUaWxlT2ZUeXBlKHR5cGU6IHN0cmluZywgdmFyaWFudD86IHN0cmluZyk6IFRpbGVDbGFzcyB7XG4gIC8vICAgcmV0dXJuIG5ldyBUaWxlKHtcbiAgLy8gICAgIHR5cGUsXG4gIC8vICAgICB2YXJpYW50LFxuICAvLyAgIH0pO1xuICAvLyB9XG59XG4iLCJjb25zdCBnYW1lTG9vcCA9IChjOiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGRyYXc6IChsb29wQ291bnQ6IG51bWJlcikgPT4gdm9pZCwgbG9vcENvdW50ID0gMCk6IHZvaWQgPT4ge1xuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gZ2FtZUxvb3AoYywgZHJhdywgbG9vcENvdW50ICsgMSkpO1xuICBjLmNsZWFyUmVjdCgwLCAwLCB3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgZHJhdyhsb29wQ291bnQpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2FtZUxvb3A7XG4iLCJjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblxuY29uc3Qgc3RyZXRjaENhbnZhcyA9ICgpOiB2b2lkID0+IHtcbiAgY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gIGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG59O1xuXG5zdHJldGNoQ2FudmFzKCk7XG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RyZXRjaENhbnZhcyk7XG5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcyk7XG5cbmNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpITtcbmlmICghY3R4KSBjb25zb2xlLmVycm9yKFwiQ2FudmFzICcyZCcgY29udGV4dCBpcyBub3Qgc3VwcG9ydGVkLlwiKTtcblxuZXhwb3J0IHsgY3R4IH07XG5leHBvcnQgZGVmYXVsdCBjYW52YXM7XG4iLCJpbXBvcnQgeyBDb29yZFBvc2l0aW9uIH0gZnJvbSBcIi4uL3R5cGVzL2NvbW1vblwiO1xuaW1wb3J0IHsgcm90YXRlUG9pbnQgfSBmcm9tIFwiLi91dGlsaXRpZXNcIjtcblxuZXhwb3J0IGNvbnN0IGRyYXdBcnJvdyA9IChcbiAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gIGRpcjogJ3VwJ3wnZG93bid8J2xlZnQnfCdyaWdodCcsXG4gIGZpbGxTdHlsZTogc3RyaW5nLFxuICBzdHJva2VTdHlsZTogc3RyaW5nLFxuICBjZW50ZXI6IENvb3JkUG9zaXRpb24sXG4gIHdpZHRoOiBudW1iZXIsXG4gIGxlbmd0aDogbnVtYmVyXG4pOiB2b2lkID0+IHtcbiAgY29uc3QgaGVhZFdpZHRoID0gd2lkdGggKiAyO1xuICBjb25zdCBoZWFkTGVuZ3RoID0gMC43NSAqIGhlYWRXaWR0aDtcbiAgY29uc3QgdGFpbFdpZHRoID0gd2lkdGg7XG4gIGNvbnN0IHRhaWxMZW5ndGggPSBsZW5ndGggLSBoZWFkTGVuZ3RoO1xuICAvLyBjb25zdCB0YWlsQm90dG9tID0gY2VudGVyLnkgKyAodGFpbFdpZHRoIC8gMik7IC8vIGxpa2UgYWZmaXhpbmcgaXQgd2l0aCBhIG5haWwgc28gdGhhdCBpdCdzIGNlbnRlcmVkIHNlbWktc3F1YXJlIHdpdGggdGhlIGVuZFxuICBjb25zdCB0YWlsQm90dG9tID0gY2VudGVyLnkgKyAodGFpbExlbmd0aCAvIDIpICsgKGhlYWRMZW5ndGggLyAyKTtcbiAgY29uc3QgdGFpbFRvcCA9IHRhaWxCb3R0b20gLSB0YWlsTGVuZ3RoO1xuICBjb25zdCB0YWlsTGVmdCA9IGNlbnRlci54IC0gKHRhaWxXaWR0aCAvIDIpO1xuICBjb25zdCB0YWlsUmlnaHQgPSBjZW50ZXIueCArICh0YWlsV2lkdGggLyAyKTtcbiAgY29uc3QgaGVhZEJvdHRvbSA9IHRhaWxUb3A7XG4gIGNvbnN0IGhlYWRUb3AgPSBoZWFkQm90dG9tIC0gaGVhZExlbmd0aDtcbiAgY29uc3QgaGVhZExlZnQgPSBjZW50ZXIueCAtIChoZWFkV2lkdGggLyAyKTtcbiAgY29uc3QgaGVhZFJpZ2h0ID0gY2VudGVyLnggKyAoaGVhZFdpZHRoIC8gMik7XG5cbiAgY29uc3QgYW5nbGUgPSB7XG4gICAgdXA6IDAsXG4gICAgcmlnaHQ6IDAuNSAqIE1hdGguUEksXG4gICAgZG93bjogTWF0aC5QSSxcbiAgICBsZWZ0OiAxLjUgKiBNYXRoLlBJLFxuICB9W2Rpcl07XG5cbiAgY29uc3QgcG9pbnRzID0gW1xuICAgIHsgeDogdGFpbExlZnQsIHk6IHRhaWxUb3AgfSxcbiAgICB7IHg6IHRhaWxMZWZ0LCB5OiB0YWlsQm90dG9tIH0sXG4gICAgeyB4OiB0YWlsUmlnaHQsIHk6IHRhaWxCb3R0b20gfSxcbiAgICB7IHg6IHRhaWxSaWdodCwgeTogdGFpbFRvcCB9LFxuICAgIHsgeDogaGVhZFJpZ2h0LCB5OiBoZWFkQm90dG9tIH0sXG4gICAgeyB4OiBjZW50ZXIueCwgeTogaGVhZFRvcCB9LFxuICAgIHsgeDogaGVhZExlZnQsIHk6IGhlYWRCb3R0b20gfSxcbiAgXTtcblxuICBjb25zdCByb3RhdGVkUG9pbnRzID0gYW5nbGUgPyBwb2ludHMubWFwKHB0ID0+IHJvdGF0ZVBvaW50KHB0LCBjZW50ZXIsIGFuZ2xlKSkgOiBwb2ludHM7XG5cbiAgY3R4LmZpbGxTdHlsZSA9IGZpbGxTdHlsZTtcbiAgY3R4LnN0cm9rZVN0eWxlID0gc3Ryb2tlU3R5bGU7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY29uc3Qgc3RhcnRQb2ludCA9IHJvdGF0ZWRQb2ludHNbMF07XG4gIGN0eC5tb3ZlVG8oc3RhcnRQb2ludC54LCBzdGFydFBvaW50LnkpO1xuICByb3RhdGVkUG9pbnRzLmZvckVhY2goKHsgeCwgeSB9KSA9PiBjdHgubGluZVRvKHgsIHkpKTtcbiAgY3R4LmxpbmVUbyhzdGFydFBvaW50LngsIHN0YXJ0UG9pbnQueSk7XG4gIGN0eC5jbG9zZVBhdGgoKTtcbiAgY3R4LmZpbGwoKTtcbiAgaWYgKHN0cm9rZVN0eWxlKSBjdHguc3Ryb2tlKCk7XG59O1xuXG5leHBvcnQgY29uc3QgZHJhd0RvdWJsZUFycm93ID0gKFxuICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgZGlyOiAnaG9yaXpvbnRhbCd8J3ZlcnRpY2FsJyxcbiAgZmlsbFN0eWxlOiBzdHJpbmcsXG4gIHN0cm9rZVN0eWxlOiBzdHJpbmcsXG4gIGNlbnRlcjogQ29vcmRQb3NpdGlvbixcbiAgd2lkdGg6IG51bWJlcixcbiAgbGVuZ3RoOiBudW1iZXJcbik6IHZvaWQgPT4ge1xuICBjb25zdCBoZWFkV2lkdGggPSB3aWR0aCAqIDI7XG4gIGNvbnN0IGhlYWRMZW5ndGggPSAwLjc1ICogaGVhZFdpZHRoO1xuICBjb25zdCB0YWlsV2lkdGggPSB3aWR0aDtcbiAgY29uc3QgdGFpbExlbmd0aCA9IGxlbmd0aCAtIChoZWFkTGVuZ3RoICogMik7XG4gIGNvbnN0IHRhaWxCb3R0b20gPSBjZW50ZXIueSArICh0YWlsTGVuZ3RoIC8gMik7XG4gIGNvbnN0IHRhaWxUb3AgPSB0YWlsQm90dG9tIC0gdGFpbExlbmd0aDtcbiAgY29uc3QgdGFpbExlZnQgPSBjZW50ZXIueCAtICh0YWlsV2lkdGggLyAyKTtcbiAgY29uc3QgdGFpbFJpZ2h0ID0gY2VudGVyLnggKyAodGFpbFdpZHRoIC8gMik7XG4gIGNvbnN0IGhlYWRMZWZ0ID0gY2VudGVyLnggLSAoaGVhZFdpZHRoIC8gMik7XG4gIGNvbnN0IGhlYWRSaWdodCA9IGNlbnRlci54ICsgKGhlYWRXaWR0aCAvIDIpO1xuICBjb25zdCB0b3BIZWFkQmFzZSA9IHRhaWxUb3A7XG4gIGNvbnN0IHRvcEhlYWRUaXAgPSB0b3BIZWFkQmFzZSAtIGhlYWRMZW5ndGg7XG4gIGNvbnN0IGJvdHRvbUhlYWRCYXNlID0gdGFpbEJvdHRvbTtcbiAgY29uc3QgYm90dG9tSGVhZFRpcCA9IGJvdHRvbUhlYWRCYXNlICsgaGVhZExlbmd0aDtcblxuICBjb25zdCBhbmdsZSA9IHtcbiAgICB2ZXJ0aWNhbDogMCxcbiAgICBob3Jpem9udGFsOiAwLjUgKiBNYXRoLlBJLFxuICB9W2Rpcl07XG5cbiAgY29uc3QgcG9pbnRzID0gW1xuICAgIHsgeDogdGFpbExlZnQsIHk6IHRhaWxUb3AgfSxcbiAgICB7IHg6IHRhaWxMZWZ0LCB5OiB0YWlsQm90dG9tIH0sXG4gICAgeyB4OiBoZWFkTGVmdCwgeTogYm90dG9tSGVhZEJhc2UgfSxcbiAgICB7IHg6IGNlbnRlci54LCB5OiBib3R0b21IZWFkVGlwIH0sXG4gICAgeyB4OiBoZWFkUmlnaHQsIHk6IGJvdHRvbUhlYWRCYXNlIH0sXG4gICAgeyB4OiB0YWlsUmlnaHQsIHk6IHRhaWxCb3R0b20gfSxcbiAgICB7IHg6IHRhaWxSaWdodCwgeTogdGFpbFRvcCB9LFxuICAgIHsgeDogaGVhZFJpZ2h0LCB5OiB0b3BIZWFkQmFzZSB9LFxuICAgIHsgeDogY2VudGVyLngsIHk6IHRvcEhlYWRUaXAgfSxcbiAgICB7IHg6IGhlYWRMZWZ0LCB5OiB0b3BIZWFkQmFzZSB9LFxuICBdO1xuXG4gIGNvbnN0IHJvdGF0ZWRQb2ludHMgPSBhbmdsZSA/IHBvaW50cy5tYXAocHQgPT4gcm90YXRlUG9pbnQocHQsIGNlbnRlciwgYW5nbGUpKSA6IHBvaW50cztcblxuICBjdHguZmlsbFN0eWxlID0gZmlsbFN0eWxlO1xuICBjdHguc3Ryb2tlU3R5bGUgPSBzdHJva2VTdHlsZTtcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjb25zdCBzdGFydFBvaW50ID0gcm90YXRlZFBvaW50c1swXTtcbiAgY3R4Lm1vdmVUbyhzdGFydFBvaW50LngsIHN0YXJ0UG9pbnQueSk7XG4gIHJvdGF0ZWRQb2ludHMuZm9yRWFjaCgoeyB4LCB5IH0pID0+IGN0eC5saW5lVG8oeCwgeSkpO1xuICBjdHgubGluZVRvKHN0YXJ0UG9pbnQueCwgc3RhcnRQb2ludC55KTtcbiAgY3R4LmNsb3NlUGF0aCgpO1xuICBjdHguZmlsbCgpO1xuICBpZiAoc3Ryb2tlU3R5bGUpIGN0eC5zdHJva2UoKTtcbn07XG5cbmV4cG9ydCBjb25zdCBkcmF3Q3Jvc3NBcnJvdyA9IChcbiAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gIGZpbGxTdHlsZTogc3RyaW5nLFxuICBzdHJva2VTdHlsZTogc3RyaW5nLFxuICBjZW50ZXI6IENvb3JkUG9zaXRpb24sXG4gIHdpZHRoOiBudW1iZXIsXG4gIGxlbmd0aDogbnVtYmVyXG4pOiB2b2lkID0+IHtcbiAgY29uc3QgaGVhZFdpZHRoID0gd2lkdGggKiAyO1xuICBjb25zdCBoZWFkTGVuZ3RoID0gMC43NSAqIGhlYWRXaWR0aDtcbiAgY29uc3QgdGFpbFdpZHRoID0gd2lkdGg7XG4gIGNvbnN0IHRhaWxJbnRlcnNlY3Rpb25XaWR0aCA9IHRhaWxXaWR0aDtcbiAgY29uc3QgdGFpbEludGVyc2VjdGlvbkhlaWdodCA9IHRhaWxJbnRlcnNlY3Rpb25XaWR0aDtcbiAgY29uc3QgdGFpbExlbmd0aCA9IGxlbmd0aCAtIChoZWFkTGVuZ3RoICogMikgLSB0YWlsSW50ZXJzZWN0aW9uV2lkdGg7XG5cbiAgY29uc3Qgbm9ydGhUYWlsQmFzZSA9IGNlbnRlci55IC0gKHRhaWxJbnRlcnNlY3Rpb25IZWlnaHQgLyAyKTtcbiAgY29uc3Qgbm9ydGhUYWlsVGlwID0gbm9ydGhUYWlsQmFzZSAtIHRhaWxMZW5ndGg7XG4gIGNvbnN0IHNvdXRoVGFpbEJhc2UgPSBjZW50ZXIueSArICh0YWlsSW50ZXJzZWN0aW9uSGVpZ2h0IC8gMik7XG4gIGNvbnN0IHNvdXRoVGFpbFRpcCA9IHNvdXRoVGFpbEJhc2UgKyB0YWlsTGVuZ3RoO1xuICBjb25zdCB3ZXN0VGFpbEJhc2UgPSBjZW50ZXIueCAtICh0YWlsSW50ZXJzZWN0aW9uV2lkdGggLyAyKTtcbiAgY29uc3Qgd2VzdFRhaWxUaXAgPSB3ZXN0VGFpbEJhc2UgLSB0YWlsTGVuZ3RoO1xuICBjb25zdCBlYXN0VGFpbEJhc2UgPSBjZW50ZXIueCArICh0YWlsSW50ZXJzZWN0aW9uV2lkdGggLyAyKTtcbiAgY29uc3QgZWFzdFRhaWxUaXAgPSBlYXN0VGFpbEJhc2UgKyB0YWlsTGVuZ3RoO1xuXG4gIGNvbnN0IG5vcnRoSGVhZEJhc2UgPSBub3J0aFRhaWxUaXA7XG4gIGNvbnN0IG5vcnRoSGVhZFRpcCA9IG5vcnRoSGVhZEJhc2UgLSBoZWFkTGVuZ3RoO1xuICBjb25zdCBzb3V0aEhlYWRCYXNlID0gc291dGhUYWlsVGlwO1xuICBjb25zdCBzb3V0aEhlYWRUaXAgPSBzb3V0aEhlYWRCYXNlICsgaGVhZExlbmd0aDtcbiAgY29uc3Qgd2VzdEhlYWRCYXNlID0gd2VzdFRhaWxUaXA7XG4gIGNvbnN0IHdlc3RIZWFkVGlwID0gd2VzdEhlYWRCYXNlIC0gaGVhZExlbmd0aDtcbiAgY29uc3QgZWFzdEhlYWRCYXNlID0gZWFzdFRhaWxUaXA7XG4gIGNvbnN0IGVhc3RIZWFkVGlwID0gZWFzdEhlYWRCYXNlICsgaGVhZExlbmd0aDtcblxuICBjb25zdCBob3Jpem9udGFsVGFpbFRvcCA9IG5vcnRoVGFpbEJhc2U7XG4gIGNvbnN0IGhvcml6b250YWxUYWlsQm90dG9tID0gc291dGhUYWlsQmFzZTtcbiAgY29uc3QgdmVydGljYWxUYWlsTGVmdCA9IHdlc3RUYWlsQmFzZTtcbiAgY29uc3QgdmVydGljYWxUYWlsUmlnaHQgPSBlYXN0VGFpbEJhc2U7XG4gIGNvbnN0IGhvcml6b250YWxIZWFkVG9wID0gY2VudGVyLnkgLSAoaGVhZFdpZHRoIC8gMik7XG4gIGNvbnN0IGhvcml6b250YWxIZWFkQm90dG9tID0gY2VudGVyLnkgKyAoaGVhZFdpZHRoIC8gMik7XG4gIGNvbnN0IHZlcnRpY2FsSGVhZExlZnQgPSBjZW50ZXIueCAtIChoZWFkV2lkdGggLyAyKTtcbiAgY29uc3QgdmVydGljYWxIZWFkUmlnaHQgPSBjZW50ZXIueCArIChoZWFkV2lkdGggLyAyKTtcblxuICBjb25zdCBwb2ludHMgPSBbXG4gICAgeyB4OiB2ZXJ0aWNhbFRhaWxMZWZ0LCB5OiBub3J0aFRhaWxUaXAgfSxcbiAgICB7IHg6IHZlcnRpY2FsVGFpbExlZnQsIHk6IG5vcnRoVGFpbEJhc2UgfSxcbiAgICB7IHg6IHdlc3RUYWlsVGlwLCB5OiBob3Jpem9udGFsVGFpbFRvcCB9LFxuXG4gICAgeyB4OiB3ZXN0SGVhZEJhc2UsIHk6IGhvcml6b250YWxIZWFkVG9wIH0sXG4gICAgeyB4OiB3ZXN0SGVhZFRpcCwgeTogY2VudGVyLnkgfSxcbiAgICB7IHg6IHdlc3RIZWFkQmFzZSwgeTogaG9yaXpvbnRhbEhlYWRCb3R0b20gfSxcblxuICAgIHsgeDogd2VzdFRhaWxUaXAsIHk6IGhvcml6b250YWxUYWlsQm90dG9tIH0sXG4gICAgeyB4OiB3ZXN0VGFpbEJhc2UsIHk6IGhvcml6b250YWxUYWlsQm90dG9tIH0sXG4gICAgeyB4OiB2ZXJ0aWNhbFRhaWxMZWZ0LCB5OiBzb3V0aFRhaWxUaXAgfSxcblxuICAgIHsgeDogdmVydGljYWxIZWFkTGVmdCwgeTogc291dGhIZWFkQmFzZSB9LFxuICAgIHsgeDogY2VudGVyLngsIHk6IHNvdXRoSGVhZFRpcCB9LFxuICAgIHsgeDogdmVydGljYWxIZWFkUmlnaHQsIHk6IHNvdXRoSGVhZEJhc2UgfSxcblxuICAgIHsgeDogdmVydGljYWxUYWlsUmlnaHQsIHk6IHNvdXRoVGFpbFRpcCB9LFxuICAgIHsgeDogdmVydGljYWxUYWlsUmlnaHQsIHk6IHNvdXRoVGFpbEJhc2UgfSxcbiAgICB7IHg6IGVhc3RUYWlsVGlwLCB5OiBob3Jpem9udGFsVGFpbEJvdHRvbSB9LFxuXG4gICAgeyB4OiBlYXN0SGVhZEJhc2UsIHk6IGhvcml6b250YWxIZWFkQm90dG9tIH0sXG4gICAgeyB4OiBlYXN0SGVhZFRpcCwgeTogY2VudGVyLnkgfSxcbiAgICB7IHg6IGVhc3RIZWFkQmFzZSwgeTogaG9yaXpvbnRhbEhlYWRUb3AgfSxcblxuICAgIHsgeDogZWFzdFRhaWxUaXAsIHk6IGhvcml6b250YWxUYWlsVG9wIH0sXG4gICAgeyB4OiBlYXN0VGFpbEJhc2UsIHk6IGhvcml6b250YWxUYWlsVG9wIH0sXG4gICAgeyB4OiB2ZXJ0aWNhbFRhaWxSaWdodCwgeTogbm9ydGhUYWlsVGlwIH0sXG5cbiAgICB7IHg6IHZlcnRpY2FsSGVhZFJpZ2h0LCB5OiBub3J0aEhlYWRCYXNlIH0sXG4gICAgeyB4OiBjZW50ZXIueCwgeTogbm9ydGhIZWFkVGlwIH0sXG4gICAgeyB4OiB2ZXJ0aWNhbEhlYWRMZWZ0LCB5OiBub3J0aEhlYWRCYXNlIH0sXG4gIF07XG5cbiAgY3R4LmZpbGxTdHlsZSA9IGZpbGxTdHlsZTtcbiAgY3R4LnN0cm9rZVN0eWxlID0gc3Ryb2tlU3R5bGU7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY29uc3Qgc3RhcnRQb2ludCA9IHBvaW50c1swXTtcbiAgY3R4Lm1vdmVUbyhzdGFydFBvaW50LngsIHN0YXJ0UG9pbnQueSk7XG4gIHBvaW50cy5mb3JFYWNoKCh7IHgsIHkgfSkgPT4gY3R4LmxpbmVUbyh4LCB5KSk7XG4gIGN0eC5saW5lVG8oc3RhcnRQb2ludC54LCBzdGFydFBvaW50LnkpO1xuICBjdHguY2xvc2VQYXRoKCk7XG4gIGN0eC5maWxsKCk7XG4gIGlmIChzdHJva2VTdHlsZSkgY3R4LnN0cm9rZSgpO1xufTtcbiIsImltcG9ydCBUaWxlIGZyb20gXCIuLi9UaWxlXCI7XG5pbXBvcnQgeyBOZWVkLCBDb29yZFBvc2l0aW9uIH0gZnJvbSBcIi4uL3R5cGVzL2NvbW1vblwiO1xuaW1wb3J0IHsgZHJhd0RvdWJsZUFycm93LCBkcmF3QXJyb3csIGRyYXdDcm9zc0Fycm93IH0gZnJvbSBcIi4uL2NvbmNlcm5zL2RyYXdpbmdcIjtcblxuY29uc3QgTUFYX0NPTE9SX0lOVCA9IHBhcnNlSW50KFwiRkZGRkZGXCIsIDE2KTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FudmFzVGlsZSBleHRlbmRzIFRpbGUge1xuICBwdWJsaWMgd2lkdGggPSA1MDtcbiAgcHVibGljIGhlaWdodCA9IDUwO1xuICBwdWJsaWMgY29sb3IgPSAnd2hpdGUnO1xuICBwdWJsaWMgc2VsZWN0ZWQgPSBmYWxzZTtcbiAgcHVibGljIHRhcmdldGVkID0gZmFsc2U7XG4gIHB1YmxpYyBtYXRjaGVkQXQgPSBudWxsIGFzIERhdGV8bnVsbDtcbiAgcHVibGljIGJsYW5rID0gZmFsc2U7XG4gIHB1YmxpYyBtYXRjaEFuaW1hdGlvbk1zID0gMjUwO1xuICBwdWJsaWMgYXBwbHlOb3JtYWxTdHlsZTogKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB0aWxlOiBDYW52YXNUaWxlLCBwb3M6IENvb3JkUG9zaXRpb24pID0+IHZvaWQ7XG4gIHB1YmxpYyBhcHBseVNlbGVjdGVkU3R5bGU6IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgdGlsZTogQ2FudmFzVGlsZSwgcG9zOiBDb29yZFBvc2l0aW9uKSA9PiB2b2lkO1xuICBwdWJsaWMgYXBwbHlUYXJnZXRlZFN0eWxlOiAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHRpbGU6IENhbnZhc1RpbGUsIHBvczogQ29vcmRQb3NpdGlvbikgPT4gdm9pZDtcbiAgcHVibGljIGFwcGx5TWF0Y2hlZFN0eWxlOiAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHRpbGU6IENhbnZhc1RpbGUsIHBvczogQ29vcmRQb3NpdGlvbikgPT4gdm9pZDtcbiAgcHJpdmF0ZSBfaW1nVXJsID0gJyc7XG4gIHByaXZhdGUgX2ltYWdlPzogSFRNTEltYWdlRWxlbWVudDtcbiAgcHJpdmF0ZSBibGFua1RpbWVvdXQ/OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3Iob3B0czogTmVlZDxDYW52YXNUaWxlLCAndHlwZSc+KSB7XG4gICAgc3VwZXIob3B0cyk7XG5cbiAgICB0aGlzLndpZHRoID0gb3B0cy53aWR0aCB8fCB0aGlzLndpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gb3B0cy5oZWlnaHQgfHwgdGhpcy5oZWlnaHQ7XG4gICAgdGhpcy5jb2xvciA9IG9wdHMuY29sb3IgfHwgdGhpcy5jb2xvcjtcbiAgICB0aGlzLmJsYW5rID0gb3B0cy5ibGFuayB8fCB0aGlzLmJsYW5rO1xuICAgIHRoaXMubWF0Y2hBbmltYXRpb25NcyA9IG9wdHMubWF0Y2hBbmltYXRpb25NcyB8fCB0aGlzLm1hdGNoQW5pbWF0aW9uTXM7XG4gICAgdGhpcy5faW1nVXJsID0gb3B0cy5pbWdVcmwgfHwgdGhpcy5faW1nVXJsO1xuICAgIHRoaXMuYXBwbHlOb3JtYWxTdHlsZSA9IG9wdHMuYXBwbHlOb3JtYWxTdHlsZSB8fCB0aGlzLmRlZmF1bHRBcHBseU5vcm1hbFN0eWxlO1xuICAgIHRoaXMuYXBwbHlTZWxlY3RlZFN0eWxlID0gb3B0cy5hcHBseVNlbGVjdGVkU3R5bGUgfHwgdGhpcy5kZWZhdWx0QXBwbHlTZWxlY3RlZFN0eWxlO1xuICAgIHRoaXMuYXBwbHlUYXJnZXRlZFN0eWxlID0gb3B0cy5hcHBseVRhcmdldGVkU3R5bGUgfHwgdGhpcy5kZWZhdWx0QXBwbHlUYXJnZXRlZFN0eWxlO1xuICAgIHRoaXMuYXBwbHlNYXRjaGVkU3R5bGUgPSBvcHRzLmFwcGx5TWF0Y2hlZFN0eWxlIHx8IHRoaXMuZGVmYXVsdEFwcGx5TWF0Y2hlZFN0eWxlO1xuICB9XG5cbiAgZ2V0IG1hdGNoZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5tYXRjaGVkQXQ7XG4gIH1cblxuICBzZXQgbWF0Y2hlZChtYXRjaGVkOiBib29sZWFuKSB7XG4gICAgaWYgKG1hdGNoZWQgJiYgdGhpcy5tYXRjaGVkQXQpIHJldHVybjtcblxuICAgIGNsZWFyVGltZW91dCh0aGlzLmJsYW5rVGltZW91dCk7XG4gICAgaWYgKG1hdGNoZWQpIHtcbiAgICAgIHRoaXMubWF0Y2hlZEF0ID0gbmV3IERhdGUoKTtcbiAgICAgIHRoaXMuYmxhbmtUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdGhpcy5ibGFuayA9IHRydWUsIHRoaXMubWF0Y2hBbmltYXRpb25Ncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWF0Y2hlZEF0ID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBnZXQgaW1nVXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2ltZ1VybDtcbiAgfVxuXG4gIHNldCBpbWdVcmwoaW1nVXJsOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9pbWdVcmwgPSBpbWdVcmw7XG4gICAgZGVsZXRlIHRoaXMuX2ltYWdlO1xuICB9XG5cbiAgZ2V0IGltYWdlKCk6IG51bGx8SFRNTEltYWdlRWxlbWVudCB7XG4gICAgaWYgKHRoaXMuX2ltYWdlKSByZXR1cm4gdGhpcy5pbWFnZTtcbiAgICBpZiAoIXRoaXMuaW1nVXJsKSByZXR1cm4gbnVsbDtcblxuICAgIGNvbnN0IGltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgaW1hZ2Uuc3JjID0gdGhpcy5pbWdVcmw7XG4gICAgaW1hZ2Uud2lkdGggPSB0aGlzLndpZHRoO1xuICAgIGltYWdlLmhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuICAgIHRoaXMuX2ltYWdlID0gaW1hZ2U7XG5cbiAgICByZXR1cm4gdGhpcy5faW1hZ2U7XG4gIH1cblxuICBkcmF3KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLmJsYW5rKSByZXR1cm47XG5cbiAgICB0aGlzLmFwcGx5Tm9ybWFsU3R5bGUoY3R4LCB0aGlzLCB7IHgsIHkgfSk7XG4gICAgaWYgKHRoaXMubWF0Y2hlZCkge1xuICAgICAgdGhpcy5hcHBseU1hdGNoZWRTdHlsZShjdHgsIHRoaXMsIHsgeCwgeSB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMuYXBwbHlTZWxlY3RlZFN0eWxlKGN0eCwgdGhpcywgeyB4LCB5IH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy50YXJnZXRlZCkge1xuICAgICAgdGhpcy5hcHBseVRhcmdldGVkU3R5bGUoY3R4LCB0aGlzLCB7IHgsIHkgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBkZWZhdWx0QXBwbHlOb3JtYWxTdHlsZShjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgdGlsZTogQ2FudmFzVGlsZSwgeyB4LCB5IH06IENvb3JkUG9zaXRpb24pOiB2b2lkIHtcbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQsIGltYWdlLCBjb2xvciwgdmFyaWFudCB9ID0gdGlsZTtcblxuICAgIGlmIChpbWFnZSkge1xuICAgICAgY3R4LmRyYXdJbWFnZShpbWFnZSwgeCwgeSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICAgIGN0eC5maWxsUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG5cbiAgICBjb25zdCBjZW50ZXIgPSB7IHg6IHggKyAoaGVpZ2h0IC8gMiksIHk6IHkgKyAod2lkdGggLyAyKSB9O1xuICAgIGNvbnN0IGFycm93V2lkdGggPSB3aWR0aCAvIDg7XG4gICAgY29uc3QgYXJyb3dMZW5ndGggPSAwLjYgKiBoZWlnaHQ7XG4gICAgc3dpdGNoICh2YXJpYW50KSB7XG4gICAgICBjYXNlICdob3Jpem9udGFsQ2xlYXInOiBkcmF3RG91YmxlQXJyb3coY3R4LCAnaG9yaXpvbnRhbCcsICd3aGl0ZScsICd3aGl0ZScsIGNlbnRlciwgYXJyb3dXaWR0aCwgYXJyb3dMZW5ndGgpOyBicmVhaztcbiAgICAgIGNhc2UgJ3ZlcnRpY2FsQ2xlYXInOiBkcmF3RG91YmxlQXJyb3coY3R4LCAndmVydGljYWwnLCAnd2hpdGUnLCAnd2hpdGUnLCBjZW50ZXIsIGFycm93V2lkdGgsIGFycm93TGVuZ3RoKTsgYnJlYWs7XG4gICAgICBjYXNlICdjcm9zc0NsZWFyJzogZHJhd0Nyb3NzQXJyb3coY3R4LCAnd2hpdGUnLCAnd2hpdGUnLCBjZW50ZXIsIGFycm93V2lkdGgsIGFycm93TGVuZ3RoKTsgYnJlYWs7XG4gICAgICBjYXNlICd0eXBlQ2xlYXInOiB7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBgIyR7KChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwKSAlIE1BWF9DT0xPUl9JTlQpLnRvU3RyaW5nKDE2KX1gO1xuICAgICAgICBjdHguZmlsbFJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnYm9tYkNsZWFyJzoge1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gJ2JsYWNrJztcbiAgICAgICAgY29uc3QgYm94V2lkdGggPSB3aWR0aCAvIDI7XG4gICAgICAgIGNvbnN0IGJveEhlaWdodCA9IGhlaWdodCAvIDI7XG4gICAgICAgIGN0eC5maWxsUmVjdCh4ICsgKGJveFdpZHRoIC8gMiksIHkgKyAoYm94SGVpZ2h0IC8gMiksIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGRlZmF1bHRBcHBseVNlbGVjdGVkU3R5bGUoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHRpbGU6IENhbnZhc1RpbGUsIHsgeCwgeSB9OiBDb29yZFBvc2l0aW9uKTogdm9pZCB7XG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB0aWxlO1xuICAgIGN0eC5maWxsU3R5bGUgPSAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJztcbiAgICBjdHguZmlsbFJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gIH1cblxuICBwcml2YXRlIGRlZmF1bHRBcHBseVRhcmdldGVkU3R5bGUoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHRpbGU6IENhbnZhc1RpbGUsIHsgeCwgeSB9OiBDb29yZFBvc2l0aW9uKTogdm9pZCB7XG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB0aWxlO1xuICAgIGNvbnN0IG1pbGxpcyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGNvbnN0IHB1bHNlTXMgPSB0aGlzLm1hdGNoQW5pbWF0aW9uTXM7XG4gICAgY29uc3QgbWluU3Ryb2tlID0gMjtcbiAgICBjb25zdCBtYXhTdHJva2UgPSA1O1xuICAgIGNvbnN0IHN0cm9rZVdpZHRoID0gbWluU3Ryb2tlICsgKE1hdGguc2luKChtaWxsaXMgLyBwdWxzZU1zKSAlIE1hdGguUEkpICogKG1heFN0cm9rZSAtIG1pblN0cm9rZSkpO1xuICAgIGN0eC5maWxsU3R5bGUgPSAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjkpJztcbiAgICBjdHguZmlsbFJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IHRpbGUuY29sb3I7XG4gICAgY3R4LmZpbGxSZWN0KHggKyBzdHJva2VXaWR0aCwgeSArIHN0cm9rZVdpZHRoLCB3aWR0aCAtIChzdHJva2VXaWR0aCAqIDIpLCBoZWlnaHQgLSAoc3Ryb2tlV2lkdGggKiAyKSk7XG4gIH1cblxuICBwcml2YXRlIGRlZmF1bHRBcHBseU1hdGNoZWRTdHlsZShjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgdGlsZTogQ2FudmFzVGlsZSwgeyB4LCB5IH06IENvb3JkUG9zaXRpb24pOiB2b2lkIHtcbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQsIGNvbG9yLCBtYXRjaEFuaW1hdGlvbk1zIH0gPSB0aWxlO1xuICAgIGlmICghdGlsZS5tYXRjaGVkQXQpIHJldHVybjtcblxuICAgIGNvbnN0IG1zU2luY2VNYXRjaCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdGlsZS5tYXRjaGVkQXQuZ2V0VGltZSgpO1xuICAgIGNvbnN0IHBlcmNlbnREb25lID0gbXNTaW5jZU1hdGNoID4gbWF0Y2hBbmltYXRpb25NcyA/IDEgOiBtc1NpbmNlTWF0Y2ggLyBtYXRjaEFuaW1hdGlvbk1zO1xuICAgIGNvbnN0IGhvcml6b250YWwgPSBwZXJjZW50RG9uZSAqICh3aWR0aCAvIDIpO1xuICAgIGNvbnN0IHZlcnRpY2FsID0gcGVyY2VudERvbmUgKiAoaGVpZ2h0IC8gMik7XG4gICAgY3R4LmZpbGxTdHlsZSA9ICcjRkZGJztcbiAgICBjdHguZmlsbFJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IGNvbG9yO1xuICAgIGN0eC5maWxsUmVjdCh4ICsgaG9yaXpvbnRhbCwgeSArIHZlcnRpY2FsLCB3aWR0aCAtIChob3Jpem9udGFsICogMiksIGhlaWdodCAtICh2ZXJ0aWNhbCAqIDIpKTtcbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIE1vdXNlIHtcbiAgcHVibGljIHggPSAwO1xuICBwdWJsaWMgeSA9IDA7XG4gIHB1YmxpYyBwcmVzc2VkID0gZmFsc2U7XG4gIHB1YmxpYyBwcmVzc2VkU3RhcnRQb3M6IHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfTtcbiAgcHVibGljIHByZXNzQ2FsbGJhY2tzOiAoKG1vdXNlOiBNb3VzZSkgPT4gdm9pZClbXSA9IFtdO1xuICBwdWJsaWMgZGVwcmVzc0NhbGxiYWNrczogKChtb3VzZTogTW91c2UpID0+IHZvaWQpW10gPSBbXTtcbiAgcHVibGljIG1vdmVDYWxsYmFja3M6ICgobW91c2U6IE1vdXNlKSA9PiB2b2lkKVtdID0gW107XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5wcmVzc2VkU3RhcnRQb3MgPSB7IHg6IHRoaXMueCwgeTogdGhpcy55IH07XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICB0aGlzLnBvcHVsYXRlRnJvbU1vdXNlRXZlbnQoZXZlbnQpO1xuICAgICAgdGhpcy5wcmVzc0NhbGxiYWNrcy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKHRoaXMpKTtcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgKGV2ZW50KSA9PiB7XG4gICAgICB0aGlzLnBvcHVsYXRlRnJvbU1vdXNlRXZlbnQoZXZlbnQpO1xuICAgICAgdGhpcy5tb3ZlQ2FsbGJhY2tzLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2sodGhpcykpO1xuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgKGV2ZW50KSA9PiB7XG4gICAgICB0aGlzLmRlcHJlc3NDYWxsYmFja3MuZm9yRWFjaChjYWxsYmFjayA9PiBjYWxsYmFjayh0aGlzKSk7IC8vIHdlIHdhbnQgdGhpcyBvbmUgdG8gaGFwcGVuIGJlZm9yZSB0aGUgcmVzZXRcbiAgICAgIHRoaXMucG9wdWxhdGVGcm9tTW91c2VFdmVudChldmVudCk7XG4gICAgfSk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIChldmVudCkgPT4ge1xuICAgICAgdGhpcy5wb3B1bGF0ZUZyb21Ub3VjaEV2ZW50KGV2ZW50KTtcbiAgICAgIHRoaXMucHJlc3NDYWxsYmFja3MuZm9yRWFjaChjYWxsYmFjayA9PiBjYWxsYmFjayh0aGlzKSk7XG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIChldmVudCkgPT4ge1xuICAgICAgdGhpcy5wb3B1bGF0ZUZyb21Ub3VjaEV2ZW50KGV2ZW50KTtcbiAgICAgIHRoaXMubW92ZUNhbGxiYWNrcy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKHRoaXMpKTtcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCAoZXZlbnQpID0+IHtcbiAgICAgIHRoaXMuZGVwcmVzc0NhbGxiYWNrcy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKHRoaXMpKTsgLy8gd2Ugd2FudCB0aGlzIG9uZSB0byBoYXBwZW4gYmVmb3JlIHRoZSByZXNldFxuICAgICAgdGhpcy5wb3B1bGF0ZUZyb21Ub3VjaEV2ZW50KGV2ZW50KTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldCBkcmFnVmVjdG9yKCk6IHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfSB7XG4gICAgY29uc3QgeyB4LCB5IH0gPSB0aGlzLnByZXNzZWRTdGFydFBvcztcbiAgICByZXR1cm4gdGhpcy5wcmVzc2VkID8geyB4OiB0aGlzLnggLSB4LCB5OiB0aGlzLnkgLSB5IH0gOiB7IHg6IDAsIHk6IDAgfTtcbiAgfVxuXG4gIGdldCBkcmFnRGlyZWN0aW9uKCk6ICdub25lJ3wndXAnfCdkb3duJ3wnbGVmdCd8J3JpZ2h0JyB7XG4gICAgY29uc3QgeyB4LCB5IH0gPSB0aGlzLmRyYWdWZWN0b3I7XG4gICAgaWYgKHggPT09IDAgJiYgeSA9PT0gMCkgcmV0dXJuICdub25lJztcblxuICAgIGlmIChNYXRoLmFicyh4KSA+PSBNYXRoLmFicyh5KSkge1xuICAgICAgcmV0dXJuIHggPCAwID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHkgPCAwID8gJ3VwJyA6ICdkb3duJztcbiAgICB9XG4gIH1cblxuICBvblByZXNzKGNhbGxiYWNrOiAobW91c2U6IE1vdXNlKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5wcmVzc0NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgfVxuXG4gIG9uRGVwcmVzcyhjYWxsYmFjazogKG1vdXNlOiBNb3VzZSkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMuZGVwcmVzc0NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgfVxuXG4gIG9uTW92ZShjYWxsYmFjazogKG1vdXNlOiBNb3VzZSkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMubW92ZUNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgfVxuXG4gIHBvcHVsYXRlRnJvbU1vdXNlRXZlbnQoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLnggPSBldmVudC54O1xuICAgIHRoaXMueSA9IGV2ZW50Lnk7XG4gICAgY29uc3QgYWxyZWFkeVByZXNzZWQgPSB0aGlzLnByZXNzZWQ7XG4gICAgdGhpcy5wcmVzc2VkID0gZXZlbnQuYnV0dG9ucyA9PT0gMTtcbiAgICBpZiAodGhpcy5wcmVzc2VkICYmICFhbHJlYWR5UHJlc3NlZCkge1xuICAgICAgdGhpcy5wcmVzc2VkU3RhcnRQb3MgPSB7IHg6IHRoaXMueCwgeTogdGhpcy55IH07XG4gICAgfVxuICB9XG5cbiAgcG9wdWxhdGVGcm9tVG91Y2hFdmVudChldmVudDogVG91Y2hFdmVudCk6IHZvaWQge1xuICAgIGNvbnN0IHsgdG91Y2hlcyB9ID0gZXZlbnQ7XG4gICAgY29uc3QgYWxyZWFkeVByZXNzZWQgPSB0aGlzLnByZXNzZWQ7XG4gICAgaWYgKHRvdWNoZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLnByZXNzZWQgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdG91Y2ggPSB0b3VjaGVzWzBdO1xuICAgICAgdGhpcy54ID0gdG91Y2guY2xpZW50WDtcbiAgICAgIHRoaXMueSA9IHRvdWNoLmNsaWVudFk7XG4gICAgICB0aGlzLnByZXNzZWQgPSB0cnVlO1xuICAgICAgaWYgKCFhbHJlYWR5UHJlc3NlZCkgdGhpcy5wcmVzc2VkU3RhcnRQb3MgPSB7IHg6IHRoaXMueCwgeTogdGhpcy55IH07XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IG1vdXNlID0gbmV3IE1vdXNlKCk7XG5cbmV4cG9ydCBkZWZhdWx0IG1vdXNlO1xuIiwiaW1wb3J0IHsgcmFuZ2UsIHJvdGF0ZSwgZmluZE1hcCwgcm90YXRlR3JpZFBvc2l0aW9uIH0gZnJvbSBcIi4vY29uY2VybnMvdXRpbGl0aWVzXCI7XG5pbXBvcnQgeyBHcmlkUG9zaXRpb24gfSBmcm9tIFwiLi90eXBlcy9jb21tb25cIjtcblxuZXhwb3J0IHR5cGUgU2hhcGVNYXAgPSBib29sZWFuW11bXTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hhcGUge1xuICBwdWJsaWMgdmFsdWU6IG51bWJlcjtcbiAgcHJpdmF0ZSBfbWFwITogU2hhcGVNYXA7XG4gIHByaXZhdGUgX2V4dGVuZCE6IGJvb2xlYW47XG4gIHByaXZhdGUgX2xpbmVhciE6IGJvb2xlYW47XG4gIHByaXZhdGUgX2NlbnRlclBvc2l0aW9uPzogR3JpZFBvc2l0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKG9wdHM6IFBhcnRpYWw8U2hhcGU+ID0ge30pIHtcbiAgICB0aGlzLnZhbHVlID0gb3B0cy52YWx1ZSB8fCAxO1xuICAgIHRoaXMuZXh0ZW5kID0gb3B0cy5leHRlbmQgfHwgZmFsc2U7XG4gICAgdGhpcy5tYXAgPSBvcHRzLm1hcCB8fCBbW11dO1xuICB9XG5cbiAgc3RhdGljIGZyb21MZW5ndGgobGVuZ3RoOiBudW1iZXIsIHsgdmFsdWUgPSAxLCBvck1vcmUgfTogeyB2YWx1ZT86IG51bWJlcjsgb3JNb3JlPzogYm9vbGVhbiB9ID0ge30pOiBTaGFwZSB7XG4gICAgcmV0dXJuIG5ldyBTaGFwZSh7XG4gICAgICB2YWx1ZSxcbiAgICAgIGV4dGVuZDogISFvck1vcmUsXG4gICAgICBtYXA6IFtyYW5nZShsZW5ndGgsICgpID0+IHRydWUpXSxcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyByb3RhdGVkKHNoYXBlOiBTaGFwZSwgcm90YXRpb25zID0gMSk6IFNoYXBlIHtcbiAgICByZXR1cm4gbmV3IFNoYXBlKHsgLi4uc2hhcGUsIG1hcDogcm90YXRlKHNoYXBlLm1hcCwgcm90YXRpb25zKSB9KTtcbiAgfVxuXG4gIGdldCBleHRlbmQoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl9leHRlbmQgJiYgdGhpcy5saW5lYXIgfVxuICBzZXQgZXh0ZW5kKGV4dGVuZDogYm9vbGVhbikgeyB0aGlzLl9leHRlbmQgPSBleHRlbmQgfVxuXG4gIGdldCBtYXAoKTogU2hhcGVNYXAgeyByZXR1cm4gdGhpcy5fbWFwIH1cbiAgc2V0IG1hcChtYXA6IFNoYXBlTWFwKSB7XG4gICAgZGVsZXRlIHRoaXMuX2xpbmVhcjtcbiAgICBjb25zdCByb3dMZW5ndGggPSBtYXAucmVkdWNlKChtYXgsIHsgbGVuZ3RoIH0pID0+IChsZW5ndGggPiBtYXggPyBsZW5ndGggOiBtYXgpLCAwKTtcbiAgICB0aGlzLl9tYXAgPSBtYXAubWFwKHJvdyA9PiByYW5nZShyb3dMZW5ndGgsIGkgPT4gKHJvd1tpXSB8fCBmYWxzZSkpKTtcbiAgfVxuXG4gIGdldCBsaW5lYXIoKTogYm9vbGVhbiB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9saW5lYXIgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gdGhpcy5fbGluZWFyO1xuXG4gICAgdGhpcy5fbGluZWFyID0gKHRoaXMubWFwLmxlbmd0aCA9PT0gMSAmJiB0aGlzLm1hcFswXS5ldmVyeShzcGFjZSA9PiBzcGFjZSkpXG4gICAgICB8fCB0aGlzLm1hcC5ldmVyeShyb3cgPT4gKHJvdy5sZW5ndGggPT09IDEgJiYgcm93WzBdKSk7XG5cbiAgICByZXR1cm4gdGhpcy5fbGluZWFyO1xuICB9XG5cbiAgbWF0Y2g8Tz4oZ3JpZDogT1tdW10sIGZpZWxkOiBrZXlvZiBPLCByb3RhdGlvbiA9IDApOiB7IHJvdGF0aW9uOiBudW1iZXI7IG1hdGNoZWQ6IE9bXTsgY2VudGVyOiBPfG51bGwgfSB7XG4gICAgY29uc3QgbWF0Y2hlZCA9IFtdIGFzIE9bXTtcbiAgICBpZiAocm90YXRpb24gPiAzKSByZXR1cm4geyByb3RhdGlvbiwgbWF0Y2hlZCwgY2VudGVyOiBudWxsIH07XG5cbiAgICBsZXQgbWF0Y2hWYWx1ZVNldCA9IGZhbHNlO1xuICAgIGxldCBtYXRjaFZhbHVlOiBPW2tleW9mIE9dO1xuICAgIGNvbnN0IHJvdGF0ZWRNYXAgPSByb3RhdGUodGhpcy5tYXAsIHJvdGF0aW9uKTtcblxuICAgIGNvbnN0IGFsbE1hdGNoZWQgPSByb3RhdGVkTWFwLmV2ZXJ5KChtYXRjaGVyUm93LCByb3dJbmRleCkgPT4ge1xuICAgICAgY29uc3QgZ3JpZFJvdyA9IGdyaWRbcm93SW5kZXhdO1xuICAgICAgaWYgKCFncmlkUm93KSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIHJldHVybiBtYXRjaGVyUm93LmV2ZXJ5KChtdXN0TWF0Y2gsIGNvbEluZGV4KSA9PiB7XG4gICAgICAgIGlmICghbXVzdE1hdGNoKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjb25zdCBncmlkSXRlbSA9IGdyaWRSb3dbY29sSW5kZXhdO1xuICAgICAgICBpZiAoIWdyaWRJdGVtKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgY29uc3QgZ3JpZFZhbHVlID0gZ3JpZEl0ZW1bZmllbGRdO1xuICAgICAgICBpZiAoIW1hdGNoVmFsdWVTZXQpIHtcbiAgICAgICAgICBtYXRjaFZhbHVlID0gZ3JpZFZhbHVlO1xuICAgICAgICAgIG1hdGNoVmFsdWVTZXQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdyaWRWYWx1ZSAhPT0gbWF0Y2hWYWx1ZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIG1hdGNoZWQucHVzaChncmlkSXRlbSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpZiAoYWxsTWF0Y2hlZCkge1xuICAgICAgY29uc3QgeyByb3csIGNvbCB9ID0gdGhpcy5jZW50ZXJQb3NpdGlvbihyb3RhdGlvbik7XG4gICAgICBjb25zdCBjZW50ZXIgPSBncmlkW3Jvd11bY29sXTtcbiAgICAgIHJldHVybiB7IHJvdGF0aW9uLCBtYXRjaGVkLCBjZW50ZXIgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tYXRjaChncmlkLCBmaWVsZCwgcm90YXRpb24gKyAxKTtcbiAgfVxuXG4gIHNjcmVlbjxPIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55Pj4oZ3JpZDogT1tdW10sIG9mZnNldDogR3JpZFBvc2l0aW9uID0geyByb3c6IDAsIGNvbDogMCB9KTogT1tdIHtcbiAgICBjb25zdCBvZmZzZXRNYXBSb3dzID0gb2Zmc2V0LnJvdyA8IDBcbiAgICAgID8gdGhpcy5tYXAuc2xpY2UoLTEgKiBvZmZzZXQucm93KVxuICAgICAgOiBbLi4ucmFuZ2Uob2Zmc2V0LnJvdywgKCkgPT4gW10pLCAuLi50aGlzLm1hcF07XG5cbiAgICBjb25zdCBvZmZzZXRNYXAgPSBvZmZzZXRNYXBSb3dzLm1hcCgocm93KSA9PiB7XG4gICAgICByZXR1cm4gb2Zmc2V0LmNvbCA8IDBcbiAgICAgICAgPyByb3cuc2xpY2UoLTEgKiBvZmZzZXQuY29sKVxuICAgICAgICA6IFsuLi5yYW5nZShvZmZzZXQuY29sLCAoKSA9PiBmYWxzZSksIC4uLnJvd107XG4gICAgfSk7XG5cbiAgICAvLyBkZWJ1Z2dlclxuXG4gICAgcmV0dXJuIG9mZnNldE1hcC5yZWR1Y2UoKGFsbE1hdGNoZWRUaWxlcywgbWF0Y2hlclJvdywgcm93SW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IGdyaWRSb3cgPSBncmlkW3Jvd0luZGV4XTtcblxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgLi4uYWxsTWF0Y2hlZFRpbGVzLFxuICAgICAgICAuLi5tYXRjaGVyUm93LnJlZHVjZSgobWF0Y2hlZFJvd1RpbGVzLCBtdXN0TWF0Y2gsIGNvbEluZGV4KSA9PiB7XG4gICAgICAgICAgY29uc3QgdGlsZSA9IGdyaWRSb3cgJiYgZ3JpZFJvd1tjb2xJbmRleF07XG4gICAgICAgICAgcmV0dXJuIHRpbGUgJiYgbXVzdE1hdGNoID8gWy4uLm1hdGNoZWRSb3dUaWxlcywgdGlsZV0gOiBtYXRjaGVkUm93VGlsZXM7XG4gICAgICAgIH0sIFtdIGFzIE9bXSksXG4gICAgICBdO1xuICAgIH0sIFtdIGFzIE9bXSk7XG4gIH1cblxuICBnZXQgY2VudGVyKCk6IHsgbXVzdE1hdGNoOiBib29sZWFuIH0gJiBHcmlkUG9zaXRpb24ge1xuICAgIGNvbnN0IHJvd0luZGV4ID0gTWF0aC5mbG9vcih0aGlzLm1hcC5sZW5ndGggLyAyKTtcbiAgICBjb25zdCBtYXBSb3cgPSB0aGlzLm1hcFtyb3dJbmRleF07XG4gICAgY29uc3QgY29sSW5kZXggPSBNYXRoLmZsb29yKG1hcFJvdy5sZW5ndGggLyAyKTtcbiAgICBjb25zdCBtdXN0TWF0Y2ggPSBtYXBSb3dbY29sSW5kZXhdO1xuICAgIHJldHVybiB7IG11c3RNYXRjaCwgcm93OiByb3dJbmRleCwgY29sOiBjb2xJbmRleCB9O1xuICB9XG5cbiAgY2VudGVyUG9zaXRpb24ocm90YXRpb25zID0gMCk6IEdyaWRQb3NpdGlvbiB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9jZW50ZXJQb3NpdGlvbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IG11c3RNYXRjaENvdW50ID0gdGhpcy5tYXAucmVkdWNlKCh0b3RhbCwgbWF0Y2hlclJvdykgPT4ge1xuICAgICAgICByZXR1cm4gdG90YWwgKyBtYXRjaGVyUm93LnJlZHVjZSgoc3VtLCBtdXN0TWF0Y2gpID0+IChtdXN0TWF0Y2ggPyBzdW0gKyAxIDogc3VtKSwgMCk7XG4gICAgICB9LCAwKTtcblxuICAgICAgY29uc3QgY2VudGVySW5kZXggPSBNYXRoLmZsb29yKG11c3RNYXRjaENvdW50IC8gMik7XG5cbiAgICAgIGxldCBjdXJzb3IgPSAwO1xuICAgICAgdGhpcy5fY2VudGVyUG9zaXRpb24gPSBmaW5kTWFwKHRoaXMubWFwLCAocm93LCByb3dJbmRleCkgPT4ge1xuICAgICAgICByZXR1cm4gZmluZE1hcChyb3csIChtdXN0TWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKCFtdXN0TWF0Y2gpIHJldHVybjtcbiAgICAgICAgICBpZiAoY3Vyc29yID09PSBjZW50ZXJJbmRleCkgcmV0dXJuIHsgcm93OiByb3dJbmRleCwgY29sOiBpbmRleCB9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gICAgICAgICAgY3Vyc29yICs9IDE7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qgcm93Q291bnQgPSB0aGlzLm1hcC5sZW5ndGg7XG4gICAgY29uc3QgY29sQ291bnQgPSB0aGlzLm1hcFswXS5sZW5ndGg7XG4gICAgcmV0dXJuIHJvdGF0ZUdyaWRQb3NpdGlvbih0aGlzLl9jZW50ZXJQb3NpdGlvbiEsIHJvd0NvdW50LCBjb2xDb3VudCwgcm90YXRpb25zKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZGVmYXVsdFNoYXBlcyA9ICgpOiBTaGFwZVtdID0+IFtcbiAgU2hhcGUuZnJvbUxlbmd0aCgzLCB7IHZhbHVlOiAxIH0pLFxuICBTaGFwZS5mcm9tTGVuZ3RoKDQsIHsgdmFsdWU6IDIgfSksXG4gIFNoYXBlLmZyb21MZW5ndGgoNSwgeyB2YWx1ZTogMyB9KSxcbiAgU2hhcGUuZnJvbUxlbmd0aCg2LCB7IHZhbHVlOiA0LCBvck1vcmU6IHRydWUgfSksXG4gIG5ldyBTaGFwZSh7XG4gICAgdmFsdWU6IDUsXG4gICAgbWFwOiBbXG4gICAgICBbdHJ1ZSwgdHJ1ZSwgdHJ1ZV0sXG4gICAgICBbdHJ1ZV0sXG4gICAgICBbdHJ1ZV0sXG4gICAgXSxcbiAgfSksXG4gIG5ldyBTaGFwZSh7XG4gICAgdmFsdWU6IDYsXG4gICAgbWFwOiBbXG4gICAgICBbdHJ1ZSwgdHJ1ZSwgdHJ1ZV0sXG4gICAgICBbZmFsc2UsIHRydWVdLFxuICAgICAgW2ZhbHNlLCB0cnVlXSxcbiAgICBdLFxuICB9KSxcbiAgbmV3IFNoYXBlKHtcbiAgICB2YWx1ZTogNyxcbiAgICBtYXA6IFtcbiAgICAgIFt0cnVlLCB0cnVlXSxcbiAgICAgIFt0cnVlLCB0cnVlXSxcbiAgICBdLFxuICB9KSxcbl07XG4iLCJpbXBvcnQgQm9hcmQgZnJvbSBcIi4uL0JvYXJkXCI7XG5pbXBvcnQgQ2FudmFzVGlsZSBmcm9tIFwiLi9DYW52YXNUaWxlXCI7XG5pbXBvcnQgeyByYW5nZSwgZGlzdGFuY2VCZXR3ZWVuLCBmaW5kTWFwIH0gZnJvbSBcIi4uL2NvbmNlcm5zL3V0aWxpdGllc1wiO1xuaW1wb3J0IG1vdXNlLCB7IE1vdXNlIH0gZnJvbSBcIi4vbW91c2VcIjtcbmltcG9ydCBTaGFwZSwgeyBkZWZhdWx0U2hhcGVzIH0gZnJvbSBcIi4uL1NoYXBlXCI7XG5pbXBvcnQgeyBHcmlkUG9zaXRpb24sIENvb3JkUG9zaXRpb24gfSBmcm9tIFwiLi4vdHlwZXMvY29tbW9uXCI7XG5cbmV4cG9ydCB0eXBlIFN3YXBEaXJlY3Rpb24gPSAnbm9uZSd8J3VwJ3wnZG93bid8J2xlZnQnfCdyaWdodCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJlc2VudENhbnZhc1RpbGVJbmZvIHtcbiAgcm93OiBudW1iZXI7XG4gIGNvbDogbnVtYmVyO1xuICB0aWxlOiBDYW52YXNUaWxlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJsYW5rQ2FudmFzVGlsZUluZm8ge1xuICByb3c6IC0xO1xuICBjb2w6IC0xO1xuICB0aWxlOiBudWxsO1xufVxuXG5leHBvcnQgdHlwZSBDYW52YXNUaWxlSW5mbyA9IFByZXNlbnRDYW52YXNUaWxlSW5mbyB8IEJsYW5rQ2FudmFzVGlsZUluZm87XG5cbmV4cG9ydCBpbnRlcmZhY2UgQm9hcmREcmFnRXZlbnQge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbiAgZGlzdGFuY2U6IG51bWJlcjtcbiAgZGlyZWN0aW9uOiBTd2FwRGlyZWN0aW9uO1xuICBvcmlnaW46IFByZXNlbnRDYW52YXNUaWxlSW5mbztcbiAgZGVzdGluYXRpb246IFByZXNlbnRDYW52YXNUaWxlSW5mbztcbiAgbW91c2U6IE1vdXNlO1xufVxuXG5leHBvcnQgdHlwZSBCb2FyZERyYWdFdmVudENhbGxiYWNrID0gKGV2ZW50OiBCb2FyZERyYWdFdmVudCkgPT4gdm9pZDtcblxuY29uc3QgYmxhbmtDYW52YXNUaWxlSW5mbyA9ICgpOiBCbGFua0NhbnZhc1RpbGVJbmZvID0+ICh7IHJvdzogLTEsIGNvbDogLTEsIHRpbGU6IG51bGwgfSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbnZhc0JvYXJkIGV4dGVuZHMgQm9hcmQ8Q2FudmFzVGlsZT4ge1xuICBwdWJsaWMgeDogbnVtYmVyO1xuICBwdWJsaWMgeTogbnVtYmVyO1xuICBwdWJsaWMgd2lkdGg6IG51bWJlcjtcbiAgcHVibGljIGhlaWdodDogbnVtYmVyO1xuICBwdWJsaWMgc2Vuc2l0aXZpdHk6IG51bWJlcjtcbiAgcHVibGljIGRyYWdTdGFydENhbGxiYWNrczogQm9hcmREcmFnRXZlbnRDYWxsYmFja1tdID0gW107XG4gIHB1YmxpYyBkcmFnRW5kQ2FsbGJhY2tzOiBCb2FyZERyYWdFdmVudENhbGxiYWNrW10gPSBbXTtcbiAgcHVibGljIGRyYWdDYWxsYmFja3M6IEJvYXJkRHJhZ0V2ZW50Q2FsbGJhY2tbXSA9IFtdO1xuICBwdWJsaWMgc2hhcGVzOiBTaGFwZVtdO1xuICBwdWJsaWMgYXBwbHlOb3JtYWxTdHlsZT86IENhbnZhc1RpbGVbJ2FwcGx5Tm9ybWFsU3R5bGUnXTtcbiAgcHVibGljIGFwcGx5U2VsZWN0ZWRTdHlsZT86IENhbnZhc1RpbGVbJ2FwcGx5U2VsZWN0ZWRTdHlsZSddO1xuICBwdWJsaWMgYXBwbHlUYXJnZXRlZFN0eWxlPzogQ2FudmFzVGlsZVsnYXBwbHlUYXJnZXRlZFN0eWxlJ107XG4gIHB1YmxpYyBhcHBseU1hdGNoZWRTdHlsZT86IENhbnZhc1RpbGVbJ2FwcGx5TWF0Y2hlZFN0eWxlJ107XG4gIHB1YmxpYyBtYXRjaEFuaW1hdGlvbk1zOiBudW1iZXI7XG4gIHByaXZhdGUgZHJhZ09yaWdpbjogQ2FudmFzVGlsZUluZm8gPSBibGFua0NhbnZhc1RpbGVJbmZvKCk7XG4gIHByaXZhdGUgc3dhcE9yaWdpbjogQ2FudmFzVGlsZUluZm8gPSBibGFua0NhbnZhc1RpbGVJbmZvKCk7XG4gIHByaXZhdGUgc3dhcFRhcmdldDogQ2FudmFzVGlsZUluZm8gPSBibGFua0NhbnZhc1RpbGVJbmZvKCk7XG4gIHByaXZhdGUgc3RhcnRlZFNldHRsaW5nQXQ/OiBEYXRlO1xuXG4gIGNvbnN0cnVjdG9yKG9wdHM6IFBhcnRpYWw8Q2FudmFzQm9hcmQ+KSB7XG4gICAgc3VwZXIoe1xuICAgICAgLi4ub3B0cyxcbiAgICAgIHRpbGVEZWZzOiB7XG4gICAgICAgIHJlZDogeyBnZW5lcmF0b3I6ICh7IHZhcmlhbnQgfSkgPT4gdGhpcy5kZWZhdWx0TmV3VGlsZU9mVHlwZSgncmVkJywgdmFyaWFudCkgfSxcbiAgICAgICAgb3JhbmdlOiB7IGdlbmVyYXRvcjogKHsgdmFyaWFudCB9KSA9PiB0aGlzLmRlZmF1bHROZXdUaWxlT2ZUeXBlKCdvcmFuZ2UnLCB2YXJpYW50KSB9LFxuICAgICAgICBwdXJwbGU6IHsgZ2VuZXJhdG9yOiAoeyB2YXJpYW50IH0pID0+IHRoaXMuZGVmYXVsdE5ld1RpbGVPZlR5cGUoJ3B1cnBsZScsIHZhcmlhbnQpIH0sXG4gICAgICAgIGdyZWVuOiB7IGdlbmVyYXRvcjogKHsgdmFyaWFudCB9KSA9PiB0aGlzLmRlZmF1bHROZXdUaWxlT2ZUeXBlKCdncmVlbicsIHZhcmlhbnQpIH0sXG4gICAgICAgIGJsdWU6IHsgZ2VuZXJhdG9yOiAoeyB2YXJpYW50IH0pID0+IHRoaXMuZGVmYXVsdE5ld1RpbGVPZlR5cGUoJ2JsdWUnLCB2YXJpYW50KSB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIHRoaXMueCA9IG9wdHMueCB8fCAwO1xuICAgIHRoaXMueSA9IG9wdHMueSB8fCAwO1xuICAgIGNvbnN0IHJhd1dpZHRoID0gb3B0cy53aWR0aCB8fCB0aGlzLmNvbENvdW50ICogNTA7XG4gICAgdGhpcy53aWR0aCA9IHJhd1dpZHRoIC0gKHJhd1dpZHRoICUgdGhpcy5jb2xDb3VudCk7XG4gICAgdGhpcy5oZWlnaHQgPSBvcHRzLmhlaWdodCB8fCB0aGlzLndpZHRoO1xuICAgIHRoaXMuc2Vuc2l0aXZpdHkgPSBvcHRzLnNlbnNpdGl2aXR5IHx8IDI1O1xuICAgIHRoaXMuc2hhcGVzID0gb3B0cy5zaGFwZXMgfHwgZGVmYXVsdFNoYXBlcygpO1xuICAgIHRoaXMuYXBwbHlOb3JtYWxTdHlsZSA9IG9wdHMuYXBwbHlOb3JtYWxTdHlsZTtcbiAgICB0aGlzLmFwcGx5U2VsZWN0ZWRTdHlsZSA9IG9wdHMuYXBwbHlTZWxlY3RlZFN0eWxlO1xuICAgIHRoaXMuYXBwbHlUYXJnZXRlZFN0eWxlID0gb3B0cy5hcHBseVRhcmdldGVkU3R5bGU7XG4gICAgdGhpcy5hcHBseU1hdGNoZWRTdHlsZSA9IG9wdHMuYXBwbHlNYXRjaGVkU3R5bGU7XG4gICAgdGhpcy5tYXRjaEFuaW1hdGlvbk1zID0gb3B0cy5tYXRjaEFuaW1hdGlvbk1zIHx8IDI1MDtcblxuICAgIG1vdXNlLm9uUHJlc3ModGhpcy5ydW5EcmFnU3RhcnRDYWxsYmFja3MuYmluZCh0aGlzKSk7XG4gICAgbW91c2Uub25EZXByZXNzKHRoaXMucnVuRHJhZ0VuZENhbGxiYWNrcy5iaW5kKHRoaXMpKTtcbiAgICBtb3VzZS5vbk1vdmUodGhpcy5ydW5EcmFnQ2FsbGJhY2tzLmJpbmQodGhpcykpO1xuXG4gICAgLy8gdGhpcy5yb3dzID0gdGhpcy5uZXdSb3dzKCk7XG4gIH1cblxuICBnZXQgdGlsZVdpZHRoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMud2lkdGggLyB0aGlzLmNvbENvdW50O1xuICB9XG5cbiAgZ2V0IHRpbGVIZWlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5oZWlnaHQgLyB0aGlzLnJvd0NvdW50O1xuICB9XG5cbiAgZHJhdyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IHZvaWQge1xuICAgIGNvbnN0IHNldHRsaW5nID0gdGhpcy5jaGVja1NldHRsZSgpO1xuICAgIGNvbnN0IG1zU2luY2VTZXR0bGUgPSB0aGlzLnN0YXJ0ZWRTZXR0bGluZ0F0ID8gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0aGlzLnN0YXJ0ZWRTZXR0bGluZ0F0LmdldFRpbWUoKSA6IDA7XG4gICAgY29uc3QgZmFsbFRpbWVNcyA9IDEwMDtcbiAgICBjb25zdCBkeSA9IChtc1NpbmNlU2V0dGxlIC8gZmFsbFRpbWVNcykgKiB0aGlzLnRpbGVIZWlnaHQ7XG4gICAgY29uc3QgaXRzU3dhcFRpbWVCcnVoID0gbXNTaW5jZVNldHRsZSA+IGZhbGxUaW1lTXM7XG4gICAgaWYgKGl0c1N3YXBUaW1lQnJ1aCkgZGVsZXRlIHRoaXMuc3RhcnRlZFNldHRsaW5nQXQ7XG5cbiAgICBjb25zdCB0aWxlc1RvU3dhcCA9IFtdIGFzIFtHcmlkUG9zaXRpb24sIEdyaWRQb3NpdGlvbl1bXTtcbiAgICB0aGlzLnJvd3MuZm9yRWFjaCgocm93LCByb3dJbmRleCkgPT4ge1xuICAgICAgcm93LmZvckVhY2goKHRpbGUsIHRpbGVJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB4ID0gdGhpcy54ICsgKHRpbGVJbmRleCAqIHRpbGUud2lkdGgpO1xuICAgICAgICBsZXQgeSA9IHRoaXMueSArIChyb3dJbmRleCAqIHRpbGUuaGVpZ2h0KTtcbiAgICAgICAgaWYgKHNldHRsaW5nICYmICF0aWxlLmJsYW5rKSB7XG4gICAgICAgICAgY29uc3QgcG9zaXRpb24gPSB7IHJvdzogcm93SW5kZXgsIGNvbDogdGlsZUluZGV4IH07XG4gICAgICAgICAgY29uc3QgYmVsb3cgPSB0aGlzLmFkamFjZW50VGlsZShwb3NpdGlvbiwgJ2Rvd24nKTtcbiAgICAgICAgICBpZiAoYmVsb3cudGlsZSAmJiBiZWxvdy50aWxlLmJsYW5rKSB7XG4gICAgICAgICAgICB5ICs9IGR5O1xuICAgICAgICAgICAgaWYgKGl0c1N3YXBUaW1lQnJ1aCkgdGlsZXNUb1N3YXAucHVzaChbcG9zaXRpb24sIGJlbG93XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRpbGUuZHJhdyhjdHgsIHgsIHkpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aWxlc1RvU3dhcC5mb3JFYWNoKChbb3JpZ2luLCBiZWxvd10pID0+IHRoaXMuc3dhcFRpbGUob3JpZ2luLCBiZWxvdykpO1xuICB9XG5cbiAgdXBkYXRlKCk6IHZvaWQge1xuICAgIHRoaXMuc3Bhd25OZXdUaWxlcygpO1xuICAgIGlmICh0aGlzLnRpbGVzV2lsbERyb3AoKSkgcmV0dXJuO1xuXG4gICAgY29uc3QgbWF0Y2hlZFNoYXBlcyA9IHRoaXMubWF0Y2hTaGFwZXMoKTtcbiAgICBpZiAoIW1hdGNoZWRTaGFwZXMubGVuZ3RoKSByZXR1cm47XG5cbiAgICBjb25zdCBvcmlnaW5UaWxlID0gdGhpcy5zd2FwT3JpZ2luLnRpbGU7XG4gICAgY29uc3QgdGFyZ2V0VGlsZSA9IHRoaXMuc3dhcFRhcmdldC50aWxlO1xuXG4gICAgY29uc3Qgc29ydGVkTWF0Y2hlZFNoYXBlcyA9IFsuLi5tYXRjaGVkU2hhcGVzXS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICBpZiAoYS5zaGFwZS52YWx1ZSA+IGIuc2hhcGUudmFsdWUpIHJldHVybiAtMTtcbiAgICAgIGlmIChiLnNoYXBlLnZhbHVlID4gYS5zaGFwZS52YWx1ZSkgcmV0dXJuIDE7XG4gICAgICBpZiAoYS50aWxlcy5zb21lKHRpbGUgPT4gKHRpbGUgPT09IHRhcmdldFRpbGUgfHwgdGlsZSA9PT0gb3JpZ2luVGlsZSkpKSByZXR1cm4gLTE7XG4gICAgICBpZiAoYi50aWxlcy5zb21lKHRpbGUgPT4gKHRpbGUgPT09IHRhcmdldFRpbGUgfHwgdGlsZSA9PT0gb3JpZ2luVGlsZSkpKSByZXR1cm4gMTtcbiAgICAgIHJldHVybiAwO1xuICAgIH0pO1xuXG4gICAgY29uc3QgdHJhbnNjZW5kZW50VGlsZXM6IE1hcDxDYW52YXNUaWxlLCBzdHJpbmdbXT4gPSBuZXcgTWFwKCk7XG4gICAgc29ydGVkTWF0Y2hlZFNoYXBlcy5mb3JFYWNoKCh7IHRpbGVzLCBzaGFwZSwgcm90YXRpb24gfSkgPT4ge1xuICAgICAgdGlsZXMuZm9yRWFjaCh0aWxlID0+IHRoaXMuZXhwbG9kZVRpbGUodGlsZSkpO1xuICAgICAgY29uc3QgdmFyaWFudCA9IHRoaXMudmFyaWFudEZvclNoYXBlKHNoYXBlLCByb3RhdGlvbik7XG4gICAgICBpZiAodmFyaWFudCkge1xuICAgICAgICBjb25zdCBtb3ZlZFRpbGUgPSB0aWxlcy5maW5kKHRpbGUgPT4gKHRpbGUgPT09IHRhcmdldFRpbGUgfHwgdGlsZSA9PT0gb3JpZ2luVGlsZSkpO1xuICAgICAgICBjb25zdCB0cmFuc2NlbmRlbnQgPSBtb3ZlZFRpbGUgfHwgdGhpcy5jZW50ZXJUaWxlKHRpbGVzKSE7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gdHJhbnNjZW5kZW50VGlsZXMuZ2V0KHRyYW5zY2VuZGVudCk7XG4gICAgICAgIHRyYW5zY2VuZGVudFRpbGVzLnNldCh0cmFuc2NlbmRlbnQsIFsuLi4oZXhpc3RpbmcgfHwgW10pLCB2YXJpYW50XSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0cmFuc2NlbmRlbnRUaWxlcy5mb3JFYWNoKCh2YXJpYW50cywgdGlsZSkgPT4ge1xuICAgICAgdGlsZS52YXJpYW50ID0gdmFyaWFudHNbMF07XG4gICAgICB0aWxlLm1hdGNoZWQgPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxuXG4gIGNlbnRlclRpbGUodGlsZXM6IENhbnZhc1RpbGVbXSk6IENhbnZhc1RpbGV8dW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGlsZXNbTWF0aC5mbG9vcih0aWxlcy5sZW5ndGggLyAyKV07XG4gIH1cblxuICBzcGF3bk5ld1RpbGVzKCk6IHZvaWQge1xuICAgIHRoaXMucm93c1swXSA9IHRoaXMucm93c1swXS5tYXAodGlsZSA9PiAodGlsZS5ibGFuayA/IHRoaXMubmV3TXVuZGFuZVRpbGUoKSA6IHRpbGUpKTtcbiAgfVxuXG4gIHRpbGVzV2lsbERyb3AoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucm93cy5zbGljZSgxKS5zb21lKHJvdyA9PiByb3cuc29tZSh0aWxlID0+ICh0aWxlLm1hdGNoZWQgfHwgdGlsZS5ibGFuaykpKTtcbiAgfVxuXG4gIGV4cGxvZGVUaWxlKHRpbGU6IENhbnZhc1RpbGUpOiB2b2lkIHtcbiAgICBpZiAodGlsZS5pc011bmRhbmUpIHRpbGUubWF0Y2hlZCA9IHRydWU7XG4gICAgaWYgKHRpbGUubWF0Y2hlZCkgcmV0dXJuO1xuXG4gICAgdGlsZS5tYXRjaGVkID0gdHJ1ZTtcbiAgICBzd2l0Y2ggKHRpbGUudmFyaWFudCkge1xuICAgICAgY2FzZSAnaG9yaXpvbnRhbENsZWFyJzogdGhpcy5jbGVhclJvdyh0aGlzLmZpbmRUaWxlKHRpbGUpKTsgYnJlYWs7XG4gICAgICBjYXNlICd2ZXJ0aWNhbENsZWFyJzogdGhpcy5jbGVhckNvbCh0aGlzLmZpbmRUaWxlKHRpbGUpKTsgYnJlYWs7XG4gICAgICBjYXNlICdjcm9zc0NsZWFyJzogdGhpcy5jbGVhckNyb3NzKHRoaXMuZmluZFRpbGUodGlsZSkpOyBicmVhaztcbiAgICAgIGNhc2UgJ3R5cGVDbGVhcic6IHRoaXMuY2xlYXJUeXBlKHRpbGUudHlwZSk7IGJyZWFrO1xuICAgICAgY2FzZSAnYm9tYkNsZWFyJzogdGhpcy5jbGVhckJvbWIodGhpcy5maW5kVGlsZSh0aWxlKSk7IGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGNsZWFyUm93KHsgcm93IH06IFBpY2s8R3JpZFBvc2l0aW9uLCAncm93Jz4pOiB2b2lkIHtcbiAgICB0aGlzLnJvd3Nbcm93XS5mb3JFYWNoKHRpbGUgPT4gdGhpcy5leHBsb2RlVGlsZSh0aWxlKSk7XG4gIH1cblxuICBjbGVhckNvbCh7IGNvbCB9OiBQaWNrPEdyaWRQb3NpdGlvbiwgJ2NvbCc+KTogdm9pZCB7XG4gICAgdGhpcy5yb3dzLmZvckVhY2gocm93ID0+IHRoaXMuZXhwbG9kZVRpbGUocm93W2NvbF0pKTtcbiAgfVxuXG4gIGNsZWFyQ3Jvc3MoeyByb3csIGNvbCB9OiBHcmlkUG9zaXRpb24pOiB2b2lkIHtcbiAgICB0aGlzLmNsZWFyUm93KHsgcm93IH0pO1xuICAgIHRoaXMuY2xlYXJDb2woeyBjb2wgfSk7XG4gIH1cblxuICBjbGVhclR5cGUodHlwZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy50aWxlcy5mb3JFYWNoKHRpbGUgPT4geyBpZiAodGlsZS50eXBlID09PSB0eXBlKSB0aGlzLmV4cGxvZGVUaWxlKHRpbGUpOyB9KTtcbiAgfVxuXG4gIGNsZWFyQm9tYih7IHJvdywgY29sIH06IEdyaWRQb3NpdGlvbik6IHZvaWQge1xuICAgIGNvbnN0IGJvbWJTaGFwZSA9IG5ldyBTaGFwZSh7XG4gICAgICBtYXA6IFtcbiAgICAgICAgW2ZhbHNlLCBmYWxzZSwgdHJ1ZV0sXG4gICAgICAgIFtmYWxzZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZV0sXG4gICAgICAgIFt0cnVlLCB0cnVlLCB0cnVlLCB0cnVlLCB0cnVlXSxcbiAgICAgICAgW2ZhbHNlLCB0cnVlLCB0cnVlLCB0cnVlXSxcbiAgICAgICAgW2ZhbHNlLCBmYWxzZSwgdHJ1ZV0sXG4gICAgICBdLFxuICAgIH0pO1xuICAgIGNvbnN0IHsgY2VudGVyIH0gPSBib21iU2hhcGU7XG4gICAgY29uc3QgYm9tYlRvcCA9IHJvdyAtIGNlbnRlci5yb3c7XG4gICAgY29uc3QgYm9tYkxlZnQgPSBjb2wgLSBjZW50ZXIuY29sO1xuICAgIGNvbnN0IGJvbWJlZFRpbGVzID0gYm9tYlNoYXBlLnNjcmVlbih0aGlzLnJvd3MsIHsgcm93OiBib21iVG9wLCBjb2w6IGJvbWJMZWZ0IH0pO1xuICAgIGJvbWJlZFRpbGVzLmZvckVhY2godGlsZSA9PiB0aGlzLmV4cGxvZGVUaWxlKHRpbGUpKTtcbiAgfVxuXG4gIGNoZWNrU2V0dGxlKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHNldHRsaW5nID0gdGhpcy50aWxlcy5zb21lKHRpbGUgPT4gdGlsZS5ibGFuayk7XG5cbiAgICBpZiAoc2V0dGxpbmcpIHtcbiAgICAgIGlmICghdGhpcy5zdGFydGVkU2V0dGxpbmdBdCkgdGhpcy5zdGFydGVkU2V0dGxpbmdBdCA9IG5ldyBEYXRlKCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBkZWxldGUgdGhpcy5zdGFydGVkU2V0dGxpbmdBdDtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB0aWxlQXQocG9zOiBDb29yZFBvc2l0aW9ufEdyaWRQb3NpdGlvbik6IENhbnZhc1RpbGVJbmZvIHtcbiAgICBpZiAoJ3JvdycgaW4gcG9zKSB7XG4gICAgICBjb25zdCB7IHJvdywgY29sIH0gPSBwb3M7XG4gICAgICBjb25zdCB0aWxlID0gdGhpcy5yb3dzW3Jvd11bY29sXTtcbiAgICAgIHJldHVybiB0aWxlID8geyByb3csIGNvbCwgdGlsZSB9IDogYmxhbmtDYW52YXNUaWxlSW5mbygpO1xuICAgIH1cblxuICAgIGNvbnN0IHggPSBwb3MueCAtIHRoaXMueDtcbiAgICBjb25zdCB5ID0gcG9zLnkgLSB0aGlzLnk7XG4gICAgaWYgKHggPiB0aGlzLndpZHRoIHx8IHkgPiB0aGlzLmhlaWdodCkgcmV0dXJuIGJsYW5rQ2FudmFzVGlsZUluZm8oKTtcblxuICAgIGNvbnN0IGZyYWN0aW9uWCA9IHggLyB0aGlzLndpZHRoO1xuICAgIGNvbnN0IGZyYWN0aW9uWSA9IHkgLyB0aGlzLmhlaWdodDtcbiAgICBjb25zdCByb3cgPSBNYXRoLmZsb29yKGZyYWN0aW9uWSAqIHRoaXMucm93Q291bnQpO1xuICAgIGNvbnN0IGNvbCA9IE1hdGguZmxvb3IoZnJhY3Rpb25YICogdGhpcy5jb2xDb3VudCk7XG4gICAgY29uc3QgdGlsZSA9IHRoaXMucm93c1tyb3ddW2NvbF07XG4gICAgcmV0dXJuIHsgcm93LCBjb2wsIHRpbGUgfTtcbiAgfVxuXG4gIGZpbmRUaWxlKHRhcmdldDogQ2FudmFzVGlsZSk6IENhbnZhc1RpbGVJbmZvIHtcbiAgICByZXR1cm4gZmluZE1hcCh0aGlzLnJvd3MsIChyb3dUaWxlcywgcm93KSA9PiB7XG4gICAgICByZXR1cm4gZmluZE1hcChyb3dUaWxlcywgKHRpbGUsIGNvbCkgPT4ge1xuICAgICAgICBpZiAodGFyZ2V0ID09PSB0aWxlKSByZXR1cm4geyByb3csIGNvbCwgdGlsZSB9O1xuICAgICAgfSk7XG4gICAgfSkgfHwgYmxhbmtDYW52YXNUaWxlSW5mbygpO1xuICB9XG5cbiAgdGlsZUNlbnRlcih0aWxlSW5mbzogQ2FudmFzVGlsZUluZm8pOiBDb29yZFBvc2l0aW9uIHtcbiAgICBjb25zdCB7IHJvdywgY29sLCB0aWxlIH0gPSB0aWxlSW5mbztcbiAgICBpZiAoIXRpbGUpIHJldHVybiB7IHg6IC0xLCB5OiAtMSB9O1xuXG4gICAgY29uc3QgeCA9IHRoaXMueCArIChjb2wgKiB0aWxlLmhlaWdodCkgKyAodGlsZS5oZWlnaHQgLyAyKTtcbiAgICBjb25zdCB5ID0gdGhpcy55ICsgKHJvdyAqIHRpbGUud2lkdGgpICsgKHRpbGUud2lkdGggLyAyKTtcbiAgICByZXR1cm4geyB4LCB5IH07XG4gIH1cblxuICBzd2FwVGlsZShmcm9tOiBDb29yZFBvc2l0aW9ufEdyaWRQb3NpdGlvbiwgdG86IFN3YXBEaXJlY3Rpb258Q29vcmRQb3NpdGlvbnxHcmlkUG9zaXRpb24pOiB2b2lkIHtcbiAgICBpZiAodHlwZW9mIHRvID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5zd2FwVGlsZUluRGlyZWN0aW9uKGZyb20sIHRvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zd2FwVGlsZVdpdGhUaWxlKGZyb20sIHRvKTtcbiAgICB9XG4gIH1cblxuICBvbkRyYWdTdGFydChjYWxsYmFjazogKGV2ZW50OiBCb2FyZERyYWdFdmVudCkgPT4gdm9pZCk6IG51bWJlciB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmRyYWdTdGFydENhbGxiYWNrcy5sZW5ndGg7XG4gICAgdGhpcy5kcmFnU3RhcnRDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgcmVtb3ZlRHJhZ1N0YXJ0TGlzdGVuZXIoaWQ6IG51bWJlcik6IHZvaWQge1xuICAgIGRlbGV0ZSB0aGlzLmRyYWdTdGFydENhbGxiYWNrc1tpZF07XG4gIH1cblxuICBvbkRyYWdFbmQoY2FsbGJhY2s6IChldmVudDogQm9hcmREcmFnRXZlbnQpID0+IHZvaWQpOiBudW1iZXIge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5kcmFnRW5kQ2FsbGJhY2tzLmxlbmd0aDtcbiAgICB0aGlzLmRyYWdFbmRDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgcmVtb3ZlRHJhZ0VuZExpc3RlbmVyKGlkOiBudW1iZXIpOiB2b2lkIHtcbiAgICBkZWxldGUgdGhpcy5kcmFnRW5kQ2FsbGJhY2tzW2lkXTtcbiAgfVxuXG4gIG9uRHJhZyhjYWxsYmFjazogKGV2ZW50OiBCb2FyZERyYWdFdmVudCkgPT4gdm9pZCk6IG51bWJlciB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmRyYWdDYWxsYmFja3MubGVuZ3RoO1xuICAgIHRoaXMuZHJhZ0NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICByZW1vdmVEcmFnTGlzdGVuZXIoaWQ6IG51bWJlcik6IHZvaWQge1xuICAgIGRlbGV0ZSB0aGlzLmRyYWdDYWxsYmFja3NbaWRdO1xuICB9XG5cbiAgYWRqYWNlbnRTcGFjZShvcmlnaW46IENvb3JkUG9zaXRpb258R3JpZFBvc2l0aW9uLCBkaXJlY3Rpb246IFN3YXBEaXJlY3Rpb24pOiBHcmlkUG9zaXRpb24ge1xuICAgIGNvbnN0IHsgcm93LCBjb2wgfSA9ICdyb3cnIGluIG9yaWdpbiA/IG9yaWdpbiA6IHRoaXMudGlsZUF0KG9yaWdpbik7XG4gICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgIGNhc2UgJ3VwJzogcmV0dXJuIHsgcm93OiByb3cgLSAxLCBjb2wgfTtcbiAgICAgIGNhc2UgJ2Rvd24nOiByZXR1cm4geyByb3c6IHJvdyArIDEsIGNvbCB9O1xuICAgICAgY2FzZSAnbGVmdCc6IHJldHVybiB7IHJvdywgY29sOiBjb2wgLSAxIH07XG4gICAgICBjYXNlICdyaWdodCc6IHJldHVybiB7IHJvdywgY29sOiBjb2wgKyAxIH07XG4gICAgICBkZWZhdWx0OiByZXR1cm4geyByb3csIGNvbCB9O1xuICAgIH1cbiAgfVxuXG4gIGFkamFjZW50VGlsZShvcmlnaW46IENhbnZhc1RpbGVJbmZvfENvb3JkUG9zaXRpb258R3JpZFBvc2l0aW9uLCBkaXJlY3Rpb246IFN3YXBEaXJlY3Rpb24pOiBDYW52YXNUaWxlSW5mbyB7XG4gICAgY29uc3QgeyByb3csIGNvbCB9ID0gdGhpcy5hZGphY2VudFNwYWNlKG9yaWdpbiwgZGlyZWN0aW9uKTtcbiAgICBjb25zdCB0aWxlID0gdGhpcy5yb3dzW3Jvd10gJiYgdGhpcy5yb3dzW3Jvd11bY29sXTtcbiAgICByZXR1cm4gdGlsZSA/IHsgcm93LCBjb2wsIHRpbGUgfSA6IGJsYW5rQ2FudmFzVGlsZUluZm8oKTtcbiAgfVxuXG4gIHJlbW92ZVRpbGUodGlsZTogQ2FudmFzVGlsZSk6IHZvaWQge1xuICAgIHRpbGUuYmxhbmsgPSB0cnVlO1xuICB9XG5cbiAgbWF0Y2hTaGFwZXMoKTogeyBzaGFwZTogU2hhcGU7IHJvdGF0aW9uOiBudW1iZXI7IHRpbGVzOiBDYW52YXNUaWxlW107IGNlbnRlclRpbGU6IENhbnZhc1RpbGUgfVtdIHtcbiAgICByZXR1cm4gcmFuZ2UodGhpcy5jb2xDb3VudCkucmVkdWNlKChtZW1vLCBjb2xJbmRleCkgPT4ge1xuICAgICAgdGhpcy5zaGFwZXMuZm9yRWFjaCgoc2hhcGUpID0+IHtcbiAgICAgICAgdGhpcy5yb3dzLmZvckVhY2goKF9yb3csIHJvd0luZGV4KSA9PiB7XG4gICAgICAgICAgY29uc3QgbmV3R3JpZCA9IHRoaXMucm93cy5zbGljZShyb3dJbmRleCkubWFwKHJvdyA9PiByb3cuc2xpY2UoY29sSW5kZXgpKTtcbiAgICAgICAgICBjb25zdCB7IHJvdGF0aW9uLCBtYXRjaGVkLCBjZW50ZXIgfSA9IHNoYXBlLm1hdGNoKG5ld0dyaWQsICd0eXBlJyk7XG4gICAgICAgICAgaWYgKG1hdGNoZWQubGVuZ3RoID4gMCkgbWVtby5wdXNoKHsgc2hhcGUsIHJvdGF0aW9uLCB0aWxlczogbWF0Y2hlZCwgY2VudGVyVGlsZTogY2VudGVyISB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH0sIFtdIGFzIHsgc2hhcGU6IFNoYXBlOyByb3RhdGlvbjogbnVtYmVyOyB0aWxlczogQ2FudmFzVGlsZVtdOyBjZW50ZXJUaWxlOiBDYW52YXNUaWxlIH1bXSk7XG4gIH1cblxuICBwcml2YXRlIGRlZmF1bHROZXdUaWxlT2ZUeXBlKHR5cGU6IHN0cmluZywgdmFyaWFudD86IHN0cmluZyk6IENhbnZhc1RpbGUge1xuICAgIC8vIGZ1dHVyZTogY2hhbmdlIGNvbG9ycyBmb3IgXCJjb2xvclwiIHR5cGVzIGhlcmVcbiAgICBjb25zdCBjb2xvcnMgPSB7XG4gICAgICByZWQ6ICdyZWQnLFxuICAgICAgb3JhbmdlOiAnb3JhbmdlJyxcbiAgICAgIHB1cnBsZTogJ3B1cnBsZScsXG4gICAgICBncmVlbjogJ2dyZWVuJyxcbiAgICAgIGJsdWU6ICdibHVlJyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIG5ldyBDYW52YXNUaWxlKHtcbiAgICAgIHR5cGUsXG4gICAgICB2YXJpYW50LFxuICAgICAgY29sb3I6IGNvbG9yc1t0eXBlIGFzIGtleW9mIHR5cGVvZiBjb2xvcnNdLFxuICAgICAgd2lkdGg6IHRoaXMudGlsZVdpZHRoLFxuICAgICAgaGVpZ2h0OiB0aGlzLnRpbGVIZWlnaHQsXG4gICAgICBhcHBseU5vcm1hbFN0eWxlOiB0aGlzLmFwcGx5Tm9ybWFsU3R5bGUsXG4gICAgICBhcHBseVNlbGVjdGVkU3R5bGU6IHRoaXMuYXBwbHlTZWxlY3RlZFN0eWxlLFxuICAgICAgYXBwbHlUYXJnZXRlZFN0eWxlOiB0aGlzLmFwcGx5VGFyZ2V0ZWRTdHlsZSxcbiAgICAgIGFwcGx5TWF0Y2hlZFN0eWxlOiB0aGlzLmFwcGx5TWF0Y2hlZFN0eWxlLFxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSB2YXJpYW50Rm9yU2hhcGUoc2hhcGU6IFNoYXBlLCByb3RhdGlvbjogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBzd2l0Y2ggKHNoYXBlLnZhbHVlKSB7XG4gICAgICBjYXNlIDI6IHJldHVybiByb3RhdGlvbiAlIDIgPT09IDAgPyAndmVydGljYWxDbGVhcicgOiAnaG9yaXpvbnRhbENsZWFyJztcbiAgICAgIGNhc2UgMzogcmV0dXJuICd0eXBlQ2xlYXInO1xuICAgICAgY2FzZSA0OiByZXR1cm4gJ3R5cGVDbGVhcic7XG4gICAgICBjYXNlIDU6IHJldHVybiAnY3Jvc3NDbGVhcic7XG4gICAgICBjYXNlIDY6IHJldHVybiAnY3Jvc3NDbGVhcic7XG4gICAgICBjYXNlIDc6IHJldHVybiAnYm9tYkNsZWFyJztcbiAgICAgIGRlZmF1bHQ6IHJldHVybiAnJztcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHN3YXBUaWxlV2l0aFRpbGUoZnJvbTogQ29vcmRQb3NpdGlvbnxHcmlkUG9zaXRpb24sIHRvOiBDb29yZFBvc2l0aW9ufEdyaWRQb3NpdGlvbik6IHZvaWQge1xuICAgIGNvbnN0IG9yaWdpbiA9IHRoaXMudGlsZUF0KGZyb20pO1xuICAgIGlmICghb3JpZ2luLnRpbGUpIHJldHVybjtcblxuICAgIHRoaXMuc3dhcE9yaWdpbiA9IG9yaWdpbjtcbiAgICBjb25zdCBkZXN0aW5hdGlvbiA9IHRoaXMudGlsZUF0KHRvKTtcbiAgICBpZiAoIWRlc3RpbmF0aW9uLnRpbGUpIHJldHVybjtcblxuICAgIHRoaXMuc3dhcFRhcmdldCA9IGRlc3RpbmF0aW9uO1xuICAgIHRoaXMucm93c1tkZXN0aW5hdGlvbi5yb3ddW2Rlc3RpbmF0aW9uLmNvbF0gPSBvcmlnaW4udGlsZTtcbiAgICB0aGlzLnJvd3Nbb3JpZ2luLnJvd11bb3JpZ2luLmNvbF0gPSBkZXN0aW5hdGlvbi50aWxlO1xuICB9XG5cbiAgcHJpdmF0ZSBzd2FwVGlsZUluRGlyZWN0aW9uKGZyb206IENvb3JkUG9zaXRpb258R3JpZFBvc2l0aW9uLCBkaXJlY3Rpb246IFN3YXBEaXJlY3Rpb24pOiB2b2lkIHtcbiAgICBjb25zdCBvcmlnaW4gPSB0aGlzLnRpbGVBdChmcm9tKTtcbiAgICBpZiAoIW9yaWdpbi50aWxlKSByZXR1cm47XG5cbiAgICB0aGlzLnN3YXBPcmlnaW4gPSBvcmlnaW47XG4gICAgY29uc3QgZGVzdGluYXRpb24gPSB0aGlzLmFkamFjZW50VGlsZShvcmlnaW4sIGRpcmVjdGlvbik7XG4gICAgaWYgKCFkZXN0aW5hdGlvbi50aWxlKSByZXR1cm47XG5cbiAgICB0aGlzLnN3YXBUYXJnZXQgPSBkZXN0aW5hdGlvbjtcbiAgICB0aGlzLnJvd3NbZGVzdGluYXRpb24ucm93XVtkZXN0aW5hdGlvbi5jb2xdID0gb3JpZ2luLnRpbGU7XG4gICAgdGhpcy5yb3dzW29yaWdpbi5yb3ddW29yaWdpbi5jb2xdID0gZGVzdGluYXRpb24udGlsZTtcbiAgfVxuXG4gIHByaXZhdGUgY2xlYXJFeGlzdGluZ0RyYWdGbGFncygpOiB2b2lkIHtcbiAgICB0aGlzLnRpbGVzLmZvckVhY2goKHRpbGUpID0+IHtcbiAgICAgIHRpbGUuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgIHRpbGUudGFyZ2V0ZWQgPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0RHJhZ1N0YXJ0RmxhZ3ModGlsZUluZm86IFByZXNlbnRDYW52YXNUaWxlSW5mbyk6IHZvaWQge1xuICAgIHRoaXMuY2xlYXJFeGlzdGluZ0RyYWdGbGFncygpO1xuICAgIHRpbGVJbmZvLnRpbGUuc2VsZWN0ZWQgPSB0cnVlO1xuICAgIHRpbGVJbmZvLnRpbGUudGFyZ2V0ZWQgPSB0cnVlO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXREcmFnRW5kRmxhZ3MoKTogdm9pZCB7XG4gICAgdGhpcy5jbGVhckV4aXN0aW5nRHJhZ0ZsYWdzKCk7XG4gIH1cblxuICBwcml2YXRlIHNldERyYWdGbGFncyhvcmlnaW46IFByZXNlbnRDYW52YXNUaWxlSW5mbywgZGVzdGluYXRpb246IFByZXNlbnRDYW52YXNUaWxlSW5mbyk6IHZvaWQge1xuICAgIHRoaXMuY2xlYXJFeGlzdGluZ0RyYWdGbGFncygpO1xuICAgIG9yaWdpbi50aWxlLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICBkZXN0aW5hdGlvbi50aWxlLnRhcmdldGVkID0gdHJ1ZTtcbiAgfVxuXG4gIHByaXZhdGUgcnVuRHJhZ1N0YXJ0Q2FsbGJhY2tzKG1vdXNlOiBNb3VzZSk6IHZvaWQge1xuICAgIGNvbnN0IHNldHRsaW5nID0gdGhpcy5jaGVja1NldHRsZSgpO1xuICAgIGlmIChzZXR0bGluZykgcmV0dXJuO1xuXG4gICAgY29uc3QgeyB4LCB5IH0gPSBtb3VzZTtcbiAgICBjb25zdCBvcmlnaW4gPSB0aGlzLnRpbGVBdCh7IHgsIHkgfSk7XG4gICAgaWYgKCFvcmlnaW4udGlsZSkgcmV0dXJuO1xuXG4gICAgdGhpcy5kcmFnT3JpZ2luID0gb3JpZ2luO1xuICAgIHRoaXMuc2V0RHJhZ1N0YXJ0RmxhZ3ModGhpcy5kcmFnT3JpZ2luKTtcbiAgICBjb25zdCBkaXN0YW5jZSA9IGRpc3RhbmNlQmV0d2Vlbihtb3VzZSwgdGhpcy50aWxlQ2VudGVyKG9yaWdpbikpO1xuICAgIGNvbnN0IGRpcmVjdGlvbiA9IG1vdXNlLmRyYWdEaXJlY3Rpb247XG4gICAgY29uc3QgZGVzdGluYXRpb24gPSBvcmlnaW47XG5cbiAgICB0aGlzLmRyYWdTdGFydENhbGxiYWNrcy5mb3JFYWNoKChjYWxsYmFjaykgPT4ge1xuICAgICAgY2FsbGJhY2soeyB4LCB5LCBkaXN0YW5jZSwgZGlyZWN0aW9uLCBvcmlnaW4sIGRlc3RpbmF0aW9uLCBtb3VzZSB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgcnVuRHJhZ0VuZENhbGxiYWNrcyhtb3VzZTogTW91c2UpOiB2b2lkIHtcbiAgICBjb25zdCBzZXR0bGluZyA9IHRoaXMuY2hlY2tTZXR0bGUoKTtcbiAgICBpZiAoc2V0dGxpbmcpIHJldHVybjtcblxuICAgIGNvbnN0IG9yaWdpbiA9IHRoaXMuZHJhZ09yaWdpbjtcbiAgICBpZiAoIW9yaWdpbi50aWxlKSByZXR1cm47XG5cbiAgICBjb25zdCB7IHgsIHkgfSA9IG1vdXNlO1xuICAgIGNvbnN0IGRpc3RhbmNlID0gZGlzdGFuY2VCZXR3ZWVuKG1vdXNlLCB0aGlzLnRpbGVDZW50ZXIob3JpZ2luKSk7XG4gICAgY29uc3QgbW92ZVRvID0gZGlzdGFuY2UgPiB0aGlzLnNlbnNpdGl2aXR5ID8gdGhpcy5hZGphY2VudFRpbGUob3JpZ2luLCBtb3VzZS5kcmFnRGlyZWN0aW9uKSA6IG9yaWdpbjtcbiAgICBjb25zdCBkZXN0aW5hdGlvbiA9IG1vdmVUby50aWxlID8gbW92ZVRvIDogb3JpZ2luO1xuICAgIGNvbnN0IGRpcmVjdGlvbiA9IG1vdXNlLmRyYWdEaXJlY3Rpb247XG4gICAgdGhpcy5zZXREcmFnRW5kRmxhZ3MoKTtcblxuICAgIHRoaXMuZHJhZ0VuZENhbGxiYWNrcy5mb3JFYWNoKChjYWxsYmFjaykgPT4ge1xuICAgICAgY2FsbGJhY2soeyB4LCB5LCBkaXN0YW5jZSwgZGlyZWN0aW9uLCBvcmlnaW4sIGRlc3RpbmF0aW9uLCBtb3VzZSB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMuZHJhZ09yaWdpbiA9IGJsYW5rQ2FudmFzVGlsZUluZm8oKTtcbiAgfVxuXG4gIHByaXZhdGUgcnVuRHJhZ0NhbGxiYWNrcyhtb3VzZTogTW91c2UpOiB2b2lkIHtcbiAgICBjb25zdCBzZXR0bGluZyA9IHRoaXMuY2hlY2tTZXR0bGUoKTtcbiAgICBpZiAoc2V0dGxpbmcpIHJldHVybjtcblxuICAgIGNvbnN0IG9yaWdpbiA9IHRoaXMuZHJhZ09yaWdpbjtcbiAgICBpZiAoIW9yaWdpbi50aWxlKSByZXR1cm47XG5cbiAgICBjb25zdCB7IHgsIHksIHByZXNzZWQgfSA9IG1vdXNlO1xuICAgIGlmICghcHJlc3NlZCkgcmV0dXJuO1xuXG4gICAgY29uc3QgZGlzdGFuY2UgPSBkaXN0YW5jZUJldHdlZW4obW91c2UsIHRoaXMudGlsZUNlbnRlcihvcmlnaW4pKTtcbiAgICBjb25zdCBtb3ZlVG8gPSBkaXN0YW5jZSA+IHRoaXMuc2Vuc2l0aXZpdHkgPyB0aGlzLmFkamFjZW50VGlsZShvcmlnaW4sIG1vdXNlLmRyYWdEaXJlY3Rpb24pIDogb3JpZ2luO1xuICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gbW92ZVRvLnRpbGUgPyBtb3ZlVG8gOiBvcmlnaW47XG4gICAgY29uc3QgZGlyZWN0aW9uID0gbW91c2UuZHJhZ0RpcmVjdGlvbjtcbiAgICB0aGlzLnNldERyYWdGbGFncyhvcmlnaW4sIGRlc3RpbmF0aW9uKTtcblxuICAgIHRoaXMuZHJhZ0NhbGxiYWNrcy5mb3JFYWNoKChjYWxsYmFjaykgPT4ge1xuICAgICAgY2FsbGJhY2soeyB4LCB5LCBkaXN0YW5jZSwgZGlyZWN0aW9uLCBvcmlnaW4sIGRlc3RpbmF0aW9uLCBtb3VzZSB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG4od2luZG93IGFzIGFueSkuZGVmYXVsdFNoYXBlcyA9IGRlZmF1bHRTaGFwZXM7XG4iLCJpbXBvcnQgZ2FtZUxvb3AgZnJvbSBcIi4vZ2FtZS9nYW1lTG9vcFwiO1xuaW1wb3J0IHsgY3R4IH0gZnJvbSBcIi4vZ2FtZS9jYW52YXNcIjtcbmltcG9ydCBDYW52YXNCb2FyZCBmcm9tIFwiLi9nYW1lL0NhbnZhc0JvYXJkXCI7XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICBjb25zdCBib2FyZCA9IG5ldyBDYW52YXNCb2FyZCh7XG4gICAgd2lkdGg6IE1hdGgubWluKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQsIDUwMCksXG4gICAgcm93Q291bnQ6IDksXG4gICAgY29sQ291bnQ6IDksXG4gIH0pO1xuXG4gIGJvYXJkLm9uRHJhZ0VuZCgoZXZlbnQpID0+IHtcbiAgICBib2FyZC5zd2FwVGlsZShldmVudC5vcmlnaW4sIGV2ZW50LmRlc3RpbmF0aW9uKTtcbiAgICBjb25zdCBzaGFwZXMgPSBib2FyZC5tYXRjaFNoYXBlcygpO1xuICAgIGlmICghc2hhcGVzLmxlbmd0aCkgYm9hcmQuc3dhcFRpbGUoZXZlbnQub3JpZ2luLCBldmVudC5kZXN0aW5hdGlvbik7XG4gIH0pO1xuXG4gIGdhbWVMb29wKGN0eCwgKF9sb29wQ291bnQpID0+IHtcbiAgICBib2FyZC5kcmF3KGN0eCk7XG4gICAgYm9hcmQudXBkYXRlKCk7XG4gIH0pO1xuXG4gICh3aW5kb3cgYXMgYW55KS5ib2FyZCA9IGJvYXJkO1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9