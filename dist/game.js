!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=4)}([function(t,e,n){"use strict";function r(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];for(var r="number"==typeof e[0]?e[0]:0,i="function"==typeof e[0]?e[0]:e[1],o=t<r?[t,r]:[r,t],a=o[0],s=o[1]-a,l=Array(s),c=0;c<s;c++)l[c]=i?i(c+a):c+a;return l}n.d(e,"b",(function(){return r})),n.d(e,"a",(function(){return i}));var i=function(t,e){var n=t<e?[t,e]:[e,t],r=n[0],i=n[1]-r;return r+Math.random()*i}},function(t,e,n){"use strict";var r=function(t){if(void 0===t&&(t={}),this.type="",Object.assign(this,t),!this.type)throw new Error("Tiles must have a type.")};e.a=r},function(t,e,n){"use strict";var r=n(1),i=n(0),o=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r},a=function(){function t(t){this.rowCount=10,this.colCount=10,this.tileTypes=["a","b","c","d"],this.tileClass=r.a,Object.assign(this,t),this.tileGenerator=t.tileGenerator,this.rows=this.newRows()}return Object.defineProperty(t.prototype,"rows",{get:function(){return this._rows},set:function(t){if(!t.every((function(e){return t[0].length===e.length})))throw new Error("Rows must all be the same length");this._rows=t,delete this._columns,this.rowCount=t.length,this.colCount=t[0].length},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"columns",{get:function(){return this._columns?this._columns:(this._columns=this.rows.reduce((function(t,e){return e.forEach((function(e,n){t[n]=o(t[n]||[],[e])})),t}),[]),this._columns)},set:function(t){if(!t.every((function(e){return t[0].length===e.length})))throw new Error("Columns must all be the same length");this.rows=t.reduce((function(t,e){return e.forEach((function(e,n){t[n]=o(t[n]||[],[e])})),t}),[])},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"tiles",{get:function(){return this.rows.reduce((function(t,e){return o(t,e)}),[])},enumerable:!0,configurable:!0}),t.prototype.newRows=function(){var t=this;return Object(i.b)(this.rowCount,(function(){return Object(i.b)(t.colCount,(function(){return t.tileGenerator()}))}))},t}();e.a=a},,function(t,e,n){"use strict";n.r(e);var r=function(t,e,n){void 0===n&&(n=0),requestAnimationFrame((function(){return r(t,e,n+1)})),t.clearRect(0,0,window.innerWidth,window.innerHeight),e(n)},i=r,o=document.createElement("canvas"),a=function(){o.width=window.innerWidth,o.height=window.innerHeight};a(),window.addEventListener("resize",a),document.body.appendChild(o);var s=o.getContext("2d");s||console.error("Canvas '2d' context is not supported.");var l,c=n(2),u=n(1),h=(l=function(t,e){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}l(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),p=function(t){function e(e){var n=t.call(this,{type:e.colorIsType&&(e.type||e.color)||e.imgUrlIsType&&(e.type||e.imgUrl)||e.type})||this;return n.width=50,n.height=50,n.color="transparent",n.selected=!1,n.targeted=!1,n.matchedAt=null,n.blank=!1,n._imgUrl="",n.width=e.width||n.width,n.height=e.height||n.height,n.color=e.colorIsType&&e.type||e.color||n.color,n.blank=e.blank||n.blank,n._imgUrl=e.imgUrlIsType&&e.type||e.imgUrl||n._imgUrl,n.applySelectedStyle=e.applySelectedStyle||function(){},n.applyTargetedStyle=e.applyTargetedStyle||function(){},n.applyMatchedStyle=e.applyMatchedStyle||function(){},n}return h(e,t),Object.defineProperty(e.prototype,"matched",{get:function(){return!!this.matchedAt},set:function(t){this.matchedAt=t?this.matchedAt||new Date:null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"imgUrl",{get:function(){return this._imgUrl},set:function(t){this._imgUrl=t,delete this._image},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"image",{get:function(){if(this._image)return this.image;if(!this.imgUrl)return null;var t=document.createElement("img");return t.src=this.imgUrl,t.width=this.width,t.height=this.height,this._image=t,this._image},enumerable:!0,configurable:!0}),e.prototype.draw=function(t,e,n){this.blank||(t.fillStyle=this.color,this.image?t.drawImage(this.image,e,n):t.fillRect(e,n,this.width,this.height),this.matched?this.applyMatchedStyle(this,{x:e,y:n}):this.selected?this.applySelectedStyle(this,{x:e,y:n}):this.targeted&&this.applyTargetedStyle(this,{x:e,y:n}))},e}(u.a),f=n(0),d=new(function(){function t(){var t=this;this.x=0,this.y=0,this.pressed=!1,this.pressCallbacks=[],this.depressCallbacks=[],this.moveCallbacks=[],this.pressedStartPos={x:this.x,y:this.y},window.addEventListener("mousedown",(function(e){t.populateFromMouseEvent(e),t.pressCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("mousemove",(function(e){t.populateFromMouseEvent(e),t.moveCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("mouseup",(function(e){t.depressCallbacks.forEach((function(e){return e(t)})),t.populateFromMouseEvent(e)})),window.addEventListener("touchstart",(function(e){t.populateFromTouchEvent(e),t.pressCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("touchmove",(function(e){t.populateFromTouchEvent(e),t.moveCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("touchend",(function(e){t.depressCallbacks.forEach((function(e){return e(t)})),t.populateFromTouchEvent(e)}))}return Object.defineProperty(t.prototype,"dragVector",{get:function(){var t=this.pressedStartPos,e=t.x,n=t.y;return this.pressed?{x:this.x-e,y:this.y-n}:{x:0,y:0}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"dragDirection",{get:function(){var t=this.dragVector,e=t.x,n=t.y;return 0===e&&0===n?"none":Math.abs(e)>=Math.abs(n)?e<0?"left":"right":n<0?"up":"down"},enumerable:!0,configurable:!0}),t.prototype.onPress=function(t){this.pressCallbacks.push(t)},t.prototype.onDepress=function(t){this.depressCallbacks.push(t)},t.prototype.onMove=function(t){this.moveCallbacks.push(t)},t.prototype.populateFromMouseEvent=function(t){this.x=t.x,this.y=t.y;var e=this.pressed;this.pressed=1===t.buttons,this.pressed&&!e&&(this.pressedStartPos={x:this.x,y:this.y})},t.prototype.populateFromTouchEvent=function(t){var e=t.touches,n=this.pressed;if(0===e.length)this.pressed=!1;else{var r=e[0];this.x=r.clientX,this.y=r.clientY,this.pressed=!0,n||(this.pressedStartPos={x:this.x,y:this.y})}},t}());var g=function(){function t(t){void 0===t&&(t={}),this.value=t.value||1,this.extend=t.extend||!1,this.map=t.map||[[]]}return t.fromLength=function(e,n){var r=void 0===n?{}:n,i=r.value;return new t({value:void 0===i?1:i,extend:!!r.orMore,map:[Object(f.b)(e,(function(){return!0}))]})},Object.defineProperty(t.prototype,"extend",{get:function(){return this._extend&&this.linear},set:function(t){this._extend=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"map",{get:function(){return this._map},set:function(t){delete this._linear;var e=t.reduce((function(t,e){var n=e.length;return n>t?n:t}),0);this._map=t.map((function(t){return Object(f.b)(e,(function(e){return t[e]||!1}))}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"linear",{get:function(){return void 0!==this._linear?this._linear:(this._linear=1===this.map.length&&this.map[0].every((function(t){return t}))||this.map.every((function(t){return 1===t.length&&t[0]})),this._linear)},enumerable:!0,configurable:!0}),t.prototype.match=function(t,e,n,r){if(void 0===n&&(n=0),void 0===r&&(r=this.map),n>3)return[];var i,o=[],a=!1;return r.every((function(n,r){var s=t[r];return!!s&&n.every((function(t,n){if(!t)return!0;var r=s[n];if(!r)return!1;var l=r[e];return a||(i=l,a=!0),l===i&&(o.push(r),!0)}))}))?o:this.match(t,e,n+1,function(t){for(var e=[],n=0;n<t.length;n++)for(var r=t[n],i=0;i<r.length;i++){var o=r[i];e[i]=e[i]||[],e[i].unshift(o)}return e}(r))},t}(),y=function(){return[g.fromLength(3,{value:1}),g.fromLength(4,{value:2}),g.fromLength(5,{value:3}),g.fromLength(6,{value:4,orMore:!0}),new g({value:5,map:[[!0,!0,!0],[!0],[!0]]}),new g({value:6,map:[[!0,!0,!0],[!1,!0],[!1,!0]]}),new g({value:7,map:[[!0,!0],[!0,!0]]})]},w=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),v=function(){return(v=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},m=function(){return{row:-1,col:-1,tile:null}},b=function(t,e){var n=e.x-t.x,r=e.y-t.y;return Math.sqrt(Math.pow(n,2)+Math.pow(r,2))},S=function(t){function e(e){var n=t.call(this,v(v({},e),{tileTypes:e.tileTypes||["red","orange","yellow","green","blue"],tileGenerator:function(){return new p({type:this.tileTypes[Math.floor(Object(f.a)(0,this.tileTypes.length))],width:this.tileWidth,height:this.tileHeight,colorIsType:!0,applySelectedStyle:this.applySelectedStyle,applyTargetedStyle:this.applyTargetedStyle,applyMatchedStyle:this.applyMatchedStyle})}}))||this;return n.dragStartCallbacks=[],n.dragEndCallbacks=[],n.dragCallbacks=[],n.dragOrigin=m(),n.x=e.x||0,n.y=e.y||0,n.width=e.width||50*n.colCount,n.height=e.height||n.width,n.sensitivity=e.sensitivity||25,n.shapes=e.shapes||y(),n.applySelectedStyle=e.applySelectedStyle||function(){},n.applyTargetedStyle=e.applyTargetedStyle||function(){},n.applyMatchedStyle=e.applyMatchedStyle||function(){},n.matchAnimationMs=e.matchAnimationMs||250,d.onPress(n.runDragStartCallbacks.bind(n)),d.onDepress(n.runDragEndCallbacks.bind(n)),d.onMove(n.runDragCallbacks.bind(n)),n.rows=n.newRows(),n}return w(e,t),Object.defineProperty(e.prototype,"tileWidth",{get:function(){return this.width/this.colCount},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tileHeight",{get:function(){return this.height/this.rowCount},enumerable:!0,configurable:!0}),e.prototype.draw=function(t){var e=this,n=this.checkSettle(),r=this.startedSettlingAt?(new Date).getTime()-this.startedSettlingAt.getTime():0,i=r/100*this.tileHeight,o=r>100;o&&delete this.startedSettlingAt;var a=[];this.rows.forEach((function(r,s){r.forEach((function(r,l){var c=e.x+l*r.width,u=e.y+s*r.height;if(n&&!r.blank){var h={row:s,col:l},p=e.adjacentTile(h,"down");p.tile&&p.tile.blank&&(u+=i,o&&a.push([h,p]))}r.draw(t,c,u)}))})),a.forEach((function(t){var n=t[0],r=t[1];return e.swapTile(n,r)}))},e.prototype.update=function(){var t=this;(this.rows[0]=this.rows[0].map((function(e){return e.blank?t.tileGenerator():e})),this.rows.slice(1).some((function(t){return t.some((function(t){return t.blank}))})))||this.matchShapes().forEach((function(e){e.shape;e.tiles.forEach((function(e){e.matched=!0,setTimeout((function(){e.blank=!0}),t.matchAnimationMs)}))}))},e.prototype.checkSettle=function(){return this.tiles.some((function(t){return t.blank}))?(this.startedSettlingAt||(this.startedSettlingAt=new Date),!0):(delete this.startedSettlingAt,!1)},e.prototype.tileAt=function(t){if("row"in t){var e=t.row,n=t.col,r=this.rows[e][n];return r?{row:e,col:n,tile:r}:m()}var i=t.x-this.x,o=t.y-this.y;if(i>this.width||o>this.height)return m();var a=i/this.width,s=o/this.height,l=Math.floor(s*this.rowCount),c=Math.floor(a*this.colCount);return{row:l,col:c,tile:this.rows[l][c]}},e.prototype.tileCenter=function(t){var e=t.row,n=t.col,r=t.tile;return r?{x:this.x+n*r.height+r.height/2,y:this.y+e*r.width+r.width/2}:{x:-1,y:-1}},e.prototype.swapTile=function(t,e){"string"==typeof e?this.swapTileInDirection(t,e):this.swapTileWithTile(t,e)},e.prototype.onDragStart=function(t){var e=this.dragStartCallbacks.length;return this.dragStartCallbacks.push(t),e},e.prototype.removeDragStartListener=function(t){delete this.dragStartCallbacks[t]},e.prototype.onDragEnd=function(t){var e=this.dragEndCallbacks.length;return this.dragEndCallbacks.push(t),e},e.prototype.removeDragEndListener=function(t){delete this.dragEndCallbacks[t]},e.prototype.onDrag=function(t){var e=this.dragCallbacks.length;return this.dragCallbacks.push(t),e},e.prototype.removeDragListener=function(t){delete this.dragCallbacks[t]},e.prototype.adjacentSpace=function(t,e){var n="row"in t?t:this.tileAt(t),r=n.row,i=n.col;switch(e){case"up":return{row:r-1,col:i};case"down":return{row:r+1,col:i};case"left":return{row:r,col:i-1};case"right":return{row:r,col:i+1};default:return{row:r,col:i}}},e.prototype.adjacentTile=function(t,e){var n=this.adjacentSpace(t,e),r=n.row,i=n.col,o=this.rows[r]&&this.rows[r][i];return o?{row:r,col:i,tile:o}:m()},e.prototype.removeTile=function(t){t.blank=!0},e.prototype.matchShapes=function(){var t=this;return Object(f.b)(this.colCount).reduce((function(e,n){return t.shapes.forEach((function(r){t.rows.forEach((function(i,o){var a=t.rows.slice(o).map((function(t){return t.slice(n)})),s=r.match(a,"type");s.length&&e.push({shape:r,tiles:s})}))})),e}),[])},e.prototype.swapTileWithTile=function(t,e){var n=this.tileAt(t);if(n.tile){var r=this.tileAt(e);r.tile&&(this.rows[r.row][r.col]=n.tile,this.rows[n.row][n.col]=r.tile)}},e.prototype.swapTileInDirection=function(t,e){var n=this.tileAt(t);if(n.tile){var r=this.adjacentTile(n,e);r.tile&&(this.rows[r.row][r.col]=n.tile,this.rows[n.row][n.col]=r.tile)}},e.prototype.clearExistingDragFlags=function(){this.tiles.forEach((function(t){t.selected=!1,t.targeted=!1}))},e.prototype.setDragStartFlags=function(t){this.clearExistingDragFlags(),t.tile.selected=!0,t.tile.targeted=!0},e.prototype.setDragEndFlags=function(){this.clearExistingDragFlags()},e.prototype.setDragFlags=function(t,e){this.clearExistingDragFlags(),t.tile.selected=!0,e.tile.targeted=!0},e.prototype.runDragStartCallbacks=function(t){var e=t.x,n=t.y,r=this.tileAt({x:e,y:n});if(r.tile){this.dragOrigin=r,this.setDragStartFlags(this.dragOrigin);var i=b(t,this.tileCenter(r)),o=t.dragDirection,a=r;this.dragStartCallbacks.forEach((function(s){s({x:e,y:n,distance:i,direction:o,origin:r,destination:a,mouse:t})}))}},e.prototype.runDragEndCallbacks=function(t){var e=this.dragOrigin;if(e.tile){var n=t.x,r=t.y,i=b(t,this.tileCenter(e)),o=i>this.sensitivity?this.adjacentTile(e,t.dragDirection):e,a=o.tile?o:e,s=t.dragDirection;this.setDragEndFlags(),this.dragEndCallbacks.forEach((function(o){o({x:n,y:r,distance:i,direction:s,origin:e,destination:a,mouse:t})})),this.dragOrigin=m()}},e.prototype.runDragCallbacks=function(t){var e=this.dragOrigin;if(e.tile){var n=t.x,r=t.y;if(t.pressed){var i=b(t,this.tileCenter(e)),o=i>this.sensitivity?this.adjacentTile(e,t.dragDirection):e,a=o.tile?o:e,s=t.dragDirection;this.setDragFlags(e,a),this.dragCallbacks.forEach((function(o){o({x:n,y:r,distance:i,direction:s,origin:e,destination:a,mouse:t})}))}}},e}(c.a);window.defaultShapes=y;var C=function(t,e){var n=e.x,r=e.y,i=t.width,o=t.height;s.fillStyle="rgba(255, 255, 255, 0.5)",s.fillRect(n,r,i,o)},E=function(t,e){var n=e.x,r=e.y,i=t.width,o=t.height,a=(new Date).getTime(),l=2+3*Math.sin(a/250%Math.PI);s.fillStyle="rgba(255, 255, 255, 0.9)",s.fillRect(n,r,i,o),s.fillStyle=t.color,s.fillRect(n+l,r+l,i-2*l,o-2*l)},x=function(t,e){var n=e.x,r=e.y,i=t.width,o=t.height,a=t.color;if(t.matchedAt){var l=(new Date).getTime()-t.matchedAt.getTime(),c=l>250?1:l/250,u=c*(i/2),h=c*(o/2);s.fillStyle="#FFF",s.fillRect(n,r,i,o),s.fillStyle=a,s.fillRect(n+u,r+h,i-2*u,o-2*h)}};window.addEventListener("DOMContentLoaded",(function(){var t=new S({width:Math.min(window.innerWidth,500),rowCount:10,colCount:10,matchAnimationMs:250,applySelectedStyle:C,applyTargetedStyle:E,applyMatchedStyle:x});t.onDragEnd((function(e){t.swapTile(e.origin,e.destination),t.matchShapes().length||t.swapTile(e.origin,e.destination)})),i(s,(function(e){t.draw(s),t.update()})),window.board=t}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,