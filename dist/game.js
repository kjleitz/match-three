!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=4)}([function(t,e,r){"use strict";r.d(e,"d",(function(){return i})),r.d(e,"c",(function(){return o})),r.d(e,"h",(function(){return a})),r.d(e,"a",(function(){return l})),r.d(e,"g",(function(){return s})),r.d(e,"b",(function(){return u})),r.d(e,"e",(function(){return h})),r.d(e,"f",(function(){return f})),r.d(e,"i",(function(){return p}));var n=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],a=0,l=o.length;a<l;a++,i++)n[i]=o[a];return n};function i(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];for(var n="number"==typeof e[0]?e[0]:0,i="function"==typeof e[0]?e[0]:e[1],o=t<n?[t,n]:[n,t],a=o[0],l=o[1]-a,s=Array(l),c=0;c<l;c++)s[c]=i?i(c+a):c+a;return s}var o=function(t,e,r){void 0===e&&(e=0),void 0===r&&(r=!0);var n=t<e?[t,e]:[e,t],i=n[0],o=n[1],a=Math.random()*(o-i);return i+(r?Math.floor(a):a)},a=function(t){return t[Math.floor(Math.random()*t.length)]},l=function(t,e){var r=e.x-t.x,n=e.y-t.y;return Math.sqrt(Math.pow(r,2)+Math.pow(n,2))},s=function(t,e,r){var n=t.x-e.x,i=t.y-e.y,o=Math.cos(r),a=Math.sin(r),l=n*a+i*o;return{x:n*o-i*a+e.x,y:l+e.y}};function c(t){return void 0===t||"[object Null]"===Object.prototype.toString.call(t)}var u=function(t,e){var r;return t.find((function(t,n,i){return!c(r=e(t,n,i))})),r},h=function(t,e){void 0===e&&(e=1);var r=e%4;switch(r<0?4-r:r){case 1:return t.reduce((function(e,r,n){return r.forEach((function(r,i){var o=i,a=t.length-n-1;e[o]=e[o]||[],e[o][a]=r})),e}),[]);case 2:return n(t).reverse().map((function(t){return n(t).reverse()}));case 3:return t.reduce((function(t,e,r){return e.forEach((function(n,i){var o=e.length-i-1,a=r;t[o]=t[o]||[],t[o][a]=n})),t}),[]);default:return t.map((function(t){return n(t)}))}},f=function(t,e,r,n){var i=t.row,o=t.col,a=n%4;switch(a<0?4-a:a){case 1:return{row:o,col:e-i-1};case 2:return{row:e-i-1,col:r-o-1};case 3:return{row:r-o-1,col:i};default:return{row:i,col:o}}},p=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t}},function(t,e,r){"use strict";var n="mundane",i=function(){function t(t){var e=t.type,r=t.value,i=t.variant;this.type=e,this.value=r||1,this._variant=i||n}return Object.defineProperty(t.prototype,"variant",{get:function(){return this._variant||n},set:function(t){this._variant=t||n},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isMundane",{get:function(){return this.variant===n},enumerable:!0,configurable:!0}),t}();e.a=i},function(t,e,r){"use strict";var n=r(1),i=r(0),o=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],a=0,l=o.length;a<l;a++,i++)n[i]=o[a];return n},a=function(){function t(t){this.rowCount=9,this.colCount=9,this.tileClass=n.a,Object.assign(this,t),this.tileDefs=t.tileDefs}return Object.defineProperty(t.prototype,"rows",{get:function(){return this._rows=this._rows||this.newRows(),this._rows},set:function(t){this._rows=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"tiles",{get:function(){return this.rows.reduce((function(t,e){return o(t,e)}),[])},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"tileTypes",{get:function(){return Object.keys(this.tileDefs)},enumerable:!0,configurable:!0}),t.prototype.newMundaneTile=function(){var t=Object(i.h)(this.tileTypes);return this.tileDefs[t].generator({variant:"mundane"})},t.prototype.newRows=function(){var t=this;return Object(i.d)(this.rowCount,(function(){return Object(i.d)(t.colCount,(function(){return t.newMundaneTile()}))}))},t.prototype.shuffle=function(){var t=this,e=this.rows.length;this.rows.forEach((function(r,n){var o=r.length;r.forEach((function(r,a){var l=Object(i.c)(e),s=Object(i.c)(o),c=t.rows[l][s];t.rows[l][s]=r,t.rows[n][a]=c}))}))},t}();e.a=a},,function(t,e,r){"use strict";r.r(e);var n=function(t,e,r){void 0===r&&(r=0),requestAnimationFrame((function(){return n(t,e,r+1)})),t.clearRect(0,0,window.innerWidth,window.innerHeight),e(r)},i=n,o=document.createElement("canvas"),a=o.getContext("2d");a||console.error("Canvas '2d' context is not supported.");var l=function(){var t=window.devicePixelRatio||1,e=window.innerWidth,r=window.innerHeight;o.width=e*t,o.height=r*t,o.style.width=e+"px",o.style.height=r+"px",a.scale(t,t)};window.addEventListener("DOMContentLoaded",(function(){l(),window.addEventListener("resize",l),document.body.appendChild(o)}));var s,c=r(2),u=r(1),h=r(0),f=function(t,e,r,n,i,o,a){var l=2*o,s=.75*l,c=o,u=a-2*s,f=i.y+u/2,p=f-u,d=i.x-c/2,y=i.x+c/2,g=i.x-l/2,v=i.x+l/2,w=p,b=w-s,m=f,x=m+s,S={vertical:0,horizontal:.5*Math.PI}[e],T=[{x:d,y:p},{x:d,y:f},{x:g,y:m},{x:i.x,y:x},{x:v,y:m},{x:y,y:f},{x:y,y:p},{x:v,y:w},{x:i.x,y:b},{x:g,y:w}],k=S?T.map((function(t){return Object(h.g)(t,i,S)})):T;t.fillStyle=r,t.strokeStyle=n,t.beginPath();var O=k[0];t.moveTo(O.x,O.y),k.forEach((function(e){var r=e.x,n=e.y;return t.lineTo(r,n)})),t.lineTo(O.x,O.y),t.closePath(),t.fill(),n&&t.stroke()},p=function(t,e){var r=e.position,n=e.size,i=e.fillStyle,o=e.strokeStyle,a=e.scale||1,l=a*n,s=a*(.85*n),c=l/4,u=r.x+(n-l)/2,h=u+l,f=r.y+(n-s)/2,p=f+s,d=u+2*c,y=f+c,g=u+c,v=d+c,w=new Path2D;if(w.arc(g,y,c,Math.PI,0),w.arc(v,y,c,Math.PI,0),w.bezierCurveTo(h,y+c,d+c,p-c,d,p),w.bezierCurveTo(d-c,p-c,u,y+c,u,y),w.closePath(),t.fillStyle=i,o)t.strokeStyle=o;else{var b=t.createRadialGradient(d,p-s/2,5,d,p-s/2,s);b.addColorStop(0,i),b.addColorStop(1,"white"),t.strokeStyle=b}t.lineWidth=3,t.lineJoin="round",t.fill(w),t.stroke(w)},d=function(t,e){var r=e.position,n=e.size,i=e.fillStyle,o=e.strokeStyle,a=e.scale||1,l=r.x,s=r.y,c=a*n,u=Math.sqrt(Math.pow(c,2)-Math.pow(.5*c,2)),h=l+(n-c)/2,f=h+c,p=s+(n-u)/2,d=p+u,y=h+c/2,g=d-c/2*Math.tan(Math.PI/6),v=new Path2D;if(v.moveTo(y,p),v.lineTo(f,d),v.lineTo(h,d),v.lineTo(y,p),v.closePath(),t.fillStyle=i,o)t.strokeStyle=o;else{var w=t.createRadialGradient(y,g,5,y,g,u);w.addColorStop(0,i),w.addColorStop(1,"white"),t.strokeStyle=w}t.lineWidth=3,t.lineJoin="round",t.fill(v),t.stroke(v)},y=function(t,e){var r=e.position,n=e.size,i=e.fillStyle,o=e.strokeStyle,a=(e.scale||1)*n,l=a/2,s=r.x+(n-a)/2+l,c=r.y+(n-a)/2+l,u=new Path2D;if(u.arc(s,c,l,0,Math.PI),u.arc(s,c,l,Math.PI,0),u.closePath(),t.fillStyle=i,o)t.strokeStyle=o;else{var h=t.createRadialGradient(s,c,5,s,c,a);h.addColorStop(0,i),h.addColorStop(1,"white"),t.strokeStyle=h}t.lineWidth=3,t.lineJoin="round",t.fill(u),t.stroke(u)},g=function(t,e){var r=e.position,n=e.size,i=e.fillStyle,o=e.strokeStyle,a=e.scale||1,l=e.obesity||2,s=a*n,c=r.x+(n-s)/2,u=r.y+(n-s)/2,f={x:c+s/2,y:u+s/2},p=2*Math.PI/5,d={x:f.x,y:u},y=Object(h.g)(d,f,p),g=Object(h.g)(d,f,2*p),v=Object(h.g)(d,f,3*p),w=Object(h.g)(d,f,4*p),b=(f.x-c)*Math.sin(p/2)*2,m=Math.PI-p,x=(Math.PI-m)/2,S=b/2/Math.cos(x),T={x:y.x-S+l,y:y.y-l},k={x:w.x+S-l,y:w.y-l},O=Object(h.g)(T,f,p),C=Object(h.g)(k,f,-1*p),M=Object(h.g)(O,f,p),j=new Path2D;if(j.moveTo(d.x,d.y),j.lineTo(T.x,T.y),j.lineTo(y.x,y.y),j.lineTo(O.x,O.y),j.lineTo(g.x,g.y),j.lineTo(M.x,M.y),j.lineTo(v.x,v.y),j.lineTo(C.x,C.y),j.lineTo(w.x,w.y),j.lineTo(k.x,k.y),j.lineTo(d.x,d.y),j.closePath(),t.fillStyle=i,o)t.strokeStyle=o;else{var E=t.createRadialGradient(f.x,f.y,5,f.x,f.y,s);E.addColorStop(0,i),E.addColorStop(1,"white"),t.strokeStyle=E}t.lineWidth=3,t.lineJoin="round",t.fill(j),t.stroke(j)},v=function(t,e){var r=e.position,n=e.size,i=e.fillStyle,o=e.strokeStyle,a=(e.scale||1)*n,l=r.x+(n-a)/2,s=r.y+(n-a)/2,c=new Path2D;if(c.rect(l,s,a,a),t.fillStyle=i,o)t.strokeStyle=o;else{var u=t.createRadialGradient(l+a/2,s+a/2,5,l+a/2,s+a/2,a);u.addColorStop(0,i),u.addColorStop(1,"white"),t.strokeStyle=u}t.lineWidth=3,t.lineJoin="round",t.fill(c),t.stroke(c)},w=(s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),b=function(){return(b=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},m=function(t){function e(e){var r=t.call(this,e)||this;return r.width=50,r.height=50,r.color="white",r.shape="",r.selected=!1,r.targeted=!1,r.matchedAt=null,r.blank=!1,r.matchAnimationMs=250,r._imgUrl="",r.width=e.width||r.width,r.height=e.height||r.height,r.color=e.color||r.color,r.shape=e.shape||r.shape,r.blank=e.blank||r.blank,r.matchAnimationMs=e.matchAnimationMs||r.matchAnimationMs,r._imgUrl=e.imgUrl||r._imgUrl,r.applyNormalStyle=e.applyNormalStyle||r.defaultApplyNormalStyle,r.applySelectedStyle=e.applySelectedStyle||r.defaultApplySelectedStyle,r.applyTargetedStyle=e.applyTargetedStyle||r.defaultApplyTargetedStyle,r.applyMatchedStyle=e.applyMatchedStyle||r.defaultApplyMatchedStyle,r}return w(e,t),Object.defineProperty(e.prototype,"matched",{get:function(){return!!this.matchedAt},set:function(t){var e=this;t&&this.matchedAt||(clearTimeout(this.blankTimeout),t?(this.matchedAt=new Date,this.blankTimeout=window.setTimeout((function(){return e.blank=!0}),this.matchAnimationMs)):this.matchedAt=null)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"imgUrl",{get:function(){return this._imgUrl},set:function(t){this._imgUrl=t,delete this._image},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"image",{get:function(){if(this._image)return this.image;if(!this.imgUrl)return null;var t=document.createElement("img");return t.src=this.imgUrl,t.width=this.width,t.height=this.height,this._image=t,this._image},enumerable:!0,configurable:!0}),e.prototype.draw=function(t,e,r){this.blank||(this.applyNormalStyle(t,this,{x:e,y:r}),this.matched?this.applyMatchedStyle(t,this,{x:e,y:r}):this.selected?this.applySelectedStyle(t,this,{x:e,y:r}):this.targeted&&this.applyTargetedStyle(t,this,{x:e,y:r}))},e.prototype.defaultApplyNormalStyle=function(t,e,r){var n=this,i=r.x,o=r.y,a=e.width,l=e.height,s=e.image,c=e.color,u=e.variant,h=function(e,r){var s={position:{x:i,y:o},size:Math.min(a,l),fillStyle:e,strokeStyle:r,scale:.9};switch(n.shape){case"heart":p(t,s);break;case"star":g(t,s);break;case"square":v(t,b(b({},s),{scale:.8}));break;case"circle":y(t,b(b({},s),{scale:.8}));break;case"triangle":d(t,s);break;default:t.fillStyle=c,t.fillRect(i,o,a,l)}};s?t.drawImage(s,i,o):h(c);var w={x:i+a/2,y:{"":o+l/2,square:o+l/2,circle:o+l/2,heart:o+l/2,star:o+l/2.1,triangle:o+l/1.65}[this.shape]},m=a/12,x=.4*a;switch(u){case"horizontalClear":f(t,"horizontal","rgba(255,255,255,0.9)","",w,m,x);break;case"verticalClear":f(t,"vertical","rgba(255,255,255,0.9)","",w,m,x);break;case"crossClear":!function(t,e,r,n,i,o){var a=2*i,l=.75*a,s=i,c=s,u=o-2*l-s,h=n.y-c/2,f=h-u,p=n.y+c/2,d=p+u,y=n.x-s/2,g=y-u,v=n.x+s/2,w=v+u,b=f,m=b-l,x=d,S=x+l,T=g,k=T-l,O=w,C=O+l,M=h,j=p,E=y,P=v,D=n.y-a/2,_=n.y+a/2,A=n.x-a/2,z=n.x+a/2,F=[{x:E,y:f},{x:E,y:h},{x:g,y:M},{x:T,y:D},{x:k,y:n.y},{x:T,y:_},{x:g,y:j},{x:y,y:j},{x:E,y:d},{x:A,y:x},{x:n.x,y:S},{x:z,y:x},{x:P,y:d},{x:P,y:p},{x:w,y:j},{x:O,y:_},{x:C,y:n.y},{x:O,y:D},{x:w,y:M},{x:v,y:M},{x:P,y:f},{x:z,y:b},{x:n.x,y:m},{x:A,y:b}];t.fillStyle=e,t.strokeStyle=r,t.beginPath();var I=F[0];t.moveTo(I.x,I.y),F.forEach((function(e){var r=e.x,n=e.y;return t.lineTo(r,n)})),t.lineTo(I.x,I.y),t.closePath(),t.fill(),r&&t.stroke()}(t,"rgba(255,255,255,0.9)","",w,m,x);break;case"bombClear":h("rgba(0, 0, 0, 0.6)",c);break;case"typeClear":var S=(new Date).getTime()/500%(2*Math.PI);h("rgb("+255*(1-.8*Math.abs(Math.sin(S)))+", "+255*(1-.8*Math.abs(Math.sin(S+2/3*Math.PI)))+", "+255*(1-.8*Math.abs(Math.sin(S+4/3*Math.PI)))+")",c)}},e.prototype.defaultApplySelectedStyle=function(t,e,r){var n=r.x,i=r.y,o=e.width,a=e.height;t.fillStyle="rgba(255, 255, 255, 0.5)",t.fillRect(n,i,o,a)},e.prototype.defaultApplyTargetedStyle=function(t,e,r){var n=r.x,i=r.y,o=e.width,a=e.height,l=(new Date).getTime(),s=this.matchAnimationMs,c=2+3*Math.sin(l/s%Math.PI);t.fillStyle="rgba(255, 255, 255, 0.9)",t.fillRect(n,i,o,a),t.fillStyle=e.color,t.fillRect(n+c,i+c,o-2*c,a-2*c)},e.prototype.defaultApplyMatchedStyle=function(t,e,r){var n=r.x,i=r.y,o=e.width,a=e.height,l=e.color,s=e.matchAnimationMs;if(e.matchedAt){var c=(new Date).getTime()-e.matchedAt.getTime(),u=c>s?1:c/s,h=u*(o/2),f=u*(a/2);t.fillStyle="#FFF",t.fillRect(n,i,o,a),t.fillStyle=l,t.fillRect(n+h,i+f,o-2*h,a-2*f)}},e}(u.a),x=new(function(){function t(){var t=this;this.x=0,this.y=0,this.pressed=!1,this.pressCallbacks=[],this.depressCallbacks=[],this.moveCallbacks=[],this.pressedStartPos={x:this.x,y:this.y},window.addEventListener("mousedown",(function(e){t.populateFromMouseEvent(e),t.pressCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("mousemove",(function(e){t.populateFromMouseEvent(e),t.moveCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("mouseup",(function(e){t.depressCallbacks.forEach((function(e){return e(t)})),t.populateFromMouseEvent(e)})),window.addEventListener("touchstart",(function(e){t.populateFromTouchEvent(e),t.pressCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("touchmove",(function(e){t.populateFromTouchEvent(e),t.moveCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("touchend",(function(e){t.depressCallbacks.forEach((function(e){return e(t)})),t.populateFromTouchEvent(e)}))}return Object.defineProperty(t.prototype,"dragVector",{get:function(){var t=this.pressedStartPos,e=t.x,r=t.y;return this.pressed?{x:this.x-e,y:this.y-r}:{x:0,y:0}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"dragDirection",{get:function(){var t=this.dragVector,e=t.x,r=t.y;return 0===e&&0===r?"none":Math.abs(e)>=Math.abs(r)?e<0?"left":"right":r<0?"up":"down"},enumerable:!0,configurable:!0}),t.prototype.onPress=function(t){this.pressCallbacks.push(t)},t.prototype.onDepress=function(t){this.depressCallbacks.push(t)},t.prototype.onMove=function(t){this.moveCallbacks.push(t)},t.prototype.populateFromMouseEvent=function(t){this.x=t.x,this.y=t.y;var e=this.pressed;this.pressed=1===t.buttons,this.pressed&&!e&&(this.pressedStartPos={x:this.x,y:this.y})},t.prototype.populateFromTouchEvent=function(t){var e=t.touches,r=this.pressed;if(0===e.length)this.pressed=!1;else{var n=e[0];this.x=n.clientX,this.y=n.clientY,this.pressed=!0,r||(this.pressedStartPos={x:this.x,y:this.y})}},t}()),S=function(){return(S=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},T=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],a=0,l=o.length;a<l;a++,i++)n[i]=o[a];return n},k=function(){function t(t){void 0===t&&(t={}),this.value=t.value||1,this.extend=t.extend||!1,this.map=t.map||[[]]}return t.fromLength=function(e,r){var n=void 0===r?{}:r,i=n.value;return new t({value:void 0===i?1:i,extend:!!n.orMore,map:[Object(h.d)(e,(function(){return!0}))]})},t.rotated=function(e,r){return void 0===r&&(r=1),new t(S(S({},e),{map:Object(h.e)(e.map,r)}))},Object.defineProperty(t.prototype,"extend",{get:function(){return this._extend&&this.linear},set:function(t){this._extend=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"map",{get:function(){return this._map},set:function(t){delete this._linear;var e=t.reduce((function(t,e){var r=e.length;return r>t?r:t}),0);this._map=t.map((function(t){return Object(h.d)(e,(function(e){return t[e]||!1}))}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"linear",{get:function(){return void 0!==this._linear?this._linear:(this._linear=1===this.map.length&&this.map[0].every((function(t){return t}))||this.map.every((function(t){return 1===t.length&&t[0]})),this._linear)},enumerable:!0,configurable:!0}),t.prototype.match=function(t,e,r){void 0===r&&(r=0);var n=[];if(r>3)return{rotation:r,matched:n,center:null};var i,o=!1;if(Object(h.e)(this.map,r).every((function(r,a){var l=t[a];return!!l&&r.every((function(t,r){if(!t)return!0;var a=l[r];if(!a)return!1;var s=a[e];return o||(i=s,o=!0),s===i&&(n.push(a),!0)}))}))){var a=this.centerPosition(r),l=a.row,s=a.col,c=t[l][s];return{rotation:r,matched:n,center:c}}return this.match(t,e,r+1)},t.prototype.screen=function(t,e){return void 0===e&&(e={row:0,col:0}),(e.row<0?this.map.slice(-1*e.row):T(Object(h.d)(e.row,(function(){return[]})),this.map)).map((function(t){return e.col<0?t.slice(-1*e.col):T(Object(h.d)(e.col,(function(){return!1})),t)})).reduce((function(e,r,n){var i=t[n];return T(e,r.reduce((function(t,e,r){var n=i&&i[r];return n&&e?T(t,[n]):t}),[]))}),[])},Object.defineProperty(t.prototype,"center",{get:function(){var t=Math.floor(this.map.length/2),e=this.map[t],r=Math.floor(e.length/2);return{mustMatch:e[r],row:t,col:r}},enumerable:!0,configurable:!0}),t.prototype.centerPosition=function(t){if(void 0===t&&(t=0),void 0===this._centerPosition){var e=this.map.reduce((function(t,e){return t+e.reduce((function(t,e){return e?t+1:t}),0)}),0),r=Math.floor(e/2),n=0;this._centerPosition=Object(h.b)(this.map,(function(t,e){return Object(h.b)(t,(function(t,i){if(t)return n===r?{row:e,col:i}:void(n+=1)}))}))}var i=this.map.length,o=this.map[0].length;return Object(h.f)(this._centerPosition,i,o,t)},t}(),O=k,C=function(){return[k.fromLength(3,{value:1}),k.fromLength(4,{value:2}),new k({value:3,map:[[!0,!0],[!0,!0]]}),new k({value:4,map:[[!0,!0,!0],[!0],[!0]]}),new k({value:4,map:[[!0,!0,!0],[!1,!0],[!1,!0]]}),k.fromLength(5,{value:5}),k.fromLength(6,{value:5,orMore:!0})]},M=function(){var t=function(e,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(e,r)};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),j=function(){return(j=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},E=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],a=0,l=o.length;a<l;a++,i++)n[i]=o[a];return n},P=function(){return{row:-1,col:-1,tile:null}},D=function(t){function e(e){var r=t.call(this,j(j({},e),{tileDefs:{red:{generator:function(t){var e=t.variant;return r.defaultNewTileOfType("red",e)}},orange:{generator:function(t){var e=t.variant;return r.defaultNewTileOfType("orange",e)}},purple:{generator:function(t){var e=t.variant;return r.defaultNewTileOfType("purple",e)}},green:{generator:function(t){var e=t.variant;return r.defaultNewTileOfType("green",e)}},blue:{generator:function(t){var e=t.variant;return r.defaultNewTileOfType("blue",e)}}}}))||this;r.dragStartCallbacks=[],r.dragEndCallbacks=[],r.dragCallbacks=[],r.dragOrigin=P(),r.swapOrigin=P(),r.swapTarget=P(),r.needsShuffle=!1,r.x=e.x||0,r.y=e.y||0;var n=e.width||50*r.colCount;return r.width=n-n%r.colCount,r.height=e.height||r.width,r.sensitivity=e.sensitivity||25,r.shapes=e.shapes||C(),r.applyNormalStyle=e.applyNormalStyle,r.applySelectedStyle=e.applySelectedStyle,r.applyTargetedStyle=e.applyTargetedStyle,r.applyMatchedStyle=e.applyMatchedStyle,r.matchAnimationMs=e.matchAnimationMs||250,x.onPress(r.runDragStartCallbacks.bind(r)),x.onDepress(r.runDragEndCallbacks.bind(r)),x.onMove(r.runDragCallbacks.bind(r)),r.stabilizeInitialTiles(),window.setInterval((function(){return r.checkShuffle()}),1e3),r}return M(e,t),Object.defineProperty(e.prototype,"tileWidth",{get:function(){return this.width/this.colCount},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tileHeight",{get:function(){return this.height/this.rowCount},enumerable:!0,configurable:!0}),e.prototype.draw=function(t){var e=this,r=this.checkSettle(),n=this.startedSettlingAt?(new Date).getTime()-this.startedSettlingAt.getTime():0,i=n/100*this.tileHeight,o=n>100;o&&delete this.startedSettlingAt;var a=[];this.rows.forEach((function(n,l){n.forEach((function(n,s){var c=e.x+s*n.width,u=e.y+l*n.height;if(r&&!n.blank){var h={row:l,col:s},f=e.adjacentTile(h,"down");f.tile&&f.tile.blank&&(u+=i,o&&a.push([h,f]))}n.draw(t,c,u)}))})),a.forEach((function(t){var r=t[0],n=t[1];return e.swapTile(r,n)}))},e.prototype.update=function(){var t=this;if(this.spawnNewTiles(),!this.tilesWillDrop()){this.needsShuffle&&this.shuffle();var e=this.matchShapes();if(e.length){var r=this.swapOrigin.tile,n=this.swapTarget.tile,i=E(e).sort((function(t,e){return t.shape.value>e.shape.value?-1:e.shape.value>t.shape.value?1:t.tiles.some((function(t){return t===n||t===r}))?-1:e.tiles.some((function(t){return t===n||t===r}))?1:0})),o=new Map;i.forEach((function(e){var i=e.tiles,a=e.shape,l=e.rotation,s=e.centerTile;i.forEach((function(e){return t.explodeTile(e)}));var c=t.variantForShape(a,l);if(c){var u=i.find((function(t){return t===n||t===r}))||s,h=o.get(u);o.set(u,E(h||[],[c]))}})),o.forEach((function(t,e){e.variant=t[0],e.matched=!1})),e.length&&this.onTileMatched&&new Set(E(Array.from(o.keys()),this.tiles.filter((function(t){return t.matched})))).forEach((function(e){return t.onTileMatched(e)}))}}},e.prototype.spawnNewTiles=function(){var t=this;this.rows[0]=this.rows[0].map((function(e){return e.blank?t.newMundaneTile():e}))},e.prototype.tilesWillDrop=function(){return this.rows.slice(1).some((function(t){return t.some((function(t){return t.matched||t.blank}))}))},e.prototype.explodeTile=function(t){if(t.isMundane&&(t.matched=!0),!t.matched)switch(t.matched=!0,t.variant){case"horizontalClear":this.clearRow(this.findTile(t));break;case"verticalClear":this.clearCol(this.findTile(t));break;case"crossClear":this.clearCross(this.findTile(t));break;case"typeClear":this.clearType(t.type);break;case"bombClear":this.clearBomb(this.findTile(t))}},e.prototype.clearRow=function(t){var e=this,r=t.row;this.rows[r].forEach((function(t){return e.explodeTile(t)}))},e.prototype.clearCol=function(t){var e=this,r=t.col;this.rows.forEach((function(t){return e.explodeTile(t[r])}))},e.prototype.clearCross=function(t){var e=t.row,r=t.col;this.clearRow({row:e}),this.clearCol({col:r})},e.prototype.clearType=function(t){var e=this;this.tiles.forEach((function(r){r.type===t&&e.explodeTile(r)}))},e.prototype.clearBomb=function(t){var e=this,r=t.row,n=t.col,i=new O({map:[[!1,!1,!0],[!1,!0,!0,!0],[!0,!0,!0,!0,!0],[!1,!0,!0,!0],[!1,!1,!0]]}),o=i.center,a=r-o.row,l=n-o.col;i.screen(this.rows,{row:a,col:l}).forEach((function(t){return e.explodeTile(t)}))},e.prototype.checkSettle=function(){return this.tiles.some((function(t){return t.blank}))?(this.startedSettlingAt||(this.startedSettlingAt=new Date),!0):(delete this.startedSettlingAt,!1)},e.prototype.tileAt=function(t){if("row"in t){var e=t.row,r=t.col,n=this.rows[e][r];return n?{row:e,col:r,tile:n}:P()}var i=t.x-this.x,o=t.y-this.y;if(i>this.width||o>this.height)return P();var a=i/this.width,l=o/this.height,s=Math.floor(l*this.rowCount),c=Math.floor(a*this.colCount);return{row:s,col:c,tile:this.rows[s][c]}},e.prototype.findTile=function(t){return Object(h.b)(this.rows,(function(e,r){return Object(h.b)(e,(function(e,n){if(t===e)return{row:r,col:n,tile:e}}))}))||P()},e.prototype.tileCenter=function(t){var e=t.row,r=t.col,n=t.tile;return n?{x:this.x+r*n.height+n.height/2,y:this.y+e*n.width+n.width/2}:{x:-1,y:-1}},e.prototype.swapTile=function(t,e){"string"==typeof e?this.swapTileInDirection(t,e):this.swapTileWithTile(t,e)},e.prototype.onDragStart=function(t){var e=this.dragStartCallbacks.length;return this.dragStartCallbacks.push(t),e},e.prototype.removeDragStartListener=function(t){delete this.dragStartCallbacks[t]},e.prototype.onDragEnd=function(t){var e=this.dragEndCallbacks.length;return this.dragEndCallbacks.push(t),e},e.prototype.removeDragEndListener=function(t){delete this.dragEndCallbacks[t]},e.prototype.onDrag=function(t){var e=this.dragCallbacks.length;return this.dragCallbacks.push(t),e},e.prototype.removeDragListener=function(t){delete this.dragCallbacks[t]},e.prototype.adjacentSpace=function(t,e){var r="row"in t?t:this.tileAt(t),n=r.row,i=r.col;switch(e){case"up":return{row:n-1,col:i};case"down":return{row:n+1,col:i};case"left":return{row:n,col:i-1};case"right":return{row:n,col:i+1};default:return{row:n,col:i}}},e.prototype.adjacentTile=function(t,e){var r=this.adjacentSpace(t,e),n=r.row,i=r.col,o=this.rows[n]&&this.rows[n][i];return o?{row:n,col:i,tile:o}:P()},e.prototype.removeTile=function(t){t.blank=!0},e.prototype.matchShapes=function(){var t=this;return Object(h.d)(this.colCount).reduce((function(e,r){return t.shapes.forEach((function(n){t.rows.forEach((function(i,o){var a=t.rows.slice(o).map((function(t){return t.slice(r)})),l=n.match(a,"type"),s=l.rotation,c=l.matched,u=l.center;c.length>0&&e.push({shape:n,rotation:s,tiles:c,centerTile:u})}))})),e}),[])},e.prototype.defaultNewTileOfType=function(t,e){var r={red:{color:"red",shape:"heart"},orange:{color:"orange",shape:"star"},purple:{color:"purple",shape:"square"},green:{color:"green",shape:"circle"},blue:{color:"blue",shape:"triangle"}}[t];return new m({type:t,variant:e,color:r.color,shape:r.shape,width:this.tileWidth,height:this.tileHeight,applyNormalStyle:this.applyNormalStyle,applySelectedStyle:this.applySelectedStyle,applyTargetedStyle:this.applyTargetedStyle,applyMatchedStyle:this.applyMatchedStyle})},e.prototype.variantForShape=function(t,e){switch(t.value){case 2:return e%2==0?"verticalClear":"horizontalClear";case 3:return"bombClear";case 4:return"crossClear";case 5:return"typeClear";default:return""}},e.prototype.swapTileWithTile=function(t,e){var r=this.tileAt(t);if(r.tile){this.swapOrigin=r;var n=this.tileAt(e);n.tile&&(this.swapTarget=n,this.rows[n.row][n.col]=r.tile,this.rows[r.row][r.col]=n.tile)}},e.prototype.swapTileInDirection=function(t,e){var r=this.tileAt(t);if(r.tile){this.swapOrigin=r;var n=this.adjacentTile(r,e);n.tile&&(this.swapTarget=n,this.rows[n.row][n.col]=r.tile,this.rows[r.row][r.col]=n.tile)}},e.prototype.clearExistingDragFlags=function(){this.tiles.forEach((function(t){t.selected=!1,t.targeted=!1}))},e.prototype.setDragStartFlags=function(t){this.clearExistingDragFlags(),t.tile.selected=!0,t.tile.targeted=!0},e.prototype.setDragEndFlags=function(){this.clearExistingDragFlags()},e.prototype.setDragFlags=function(t,e){this.clearExistingDragFlags(),t.tile.selected=!0,e.tile.targeted=!0},e.prototype.runDragStartCallbacks=function(t){if(!this.checkSettle()){var e=t.x,r=t.y,n=this.tileAt({x:e,y:r});if(n.tile){this.dragOrigin=n,this.setDragStartFlags(this.dragOrigin);var i=Object(h.a)(t,this.tileCenter(n)),o=t.dragDirection,a=n;this.dragStartCallbacks.forEach((function(l){l({x:e,y:r,distance:i,direction:o,origin:n,destination:a,mouse:t})}))}}},e.prototype.runDragEndCallbacks=function(t){if(!this.checkSettle()){var e=this.dragOrigin;if(e.tile){var r=t.x,n=t.y,i=Object(h.a)(t,this.tileCenter(e)),o=i>this.sensitivity?this.adjacentTile(e,t.dragDirection):e,a=o.tile?o:e,l=t.dragDirection;this.setDragEndFlags(),this.dragEndCallbacks.forEach((function(o){o({x:r,y:n,distance:i,direction:l,origin:e,destination:a,mouse:t})})),this.dragOrigin=P()}}},e.prototype.runDragCallbacks=function(t){if(!this.checkSettle()){var e=this.dragOrigin;if(e.tile){var r=t.x,n=t.y;if(t.pressed){var i=Object(h.a)(t,this.tileCenter(e)),o=i>this.sensitivity?this.adjacentTile(e,t.dragDirection):e,a=o.tile?o:e,l=t.dragDirection;this.setDragFlags(e,a),this.dragCallbacks.forEach((function(o){o({x:r,y:n,distance:i,direction:l,origin:e,destination:a,mouse:t})}))}}}},e.prototype.replaceTile=function(t,e){var r=this.findTile(t),n=r.row,i=r.col;this.rows[n][i]=e},e.prototype.stabilizeInitialTiles=function(t){var e=this;if(void 0===t&&(t=20),t<=0)return this.rows=this.newRows(),void this.stabilizeInitialTiles();var r=this.matchShapes();r.length&&(r[0].tiles.forEach((function(t){return e.replaceTile(t,e.newMundaneTile())})),this.stabilizeInitialTiles(t-1))},e.prototype.possibleMatchesExist=function(){var t=this;return!!Object(h.b)(this.rows,(function(e,r){return Object(h.b)(e,(function(e,n){var i={row:r,col:n};return Object(h.b)(Object(h.i)("up","down","left","right"),(function(e){if(t.swapTileInDirection(i,e),t.matchShapes())return!0;t.swapTileInDirection(i,e)}))}))}))},e.prototype.checkShuffle=function(){this.needsShuffle=!this.possibleMatchesExist()},e}(c.a),_=function(){return(_=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},A={},z=10,F=function(t,e){var r=e.x,n=e.y,i=e.font,o=void 0===i?"Courier":i,l=e.color,s=void 0===l?"black":l,c=e.size,u=void 0===c?16:c,h=e.style,f=void 0===h?"":h,p=e.units,d=void 0===p?"px":p,y=e.align,g=void 0===y?"start":y,v=e.baseline,w=void 0===v?"top":v,b=e.strokeStyle,m=void 0===b?"":b,x=e.lineWidth,S=void 0===x?1:x;a.fillStyle=s,a.font=(f+" "+u+d+' "'+o+'"').trim(),a.textAlign=g,a.textBaseline=w,a.lineCap="round",a.lineJoin="round",a.fillText(t,r,n),m&&(a.lineWidth=S,a.strokeStyle=m,a.strokeText(t,r,n))};window.addEventListener("DOMContentLoaded",(function(){var t=Math.min(window.innerWidth,window.innerHeight,500),e=t-100,r=new D({x:100,y:10,width:e,rowCount:9,colCount:9,onTileMatched:function(t){A[t.type]=A[t.type]||0,A[t.type]+=1}});r.onDragEnd((function(t){z<=0||(r.swapTile(t.origin,t.destination),r.matchShapes().length?z--:r.swapTile(t.origin,t.destination))}));var n=r.tileTypes.sort();i(a,(function(t){r.draw(a),r.update();var i={x:50,y:60};y(a,{position:{x:10,y:20},size:80,fillStyle:"rgb("+(10-z)/10*255+", "+z/10*200+", 0)"}),F((z<0?0:z).toString(),{x:z>9?i.x-1:i.x,y:i.y+2,font:"Helvetica",style:"bold",color:"white",size:z>9?48:64,align:"center",baseline:"middle",strokeStyle:"rgba(255, 255, 255, 0.5)",lineWidth:6});var o=10+20*n.length;a.strokeStyle="rgba(0, 0, 255, 0.1)",a.lineWidth=3,a.strokeRect(10,110,80,o),n.forEach((function(t,e){var r=A[t]||0,n=115+20*e,i={position:{x:20,y:n},size:20,fillStyle:t,scale:.8};switch({red:"heart",orange:"star",purple:"square",green:"circle",blue:"triangle"}[t]){case"heart":p(a,i);break;case"star":g(a,_(_({},i),{obesity:1}));break;case"square":v(a,_(_({},i),{scale:.8}));break;case"circle":y(a,_(_({},i),{scale:.8}));break;case"triangle":d(a,i);break;default:a.fillStyle=t,a.fillRect(20,n,20,20)}F((r>9?"":" ")+(r>20?20:r)+"/20",{x:45,y:n+4+1,size:12,font:"Courier",style:"bold",color:r>=20?"#090":"#777"})}));var l=function(t){F(t,{x:100+e/2,y:10+e/2,size:84,align:"center",baseline:"middle",style:"bold",lineWidth:18,strokeStyle:"white"}),F(t,{x:100+e/2,y:10+e/2,size:84,color:"black",align:"center",baseline:"middle",style:"bold"})};n.every((function(t){return A[t]&&A[t]>=20}))?l("you win!"):z<=0&&l("you lose!")}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,