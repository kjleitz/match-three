!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=4)}([function(t,e,r){"use strict";function n(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];for(var n="number"==typeof e[0]?e[0]:0,i="function"==typeof e[0]?e[0]:e[1],o=t<n?[t,n]:[n,t],a=o[0],s=o[1]-a,l=Array(s),c=0;c<s;c++)l[c]=i?i(c+a):c+a;return l}r.d(e,"b",(function(){return n})),r.d(e,"a",(function(){return i}));var i=function(t,e){var r=t<e?[t,e]:[e,t],n=r[0],i=r[1]-n;return n+Math.random()*i}},function(t,e,r){"use strict";var n=function(t){if(void 0===t&&(t={}),this.type="",Object.assign(this,t),!this.type)throw new Error("Tiles must have a type.")};e.a=n},function(t,e,r){"use strict";var n=r(1),i=r(0),o=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],a=0,s=o.length;a<s;a++,i++)n[i]=o[a];return n},a=function(){function t(t){this.rowCount=10,this.colCount=10,this.tileTypes=["a","b","c","d"],this.tileClass=n.a,Object.assign(this,t),this.tileGenerator=t.tileGenerator,this.rows=this.newRows()}return Object.defineProperty(t.prototype,"rows",{get:function(){return this._rows},set:function(t){if(!t.every((function(e){return t[0].length===e.length})))throw new Error("Rows must all be the same length");this._rows=t,delete this._columns,this.rowCount=t.length,this.colCount=t[0].length},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"columns",{get:function(){return this._columns?this._columns:(this._columns=this.rows.reduce((function(t,e){return e.forEach((function(e,r){t[r]=o(t[r]||[],[e])})),t}),[]),this._columns)},set:function(t){if(!t.every((function(e){return t[0].length===e.length})))throw new Error("Columns must all be the same length");this.rows=t.reduce((function(t,e){return e.forEach((function(e,r){t[r]=o(t[r]||[],[e])})),t}),[])},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"tiles",{get:function(){return this.rows.reduce((function(t,e){return o(t,e)}),[])},enumerable:!0,configurable:!0}),t.prototype.newRows=function(){var t=this;return Object(i.b)(this.rowCount,(function(){return Object(i.b)(t.colCount,(function(){return t.tileGenerator()}))}))},t}();e.a=a},,function(t,e,r){"use strict";r.r(e);var n=function(t,e,r){void 0===r&&(r=0),requestAnimationFrame((function(){return n(t,e,r+1)})),t.clearRect(0,0,window.innerWidth,window.innerHeight),e(r)},i=n,o=document.createElement("canvas"),a=function(){o.width=window.innerWidth,o.height=window.innerHeight};a(),window.addEventListener("resize",a),document.body.appendChild(o);var s=o.getContext("2d");s||console.error("Canvas '2d' context is not supported.");var l,c=r(2),u=r(1),h=(l=function(t,e){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}l(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),p=function(t){function e(e){var r=t.call(this,{type:e.colorIsType&&(e.type||e.color)||e.imgUrlIsType&&(e.type||e.imgUrl)||e.type})||this;return r.width=50,r.height=50,r.color="transparent",r.selected=!1,r.targeted=!1,r.matchedAt=null,r.blank=!1,r._imgUrl="",r.width=e.width||r.width,r.height=e.height||r.height,r.color=e.colorIsType&&e.type||e.color||r.color,r.blank=e.blank||r.blank,r._imgUrl=e.imgUrlIsType&&e.type||e.imgUrl||r._imgUrl,r.applySelectedStyle=e.applySelectedStyle||function(){},r.applyTargetedStyle=e.applyTargetedStyle||function(){},r.applyMatchedStyle=e.applyMatchedStyle||function(){},r}return h(e,t),Object.defineProperty(e.prototype,"matched",{get:function(){return!!this.matchedAt},set:function(t){this.matchedAt=t?this.matchedAt||new Date:null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"imgUrl",{get:function(){return this._imgUrl},set:function(t){this._imgUrl=t,delete this._image},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"image",{get:function(){if(this._image)return this.image;if(!this.imgUrl)return null;var t=document.createElement("img");return t.src=this.imgUrl,t.width=this.width,t.height=this.height,this._image=t,this._image},enumerable:!0,configurable:!0}),e.prototype.draw=function(t,e,r){this.blank||(t.fillStyle=this.color,this.image?t.drawImage(this.image,e,r):t.fillRect(e,r,this.width,this.height),this.matched?this.applyMatchedStyle(this,{x:e,y:r}):this.selected?this.applySelectedStyle(this,{x:e,y:r}):this.targeted&&this.applyTargetedStyle(this,{x:e,y:r}))},e}(u.a),f=r(0),d=new(function(){function t(){var t=this;this.x=0,this.y=0,this.pressed=!1,this.pressCallbacks=[],this.depressCallbacks=[],this.moveCallbacks=[],this.pressedStartPos={x:this.x,y:this.y},window.addEventListener("mousedown",(function(e){t.populateFromMouseEvent(e),t.pressCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("mousemove",(function(e){t.populateFromMouseEvent(e),t.moveCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("mouseup",(function(e){t.depressCallbacks.forEach((function(e){return e(t)})),t.populateFromMouseEvent(e)})),window.addEventListener("touchstart",(function(e){t.populateFromTouchEvent(e),t.pressCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("touchmove",(function(e){t.populateFromTouchEvent(e),t.moveCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("touchend",(function(e){t.depressCallbacks.forEach((function(e){return e(t)})),t.populateFromTouchEvent(e)}))}return Object.defineProperty(t.prototype,"dragVector",{get:function(){var t=this.pressedStartPos,e=t.x,r=t.y;return this.pressed?{x:this.x-e,y:this.y-r}:{x:0,y:0}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"dragDirection",{get:function(){var t=this.dragVector,e=t.x,r=t.y;return 0===e&&0===r?"none":Math.abs(e)>=Math.abs(r)?e<0?"left":"right":r<0?"up":"down"},enumerable:!0,configurable:!0}),t.prototype.onPress=function(t){this.pressCallbacks.push(t)},t.prototype.onDepress=function(t){this.depressCallbacks.push(t)},t.prototype.onMove=function(t){this.moveCallbacks.push(t)},t.prototype.populateFromMouseEvent=function(t){this.x=t.x,this.y=t.y;var e=this.pressed;this.pressed=1===t.buttons,this.pressed&&!e&&(this.pressedStartPos={x:this.x,y:this.y})},t.prototype.populateFromTouchEvent=function(t){var e=t.touches;if(0===e.length)this.pressed=!1;else{var r=e[0];this.x=r.clientX,this.y=r.clientY,this.pressed=!0}},t}());var g=function(){function t(t){void 0===t&&(t={}),this.value=t.value||1,this.extend=t.extend||!1,this.map=t.map||[[]]}return t.fromLength=function(e,r){var n=void 0===r?{}:r,i=n.value;return new t({value:void 0===i?1:i,extend:!!n.orMore,map:[Object(f.b)(e,(function(){return!0}))]})},Object.defineProperty(t.prototype,"extend",{get:function(){return this._extend&&this.linear},set:function(t){this._extend=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"map",{get:function(){return this._map},set:function(t){delete this._linear;var e=t.reduce((function(t,e){var r=e.length;return r>t?r:t}),0);this._map=t.map((function(t){return Object(f.b)(e,(function(e){return t[e]||!1}))}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"linear",{get:function(){return void 0!==this._linear?this._linear:(this._linear=1===this.map.length&&this.map[0].every((function(t){return t}))||this.map.every((function(t){return 1===t.length&&t[0]})),this._linear)},enumerable:!0,configurable:!0}),t.prototype.match=function(t,e,r,n){if(void 0===r&&(r=0),void 0===n&&(n=this.map),r>3)return[];var i,o=[],a=!1;return n.every((function(r,n){var s=t[n];return!!s&&r.every((function(t,r){if(!t)return!0;var n=s[r];if(!n)return!1;var l=n[e];return a||(i=l,a=!0),l===i&&(o.push(n),!0)}))}))?o:this.match(t,e,r+1,function(t){for(var e=[],r=0;r<t.length;r++)for(var n=t[r],i=0;i<n.length;i++){var o=n[i];e[i]=e[i]||[],e[i].unshift(o)}return e}(n))},t}(),y=function(){return[g.fromLength(3,{value:1}),g.fromLength(4,{value:2}),g.fromLength(5,{value:3}),g.fromLength(6,{value:4,orMore:!0}),new g({value:5,map:[[!0,!0,!0],[!0],[!0]]}),new g({value:6,map:[[!0,!0,!0],[!1,!0],[!1,!0]]}),new g({value:7,map:[[!0,!0],[!0,!0]]})]},w=function(){var t=function(e,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(e,r)};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),v=function(){return(v=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},m=function(){return{row:-1,col:-1,tile:null}},b=function(t,e){var r=e.x-t.x,n=e.y-t.y;return Math.sqrt(Math.pow(r,2)+Math.pow(n,2))},S=function(t){function e(e){var r=t.call(this,v(v({},e),{tileTypes:e.tileTypes||["red","orange","yellow","green","blue"],tileGenerator:function(){return new p({type:this.tileTypes[Math.floor(Object(f.a)(0,this.tileTypes.length))],width:this.tileWidth,height:this.tileHeight,colorIsType:!0,applySelectedStyle:this.applySelectedStyle,applyTargetedStyle:this.applyTargetedStyle,applyMatchedStyle:this.applyMatchedStyle})}}))||this;return r.dragStartCallbacks=[],r.dragEndCallbacks=[],r.dragCallbacks=[],r.dragOrigin=m(),r.x=e.x||0,r.y=e.y||0,r.width=e.width||50*r.colCount,r.height=e.height||50*r.rowCount,r.tileWidth=r.width/r.colCount,r.tileHeight=r.height/r.rowCount,r.sensitivity=e.sensitivity||25,r.shapes=e.shapes||y(),r.applySelectedStyle=e.applySelectedStyle||function(){},r.applyTargetedStyle=e.applyTargetedStyle||function(){},r.applyMatchedStyle=e.applyMatchedStyle||function(){},r.matchAnimationMs=e.matchAnimationMs||250,d.onPress(r.runDragStartCallbacks.bind(r)),d.onDepress(r.runDragEndCallbacks.bind(r)),d.onMove(r.runDragCallbacks.bind(r)),r}return w(e,t),e.prototype.draw=function(t){var e=this,r=this.checkSettle(),n=this.startedSettlingAt?(new Date).getTime()-this.startedSettlingAt.getTime():0,i=n/100*this.tileHeight,o=n>100;o&&delete this.startedSettlingAt;var a=[];this.rows.forEach((function(n,s){n.forEach((function(n,l){var c=e.x+l*n.width,u=e.y+s*n.height;if(r&&!n.blank){var h={row:s,col:l},p=e.adjacentTile(h,"down");p.tile&&p.tile.blank&&(u+=i,o&&a.push([h,p]))}n.draw(t,c,u)}))})),a.forEach((function(t){var r=t[0],n=t[1];return e.swapTile(r,n)}))},e.prototype.update=function(){var t=this;(this.rows[0]=this.rows[0].map((function(e){return e.blank?t.tileGenerator():e})),this.rows.slice(1).some((function(t){return t.some((function(t){return t.blank}))})))||this.matchShapes().forEach((function(e){e.shape;e.tiles.forEach((function(e){e.matched=!0,setTimeout((function(){e.blank=!0}),t.matchAnimationMs)}))}))},e.prototype.checkSettle=function(){return this.tiles.some((function(t){return t.blank}))?(this.startedSettlingAt||(this.startedSettlingAt=new Date),!0):(delete this.startedSettlingAt,!1)},e.prototype.tileAt=function(t){if("row"in t){var e=t.row,r=t.col,n=this.rows[e][r];return n?{row:e,col:r,tile:n}:m()}var i=t.x-this.x,o=t.y-this.y;if(i>this.width||o>this.height)return m();var a=i/this.width,s=o/this.height,l=Math.floor(s*this.rowCount),c=Math.floor(a*this.colCount);return{row:l,col:c,tile:this.rows[l][c]}},e.prototype.tileCenter=function(t){var e=t.row,r=t.col,n=t.tile;return n?{x:this.x+r*n.height+n.height/2,y:this.y+e*n.width+n.width/2}:{x:-1,y:-1}},e.prototype.swapTile=function(t,e){"string"==typeof e?this.swapTileInDirection(t,e):this.swapTileWithTile(t,e)},e.prototype.onDragStart=function(t){var e=this.dragStartCallbacks.length;return this.dragStartCallbacks.push(t),e},e.prototype.removeDragStartListener=function(t){delete this.dragStartCallbacks[t]},e.prototype.onDragEnd=function(t){var e=this.dragEndCallbacks.length;return this.dragEndCallbacks.push(t),e},e.prototype.removeDragEndListener=function(t){delete this.dragEndCallbacks[t]},e.prototype.onDrag=function(t){var e=this.dragCallbacks.length;return this.dragCallbacks.push(t),e},e.prototype.removeDragListener=function(t){delete this.dragCallbacks[t]},e.prototype.adjacentSpace=function(t,e){var r="row"in t?t:this.tileAt(t),n=r.row,i=r.col;switch(e){case"up":return{row:n-1,col:i};case"down":return{row:n+1,col:i};case"left":return{row:n,col:i-1};case"right":return{row:n,col:i+1};default:return{row:n,col:i}}},e.prototype.adjacentTile=function(t,e){var r=this.adjacentSpace(t,e),n=r.row,i=r.col,o=this.rows[n]&&this.rows[n][i];return o?{row:n,col:i,tile:o}:m()},e.prototype.removeTile=function(t){t.blank=!0},e.prototype.matchShapes=function(){var t=this;return Object(f.b)(this.colCount).reduce((function(e,r){return t.shapes.forEach((function(n){t.rows.forEach((function(i,o){var a=t.rows.slice(o).map((function(t){return t.slice(r)})),s=n.match(a,"type");s.length&&e.push({shape:n,tiles:s})}))})),e}),[])},e.prototype.swapTileWithTile=function(t,e){var r=this.tileAt(t);if(r.tile){var n=this.tileAt(e);n.tile&&(this.rows[n.row][n.col]=r.tile,this.rows[r.row][r.col]=n.tile)}},e.prototype.swapTileInDirection=function(t,e){var r=this.tileAt(t);if(r.tile){var n=this.adjacentTile(r,e);n.tile&&(this.rows[n.row][n.col]=r.tile,this.rows[r.row][r.col]=n.tile)}},e.prototype.clearExistingDragFlags=function(){this.tiles.forEach((function(t){t.selected=!1,t.targeted=!1}))},e.prototype.setDragStartFlags=function(t){this.clearExistingDragFlags(),t.tile.selected=!0,t.tile.targeted=!0},e.prototype.setDragEndFlags=function(){this.clearExistingDragFlags()},e.prototype.setDragFlags=function(t,e){this.clearExistingDragFlags(),t.tile.selected=!0,e.tile.targeted=!0},e.prototype.runDragStartCallbacks=function(t){var e=t.x,r=t.y,n=this.tileAt({x:e,y:r});if(n.tile){this.dragOrigin=n,this.setDragStartFlags(this.dragOrigin);var i=b(t,this.tileCenter(n)),o=t.dragDirection,a=n;this.dragStartCallbacks.forEach((function(s){s({x:e,y:r,distance:i,direction:o,origin:n,destination:a,mouse:t})}))}},e.prototype.runDragEndCallbacks=function(t){var e=this.dragOrigin;if(e.tile){var r=t.x,n=t.y,i=b(t,this.tileCenter(e)),o=i>this.sensitivity?this.adjacentTile(e,t.dragDirection):e,a=o.tile?o:e,s=t.dragDirection;this.setDragEndFlags(),this.dragEndCallbacks.forEach((function(o){o({x:r,y:n,distance:i,direction:s,origin:e,destination:a,mouse:t})})),this.dragOrigin=m()}},e.prototype.runDragCallbacks=function(t){var e=this.dragOrigin;if(e.tile){var r=t.x,n=t.y;if(t.pressed){var i=b(t,this.tileCenter(e)),o=i>this.sensitivity?this.adjacentTile(e,t.dragDirection):e,a=o.tile?o:e,s=t.dragDirection;this.setDragFlags(e,a),this.dragCallbacks.forEach((function(o){o({x:r,y:n,distance:i,direction:s,origin:e,destination:a,mouse:t})}))}}},e}(c.a);window.defaultShapes=y;var C=new S({rowCount:10,colCount:10,matchAnimationMs:250,applySelectedStyle:function(t,e){var r=e.x,n=e.y,i=t.width,o=t.height;s.fillStyle="rgba(255, 255, 255, 0.5)",s.fillRect(r,n,i,o)},applyTargetedStyle:function(t,e){var r=e.x,n=e.y,i=t.width,o=t.height,a=(new Date).getTime(),l=2+3*Math.sin(a/250%Math.PI);s.fillStyle="rgba(255, 255, 255, 0.9)",s.fillRect(r,n,i,o),s.fillStyle=t.color,s.fillRect(r+l,n+l,i-2*l,o-2*l)},applyMatchedStyle:function(t,e){var r=e.x,n=e.y,i=t.width,o=t.height,a=t.color;if(t.matchedAt){var l=(new Date).getTime()-t.matchedAt.getTime(),c=l>250?1:l/250,u=c*(i/2),h=c*(o/2);s.fillStyle="#FFF",s.fillRect(r,n,i,o),s.fillStyle=a,s.fillRect(r+u,n+h,i-2*u,o-2*h)}}});C.onDragEnd((function(t){C.swapTile(t.origin,t.destination),C.matchShapes().length||C.swapTile(t.origin,t.destination)})),i(s,(function(t){C.draw(s),C.update()})),window.board=C}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,