!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=4)}([function(t,e,r){"use strict";r.d(e,"d",(function(){return i})),r.d(e,"c",(function(){return o})),r.d(e,"h",(function(){return a})),r.d(e,"a",(function(){return l})),r.d(e,"g",(function(){return s})),r.d(e,"b",(function(){return u})),r.d(e,"e",(function(){return h})),r.d(e,"f",(function(){return f})),r.d(e,"i",(function(){return p}));var n=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],a=0,l=o.length;a<l;a++,i++)n[i]=o[a];return n};function i(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];for(var n="number"==typeof e[0]?e[0]:0,i="function"==typeof e[0]?e[0]:e[1],o=t<n?[t,n]:[n,t],a=o[0],l=o[1]-a,s=Array(l),c=0;c<l;c++)s[c]=i?i(c+a):c+a;return s}var o=function(t,e,r){void 0===e&&(e=0),void 0===r&&(r=!0);var n=t<e?[t,e]:[e,t],i=n[0],o=n[1],a=Math.random()*(o-i);return i+(r?Math.floor(a):a)},a=function(t){return t[Math.floor(Math.random()*t.length)]},l=function(t,e){var r=e.x-t.x,n=e.y-t.y;return Math.sqrt(Math.pow(r,2)+Math.pow(n,2))},s=function(t,e,r){var n=t.x-e.x,i=t.y-e.y,o=Math.cos(r),a=Math.sin(r),l=n*a+i*o;return{x:n*o-i*a+e.x,y:l+e.y}};function c(t){return void 0===t||"[object Null]"===Object.prototype.toString.call(t)}var u=function(t,e){var r;return t.find((function(t,n,i){return!c(r=e(t,n,i))})),r},h=function(t,e){void 0===e&&(e=1);var r=e%4;switch(r<0?4-r:r){case 1:return t.reduce((function(e,r,n){return r.forEach((function(r,i){var o=i,a=t.length-n-1;e[o]=e[o]||[],e[o][a]=r})),e}),[]);case 2:return n(t).reverse().map((function(t){return n(t).reverse()}));case 3:return t.reduce((function(t,e,r){return e.forEach((function(n,i){var o=e.length-i-1,a=r;t[o]=t[o]||[],t[o][a]=n})),t}),[]);default:return t.map((function(t){return n(t)}))}},f=function(t,e,r,n){var i=t.row,o=t.col,a=n%4;switch(a<0?4-a:a){case 1:return{row:o,col:e-i-1};case 2:return{row:e-i-1,col:r-o-1};case 3:return{row:r-o-1,col:i};default:return{row:i,col:o}}},p=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t}},function(t,e,r){"use strict";var n="mundane",i=function(){function t(t){var e=t.type,r=t.value,i=t.variant;this.type=e,this.value=r||1,this._variant=i||n}return Object.defineProperty(t.prototype,"variant",{get:function(){return this._variant||n},set:function(t){this._variant=t||n},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isMundane",{get:function(){return this.variant===n},enumerable:!0,configurable:!0}),t}();e.a=i},function(t,e,r){"use strict";var n=r(1),i=r(0),o=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],a=0,l=o.length;a<l;a++,i++)n[i]=o[a];return n},a=function(){function t(t){this.rowCount=9,this.colCount=9,this.tileClass=n.a,Object.assign(this,t),this.tileDefs=t.tileDefs}return Object.defineProperty(t.prototype,"rows",{get:function(){return this._rows=this._rows||this.newRows(),this._rows},set:function(t){this._rows=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"tiles",{get:function(){return this.rows.reduce((function(t,e){return o(t,e)}),[])},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"tileTypes",{get:function(){return Object.keys(this.tileDefs)},enumerable:!0,configurable:!0}),t.prototype.newMundaneTile=function(){var t=Object(i.h)(this.tileTypes);return this.tileDefs[t].generator({variant:"mundane"})},t.prototype.newRows=function(){var t=this;return Object(i.d)(this.rowCount,(function(){return Object(i.d)(t.colCount,(function(){return t.newMundaneTile()}))}))},t.prototype.shuffle=function(){var t=this,e=this.rows.length;this.rows.forEach((function(r,n){var o=r.length;r.forEach((function(r,a){var l=Object(i.c)(e),s=Object(i.c)(o),c=t.rows[l][s];t.rows[l][s]=r,t.rows[n][a]=c}))}))},t}();e.a=a},,function(t,e,r){"use strict";r.r(e);var n=function(t,e,r){void 0===r&&(r=0),requestAnimationFrame((function(){return n(t,e,r+1)})),t.clearRect(0,0,window.innerWidth,window.innerHeight),e(r)},i=n,o=document.createElement("canvas"),a=o.getContext("2d");a||console.error("Canvas '2d' context is not supported."),window.ctx=a;var l=function(){var t=window.devicePixelRatio||1,e=window.innerWidth,r=window.innerHeight;o.width=e*t,o.height=r*t,o.style.width=e+"px",o.style.height=r+"px",a.scale(t,t)};window.addEventListener("DOMContentLoaded",(function(){l(),window.addEventListener("resize",l),document.body.appendChild(o)}));var s,c=r(2),u=r(1),h=r(0),f=function(t,e,r,n,i,o,a){var l=2*o,s=.75*l,c=o,u=a-2*s,f=i.y+u/2,p=f-u,d=i.x-c/2,y=i.x+c/2,g=i.x-l/2,v=i.x+l/2,w=p,b=w-s,m=f,x=m+s,S={vertical:0,horizontal:.5*Math.PI}[e],T=[{x:d,y:p},{x:d,y:f},{x:g,y:m},{x:i.x,y:x},{x:v,y:m},{x:y,y:f},{x:y,y:p},{x:v,y:w},{x:i.x,y:b},{x:g,y:w}],O=S?T.map((function(t){return Object(h.g)(t,i,S)})):T;t.fillStyle=r,t.strokeStyle=n,t.beginPath();var C=O[0];t.moveTo(C.x,C.y),O.forEach((function(e){var r=e.x,n=e.y;return t.lineTo(r,n)})),t.lineTo(C.x,C.y),t.closePath(),t.fill(),n&&t.stroke()},p=(s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),d=parseInt("FFFFFF",16),y=function(t){function e(e){var r=t.call(this,e)||this;return r.width=50,r.height=50,r.color="white",r.selected=!1,r.targeted=!1,r.matchedAt=null,r.blank=!1,r.matchAnimationMs=250,r._imgUrl="",r.width=e.width||r.width,r.height=e.height||r.height,r.color=e.color||r.color,r.blank=e.blank||r.blank,r.matchAnimationMs=e.matchAnimationMs||r.matchAnimationMs,r._imgUrl=e.imgUrl||r._imgUrl,r.applyNormalStyle=e.applyNormalStyle||r.defaultApplyNormalStyle,r.applySelectedStyle=e.applySelectedStyle||r.defaultApplySelectedStyle,r.applyTargetedStyle=e.applyTargetedStyle||r.defaultApplyTargetedStyle,r.applyMatchedStyle=e.applyMatchedStyle||r.defaultApplyMatchedStyle,r}return p(e,t),Object.defineProperty(e.prototype,"matched",{get:function(){return!!this.matchedAt},set:function(t){var e=this;t&&this.matchedAt||(clearTimeout(this.blankTimeout),t?(this.matchedAt=new Date,this.blankTimeout=window.setTimeout((function(){return e.blank=!0}),this.matchAnimationMs)):this.matchedAt=null)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"imgUrl",{get:function(){return this._imgUrl},set:function(t){this._imgUrl=t,delete this._image},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"image",{get:function(){if(this._image)return this.image;if(!this.imgUrl)return null;var t=document.createElement("img");return t.src=this.imgUrl,t.width=this.width,t.height=this.height,this._image=t,this._image},enumerable:!0,configurable:!0}),e.prototype.draw=function(t,e,r){this.blank||(this.applyNormalStyle(t,this,{x:e,y:r}),this.matched?this.applyMatchedStyle(t,this,{x:e,y:r}):this.selected?this.applySelectedStyle(t,this,{x:e,y:r}):this.targeted&&this.applyTargetedStyle(t,this,{x:e,y:r}))},e.prototype.defaultApplyNormalStyle=function(t,e,r){var n=r.x,i=r.y,o=e.width,a=e.height,l=e.image,s=e.color,c=e.variant;l?t.drawImage(l,n,i):(t.fillStyle=s,t.fillRect(n,i,o,a));var u={x:n+a/2,y:i+o/2},h=o/8,p=.6*a;switch(c){case"horizontalClear":f(t,"horizontal","white","white",u,h,p);break;case"verticalClear":f(t,"vertical","white","white",u,h,p);break;case"crossClear":!function(t,e,r,n,i,o){var a=2*i,l=.75*a,s=i,c=s,u=o-2*l-s,h=n.y-c/2,f=h-u,p=n.y+c/2,d=p+u,y=n.x-s/2,g=y-u,v=n.x+s/2,w=v+u,b=f,m=b-l,x=d,S=x+l,T=g,O=T-l,C=w,k=C+l,j=h,E=p,M=y,D=v,_=n.y-a/2,A=n.y+a/2,P=n.x-a/2,F=n.x+a/2,L=[{x:M,y:f},{x:M,y:h},{x:g,y:j},{x:T,y:_},{x:O,y:n.y},{x:T,y:A},{x:g,y:E},{x:y,y:E},{x:M,y:d},{x:P,y:x},{x:n.x,y:S},{x:F,y:x},{x:D,y:d},{x:D,y:p},{x:w,y:E},{x:C,y:A},{x:k,y:n.y},{x:C,y:_},{x:w,y:j},{x:v,y:j},{x:D,y:f},{x:F,y:b},{x:n.x,y:m},{x:P,y:b}];t.fillStyle=e,t.strokeStyle=r,t.beginPath();var N=L[0];t.moveTo(N.x,N.y),L.forEach((function(e){var r=e.x,n=e.y;return t.lineTo(r,n)})),t.lineTo(N.x,N.y),t.closePath(),t.fill(),r&&t.stroke()}(t,"white","white",u,h,p);break;case"typeClear":t.fillStyle="#"+((new Date).getTime()%d).toString(16),t.fillRect(n,i,o,a);break;case"bombClear":t.fillStyle="black";var y=o/2,g=a/2;t.fillRect(n+y/2,i+g/2,y,g)}},e.prototype.defaultApplySelectedStyle=function(t,e,r){var n=r.x,i=r.y,o=e.width,a=e.height;t.fillStyle="rgba(255, 255, 255, 0.5)",t.fillRect(n,i,o,a)},e.prototype.defaultApplyTargetedStyle=function(t,e,r){var n=r.x,i=r.y,o=e.width,a=e.height,l=(new Date).getTime(),s=this.matchAnimationMs,c=2+3*Math.sin(l/s%Math.PI);t.fillStyle="rgba(255, 255, 255, 0.9)",t.fillRect(n,i,o,a),t.fillStyle=e.color,t.fillRect(n+c,i+c,o-2*c,a-2*c)},e.prototype.defaultApplyMatchedStyle=function(t,e,r){var n=r.x,i=r.y,o=e.width,a=e.height,l=e.color,s=e.matchAnimationMs;if(e.matchedAt){var c=(new Date).getTime()-e.matchedAt.getTime(),u=c>s?1:c/s,h=u*(o/2),f=u*(a/2);t.fillStyle="#FFF",t.fillRect(n,i,o,a),t.fillStyle=l,t.fillRect(n+h,i+f,o-2*h,a-2*f)}},e}(u.a),g=new(function(){function t(){var t=this;this.x=0,this.y=0,this.pressed=!1,this.pressCallbacks=[],this.depressCallbacks=[],this.moveCallbacks=[],this.pressedStartPos={x:this.x,y:this.y},window.addEventListener("mousedown",(function(e){t.populateFromMouseEvent(e),t.pressCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("mousemove",(function(e){t.populateFromMouseEvent(e),t.moveCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("mouseup",(function(e){t.depressCallbacks.forEach((function(e){return e(t)})),t.populateFromMouseEvent(e)})),window.addEventListener("touchstart",(function(e){t.populateFromTouchEvent(e),t.pressCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("touchmove",(function(e){t.populateFromTouchEvent(e),t.moveCallbacks.forEach((function(e){return e(t)}))})),window.addEventListener("touchend",(function(e){t.depressCallbacks.forEach((function(e){return e(t)})),t.populateFromTouchEvent(e)}))}return Object.defineProperty(t.prototype,"dragVector",{get:function(){var t=this.pressedStartPos,e=t.x,r=t.y;return this.pressed?{x:this.x-e,y:this.y-r}:{x:0,y:0}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"dragDirection",{get:function(){var t=this.dragVector,e=t.x,r=t.y;return 0===e&&0===r?"none":Math.abs(e)>=Math.abs(r)?e<0?"left":"right":r<0?"up":"down"},enumerable:!0,configurable:!0}),t.prototype.onPress=function(t){this.pressCallbacks.push(t)},t.prototype.onDepress=function(t){this.depressCallbacks.push(t)},t.prototype.onMove=function(t){this.moveCallbacks.push(t)},t.prototype.populateFromMouseEvent=function(t){this.x=t.x,this.y=t.y;var e=this.pressed;this.pressed=1===t.buttons,this.pressed&&!e&&(this.pressedStartPos={x:this.x,y:this.y})},t.prototype.populateFromTouchEvent=function(t){var e=t.touches,r=this.pressed;if(0===e.length)this.pressed=!1;else{var n=e[0];this.x=n.clientX,this.y=n.clientY,this.pressed=!0,r||(this.pressedStartPos={x:this.x,y:this.y})}},t}()),v=function(){return(v=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},w=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],a=0,l=o.length;a<l;a++,i++)n[i]=o[a];return n},b=function(){function t(t){void 0===t&&(t={}),this.value=t.value||1,this.extend=t.extend||!1,this.map=t.map||[[]]}return t.fromLength=function(e,r){var n=void 0===r?{}:r,i=n.value;return new t({value:void 0===i?1:i,extend:!!n.orMore,map:[Object(h.d)(e,(function(){return!0}))]})},t.rotated=function(e,r){return void 0===r&&(r=1),new t(v(v({},e),{map:Object(h.e)(e.map,r)}))},Object.defineProperty(t.prototype,"extend",{get:function(){return this._extend&&this.linear},set:function(t){this._extend=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"map",{get:function(){return this._map},set:function(t){delete this._linear;var e=t.reduce((function(t,e){var r=e.length;return r>t?r:t}),0);this._map=t.map((function(t){return Object(h.d)(e,(function(e){return t[e]||!1}))}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"linear",{get:function(){return void 0!==this._linear?this._linear:(this._linear=1===this.map.length&&this.map[0].every((function(t){return t}))||this.map.every((function(t){return 1===t.length&&t[0]})),this._linear)},enumerable:!0,configurable:!0}),t.prototype.match=function(t,e,r){void 0===r&&(r=0);var n=[];if(r>3)return{rotation:r,matched:n,center:null};var i,o=!1;if(Object(h.e)(this.map,r).every((function(r,a){var l=t[a];return!!l&&r.every((function(t,r){if(!t)return!0;var a=l[r];if(!a)return!1;var s=a[e];return o||(i=s,o=!0),s===i&&(n.push(a),!0)}))}))){var a=this.centerPosition(r),l=a.row,s=a.col,c=t[l][s];return{rotation:r,matched:n,center:c}}return this.match(t,e,r+1)},t.prototype.screen=function(t,e){return void 0===e&&(e={row:0,col:0}),(e.row<0?this.map.slice(-1*e.row):w(Object(h.d)(e.row,(function(){return[]})),this.map)).map((function(t){return e.col<0?t.slice(-1*e.col):w(Object(h.d)(e.col,(function(){return!1})),t)})).reduce((function(e,r,n){var i=t[n];return w(e,r.reduce((function(t,e,r){var n=i&&i[r];return n&&e?w(t,[n]):t}),[]))}),[])},Object.defineProperty(t.prototype,"center",{get:function(){var t=Math.floor(this.map.length/2),e=this.map[t],r=Math.floor(e.length/2);return{mustMatch:e[r],row:t,col:r}},enumerable:!0,configurable:!0}),t.prototype.centerPosition=function(t){if(void 0===t&&(t=0),void 0===this._centerPosition){var e=this.map.reduce((function(t,e){return t+e.reduce((function(t,e){return e?t+1:t}),0)}),0),r=Math.floor(e/2),n=0;this._centerPosition=Object(h.b)(this.map,(function(t,e){return Object(h.b)(t,(function(t,i){if(t)return n===r?{row:e,col:i}:void(n+=1)}))}))}var i=this.map.length,o=this.map[0].length;return Object(h.f)(this._centerPosition,i,o,t)},t}(),m=b,x=function(){return[b.fromLength(3,{value:1}),b.fromLength(4,{value:2}),b.fromLength(5,{value:3}),b.fromLength(6,{value:4,orMore:!0}),new b({value:5,map:[[!0,!0,!0],[!0],[!0]]}),new b({value:6,map:[[!0,!0,!0],[!1,!0],[!1,!0]]}),new b({value:7,map:[[!0,!0],[!0,!0]]})]},S=function(){var t=function(e,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(e,r)};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),T=function(){return(T=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},O=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],a=0,l=o.length;a<l;a++,i++)n[i]=o[a];return n},C=function(){return{row:-1,col:-1,tile:null}},k=function(t){function e(e){var r=t.call(this,T(T({},e),{tileDefs:{red:{generator:function(t){var e=t.variant;return r.defaultNewTileOfType("red",e)}},orange:{generator:function(t){var e=t.variant;return r.defaultNewTileOfType("orange",e)}},purple:{generator:function(t){var e=t.variant;return r.defaultNewTileOfType("purple",e)}},green:{generator:function(t){var e=t.variant;return r.defaultNewTileOfType("green",e)}},blue:{generator:function(t){var e=t.variant;return r.defaultNewTileOfType("blue",e)}}}}))||this;r.dragStartCallbacks=[],r.dragEndCallbacks=[],r.dragCallbacks=[],r.dragOrigin=C(),r.swapOrigin=C(),r.swapTarget=C(),r.needsShuffle=!1,r.x=e.x||0,r.y=e.y||0;var n=e.width||50*r.colCount;return r.width=n-n%r.colCount,r.height=e.height||r.width,r.sensitivity=e.sensitivity||25,r.shapes=e.shapes||x(),r.applyNormalStyle=e.applyNormalStyle,r.applySelectedStyle=e.applySelectedStyle,r.applyTargetedStyle=e.applyTargetedStyle,r.applyMatchedStyle=e.applyMatchedStyle,r.matchAnimationMs=e.matchAnimationMs||250,g.onPress(r.runDragStartCallbacks.bind(r)),g.onDepress(r.runDragEndCallbacks.bind(r)),g.onMove(r.runDragCallbacks.bind(r)),r.stabilizeInitialTiles(),window.setInterval((function(){return r.checkShuffle()}),1e3),r}return S(e,t),Object.defineProperty(e.prototype,"tileWidth",{get:function(){return this.width/this.colCount},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tileHeight",{get:function(){return this.height/this.rowCount},enumerable:!0,configurable:!0}),e.prototype.draw=function(t){var e=this,r=this.checkSettle(),n=this.startedSettlingAt?(new Date).getTime()-this.startedSettlingAt.getTime():0,i=n/100*this.tileHeight,o=n>100;o&&delete this.startedSettlingAt;var a=[];this.rows.forEach((function(n,l){n.forEach((function(n,s){var c=e.x+s*n.width,u=e.y+l*n.height;if(r&&!n.blank){var h={row:l,col:s},f=e.adjacentTile(h,"down");f.tile&&f.tile.blank&&(u+=i,o&&a.push([h,f]))}n.draw(t,c,u)}))})),a.forEach((function(t){var r=t[0],n=t[1];return e.swapTile(r,n)}))},e.prototype.update=function(){var t=this;if(this.spawnNewTiles(),!this.tilesWillDrop()){this.needsShuffle&&this.shuffle();var e=this.matchShapes();if(e.length){var r=this.swapOrigin.tile,n=this.swapTarget.tile,i=O(e).sort((function(t,e){return t.shape.value>e.shape.value?-1:e.shape.value>t.shape.value?1:t.tiles.some((function(t){return t===n||t===r}))?-1:e.tiles.some((function(t){return t===n||t===r}))?1:0})),o=new Map;i.forEach((function(e){var i=e.tiles,a=e.shape,l=e.rotation,s=e.centerTile;i.forEach((function(e){return t.explodeTile(e)}));var c=t.variantForShape(a,l);if(c){var u=i.find((function(t){return t===n||t===r}))||s,h=o.get(u);o.set(u,O(h||[],[c]))}})),o.forEach((function(t,e){e.variant=t[0],e.matched=!1})),e.length&&this.onTileMatched&&new Set(O(Array.from(o.keys()),this.tiles.filter((function(t){return t.matched})))).forEach((function(e){return t.onTileMatched(e)}))}}},e.prototype.spawnNewTiles=function(){var t=this;this.rows[0]=this.rows[0].map((function(e){return e.blank?t.newMundaneTile():e}))},e.prototype.tilesWillDrop=function(){return this.rows.slice(1).some((function(t){return t.some((function(t){return t.matched||t.blank}))}))},e.prototype.explodeTile=function(t){if(t.isMundane&&(t.matched=!0),!t.matched)switch(t.matched=!0,t.variant){case"horizontalClear":this.clearRow(this.findTile(t));break;case"verticalClear":this.clearCol(this.findTile(t));break;case"crossClear":this.clearCross(this.findTile(t));break;case"typeClear":this.clearType(t.type);break;case"bombClear":this.clearBomb(this.findTile(t))}},e.prototype.clearRow=function(t){var e=this,r=t.row;this.rows[r].forEach((function(t){return e.explodeTile(t)}))},e.prototype.clearCol=function(t){var e=this,r=t.col;this.rows.forEach((function(t){return e.explodeTile(t[r])}))},e.prototype.clearCross=function(t){var e=t.row,r=t.col;this.clearRow({row:e}),this.clearCol({col:r})},e.prototype.clearType=function(t){var e=this;this.tiles.forEach((function(r){r.type===t&&e.explodeTile(r)}))},e.prototype.clearBomb=function(t){var e=this,r=t.row,n=t.col,i=new m({map:[[!1,!1,!0],[!1,!0,!0,!0],[!0,!0,!0,!0,!0],[!1,!0,!0,!0],[!1,!1,!0]]}),o=i.center,a=r-o.row,l=n-o.col;i.screen(this.rows,{row:a,col:l}).forEach((function(t){return e.explodeTile(t)}))},e.prototype.checkSettle=function(){return this.tiles.some((function(t){return t.blank}))?(this.startedSettlingAt||(this.startedSettlingAt=new Date),!0):(delete this.startedSettlingAt,!1)},e.prototype.tileAt=function(t){if("row"in t){var e=t.row,r=t.col,n=this.rows[e][r];return n?{row:e,col:r,tile:n}:C()}var i=t.x-this.x,o=t.y-this.y;if(i>this.width||o>this.height)return C();var a=i/this.width,l=o/this.height,s=Math.floor(l*this.rowCount),c=Math.floor(a*this.colCount);return{row:s,col:c,tile:this.rows[s][c]}},e.prototype.findTile=function(t){return Object(h.b)(this.rows,(function(e,r){return Object(h.b)(e,(function(e,n){if(t===e)return{row:r,col:n,tile:e}}))}))||C()},e.prototype.tileCenter=function(t){var e=t.row,r=t.col,n=t.tile;return n?{x:this.x+r*n.height+n.height/2,y:this.y+e*n.width+n.width/2}:{x:-1,y:-1}},e.prototype.swapTile=function(t,e){"string"==typeof e?this.swapTileInDirection(t,e):this.swapTileWithTile(t,e)},e.prototype.onDragStart=function(t){var e=this.dragStartCallbacks.length;return this.dragStartCallbacks.push(t),e},e.prototype.removeDragStartListener=function(t){delete this.dragStartCallbacks[t]},e.prototype.onDragEnd=function(t){var e=this.dragEndCallbacks.length;return this.dragEndCallbacks.push(t),e},e.prototype.removeDragEndListener=function(t){delete this.dragEndCallbacks[t]},e.prototype.onDrag=function(t){var e=this.dragCallbacks.length;return this.dragCallbacks.push(t),e},e.prototype.removeDragListener=function(t){delete this.dragCallbacks[t]},e.prototype.adjacentSpace=function(t,e){var r="row"in t?t:this.tileAt(t),n=r.row,i=r.col;switch(e){case"up":return{row:n-1,col:i};case"down":return{row:n+1,col:i};case"left":return{row:n,col:i-1};case"right":return{row:n,col:i+1};default:return{row:n,col:i}}},e.prototype.adjacentTile=function(t,e){var r=this.adjacentSpace(t,e),n=r.row,i=r.col,o=this.rows[n]&&this.rows[n][i];return o?{row:n,col:i,tile:o}:C()},e.prototype.removeTile=function(t){t.blank=!0},e.prototype.matchShapes=function(){var t=this;return Object(h.d)(this.colCount).reduce((function(e,r){return t.shapes.forEach((function(n){t.rows.forEach((function(i,o){var a=t.rows.slice(o).map((function(t){return t.slice(r)})),l=n.match(a,"type"),s=l.rotation,c=l.matched,u=l.center;c.length>0&&e.push({shape:n,rotation:s,tiles:c,centerTile:u})}))})),e}),[])},e.prototype.defaultNewTileOfType=function(t,e){return new y({type:t,variant:e,color:{red:"red",orange:"orange",purple:"purple",green:"green",blue:"blue"}[t],width:this.tileWidth,height:this.tileHeight,applyNormalStyle:this.applyNormalStyle,applySelectedStyle:this.applySelectedStyle,applyTargetedStyle:this.applyTargetedStyle,applyMatchedStyle:this.applyMatchedStyle})},e.prototype.variantForShape=function(t,e){switch(t.value){case 2:return e%2==0?"verticalClear":"horizontalClear";case 3:case 4:return"typeClear";case 5:case 6:return"crossClear";case 7:return"bombClear";default:return""}},e.prototype.swapTileWithTile=function(t,e){var r=this.tileAt(t);if(r.tile){this.swapOrigin=r;var n=this.tileAt(e);n.tile&&(this.swapTarget=n,this.rows[n.row][n.col]=r.tile,this.rows[r.row][r.col]=n.tile)}},e.prototype.swapTileInDirection=function(t,e){var r=this.tileAt(t);if(r.tile){this.swapOrigin=r;var n=this.adjacentTile(r,e);n.tile&&(this.swapTarget=n,this.rows[n.row][n.col]=r.tile,this.rows[r.row][r.col]=n.tile)}},e.prototype.clearExistingDragFlags=function(){this.tiles.forEach((function(t){t.selected=!1,t.targeted=!1}))},e.prototype.setDragStartFlags=function(t){this.clearExistingDragFlags(),t.tile.selected=!0,t.tile.targeted=!0},e.prototype.setDragEndFlags=function(){this.clearExistingDragFlags()},e.prototype.setDragFlags=function(t,e){this.clearExistingDragFlags(),t.tile.selected=!0,e.tile.targeted=!0},e.prototype.runDragStartCallbacks=function(t){if(!this.checkSettle()){var e=t.x,r=t.y,n=this.tileAt({x:e,y:r});if(n.tile){this.dragOrigin=n,this.setDragStartFlags(this.dragOrigin);var i=Object(h.a)(t,this.tileCenter(n)),o=t.dragDirection,a=n;this.dragStartCallbacks.forEach((function(l){l({x:e,y:r,distance:i,direction:o,origin:n,destination:a,mouse:t})}))}}},e.prototype.runDragEndCallbacks=function(t){if(!this.checkSettle()){var e=this.dragOrigin;if(e.tile){var r=t.x,n=t.y,i=Object(h.a)(t,this.tileCenter(e)),o=i>this.sensitivity?this.adjacentTile(e,t.dragDirection):e,a=o.tile?o:e,l=t.dragDirection;this.setDragEndFlags(),this.dragEndCallbacks.forEach((function(o){o({x:r,y:n,distance:i,direction:l,origin:e,destination:a,mouse:t})})),this.dragOrigin=C()}}},e.prototype.runDragCallbacks=function(t){if(!this.checkSettle()){var e=this.dragOrigin;if(e.tile){var r=t.x,n=t.y;if(t.pressed){var i=Object(h.a)(t,this.tileCenter(e)),o=i>this.sensitivity?this.adjacentTile(e,t.dragDirection):e,a=o.tile?o:e,l=t.dragDirection;this.setDragFlags(e,a),this.dragCallbacks.forEach((function(o){o({x:r,y:n,distance:i,direction:l,origin:e,destination:a,mouse:t})}))}}}},e.prototype.replaceTile=function(t,e){var r=this.findTile(t),n=r.row,i=r.col;this.rows[n][i]=e},e.prototype.stabilizeInitialTiles=function(t){var e=this;if(void 0===t&&(t=20),t<=0)return this.rows=this.newRows(),void this.stabilizeInitialTiles();var r=this.matchShapes();r.length&&(r[0].tiles.forEach((function(t){return e.replaceTile(t,e.newMundaneTile())})),this.stabilizeInitialTiles(t-1))},e.prototype.possibleMatchesExist=function(){var t=this;return!!Object(h.b)(this.rows,(function(e,r){return Object(h.b)(e,(function(e,n){var i={row:r,col:n};return Object(h.b)(Object(h.i)("up","down","left","right"),(function(e){if(t.swapTileInDirection(i,e),t.matchShapes())return!0;t.swapTileInDirection(i,e)}))}))}))},e.prototype.checkShuffle=function(){this.needsShuffle=!this.possibleMatchesExist()},e}(c.a);window.defaultShapes=x;var j={},E=10,M=function(t,e){var r=e.x,n=e.y,i=e.font,o=void 0===i?"Courier":i,l=e.color,s=void 0===l?"black":l,c=e.size,u=void 0===c?16:c,h=e.units,f=void 0===h?"px":h,p=e.align,d=void 0===p?"start":p,y=e.baseline,g=void 0===y?"top":y;a.fillStyle=s,a.font=""+u+f+' "'+o+'"',a.textAlign=d,a.textBaseline=g,a.fillText(t,r,n)};window.addEventListener("DOMContentLoaded",(function(){var t=Math.min(window.innerWidth,window.innerHeight,500),e=.75*t,r=(t-e)/2,n=t-r,o=r,l=r,s=new k({x:r,y:r,width:e,rowCount:9,colCount:9,onTileMatched:function(t){j[t.type]=j[t.type]||0,j[t.type]+=1}});s.onDragEnd((function(t){E<=0||(s.swapTile(t.origin,t.destination),s.matchShapes().length?E--:s.swapTile(t.origin,t.destination))})),i(a,(function(t){s.draw(a),s.update();E<=0&&(M("fin",{x:l+e/2,y:o+e/2,size:96,align:"center",baseline:"middle"}),a.strokeStyle="white",a.lineWidth=1,a.strokeText("fin",l+e/2,o+e/2)),M("Moves left: "+E,{x:24,y:n+20}),Object.keys(j).sort().forEach((function(t,e){var r=n+20+30*(1+e),i=j[t];a.fillStyle=t,a.fillRect(20,r,24,24),M((i>20?20:i)+"/20",{x:54,y:r,size:24})}))})),window.board=s}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,